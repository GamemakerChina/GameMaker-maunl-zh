{
    "\"{}entries{}\" - A JSON object string that contains another DS map, which will either contain the key \"{}default{}\" (signifying that no results are contained within) or the key \" {}entries{}\", which you can then get the value of. This returned value for \"{}entries{}\" will be a {}DS list{} containing each of the ranks from the leaderboard, where each entry in the list will itself reference another DS Map which will contain the keys \"{}name{}\", \"{}score{}\" and \" {}rank{}\", and it may also contain a \"{}data{}\" key depending on the function used to upload.":"\"{}intries{}\"- 一个 JSON 对象字符串，其中包含另一个 DS 映射，该映射要么包含密钥 \"{}default{}\"( 表示其中不包含任何结果)，要么包含密钥 \"{}intries{}\"，然后您可以获得其值。\"{} 条目 {}\" 的返回值将是 {}DS 列表 {}，其中包含排行榜中的每个排名，列表中的每个条目本身都将引用另一张 DS 地图，该地图将包含密钥 \"{}name{}\"、\"{}score{}\" 和 \"{}rank{}\"，还可能包含 \"{}data{}\" 密钥，具体取决于用于上传的函数。",
    "\"{}event_type{}\" - A string denoting the type of event (see below for the details)":"\"{}event_type{}\"-表示事件类型的字符串(详情见下文)",
    "\"{}event_type{}\" - This key will hold the constant {}ugc_item_installed{}.":"\"{}event_type{}\"--该键将持有常数{}ugc_item_installed{}。",
    "\"{}event_type{}\" - This key will hold the constant {}ugc_item_subscribed{}.":"\"{}event_type{}\"-此密钥将保存常量{}ugc_item_subscribed{}。",
    "\"{}event_type{}\" - This key will hold the constant {}ugc_item_unsubscribed{}.":"\"{}event_type{}\"-此密钥将保存常量{}ugc_item_unsubsubscribed{}。",
    "\"{}event_type{}\" - This key will hold the value \"{}leaderboard_download{}\"":"\"{}event_type{}\"- 此键将保存值 \"{}leaderboard_download{}\"",
    "\"{}event_type{}\" - This key will hold the value \"{}leaderboard_upload{}\"":"\"{}event_type{}\"-此键将保存值 \"{}leaderboard_upload{}\"",
    "\"{}id{}\" - The async ID returned by the function that triggered the event":"\"{}id{}\"-触发事件的函数返回的异步ID",
    "\"{}id{}\" - This key should match the ID value returned by the download calling function":"\"{}id{}\"-此键应与下载调用函数返回的ID值匹配",
    "\"{}lb_name{}\" - This key holds the name of the leaderboard which was posted to":"\"{}lb_name{}\"-此键包含发布到的排行榜的名称",
    "\"{}numEntries{}\" - The number of \"rows\" of leaderboard data that is being returned.":"\"{}numEntries{}\"- 返回的排行榜数据的 \"行\" 数。",
    "\"{}post_id{}\" - This key should match the ID value returned by the upload calling function":"\"{}post_id{}\"-此键应与上传调用函数返回的ID值匹配",
    "\"{}published_file_id{}\" - the ID of the newly installed UGC item (you can use the function {}steam_ugc_get_item_install_info(){}&nbsp;to get the path to the installed item)":"\"{}published_file_id{}\"--新安装的UGC项目的ID(你可以使用函数{}steam_ugc_get_item_install_info(){}来获取已安装项目的路径)。",
    "\"{}published_file_id{}\" : This key has the published file ID of the newly subscribed item":"\"{}published_file_id{}\"：此密钥具有新订阅项目的已发布文件 ID",
    "\"{}published_file_id{}\" : This key has the published file ID of the un-subscribed item":"\"{}published_file_id{}\": 这个键有未订阅项目的已发布文件 ID",
    "\"{}result{}\" - The result of the operation (a real value). This will either be the GML constant {}ugc_result_success{} or some other real number. You should check for this constant to ensure that the call was successful, and if another value is returned something has not worked correctly. The rest of the possible values returned are shown as the result of the Steam \"{}EResult{}\" value and you should see {}steamclientpublic.h{} in the SDK headers for all possible values.":"\"{}result{}\"- 操作的结果 (实数值)。这将是 GML 常量 {}ugc_result_success{} 或其他实数。你应该检查这个常量以确保调用成功，如果返回另一个值，则无法正常工作。返回的其余可能值显示为 Steam \"{}EResult{}\" 值的结果，对于所有可能的值，您应该在 SDK 标头中看到 {}steamclientpublic.h{}。",
    "\"{}score{}\" - This key holds the score which was posted":"\"{}score{}\"-此键包含已发布的分数",
    "\"{}status{}\" - The status of the callback, where -1 equals a failure or that no results were returned, and 0 equals a success.":"\"{}status{}\"-回调的状态，其中-1等于失败或未返回任何结果，而0等于成功。",
    "\"{}success{}\" - Will be 1 if the post succeeded, 0 failed":"\"{}success{}\"-如果帖子成功，将为1，则为0失败",
    "\"{}updated{}\" - Will be 1 if the leaderboard score was actually updated (ie: the new score was better) or 0 otherwise":"\"{}updated{}\"-如果排行榜得分已实际更新(即: 新得分更好)，则为1，否则为0",
    "Downloading Leaderboards":"下载排行榜",
    "Downloading UGC (user Generated Content)":"下载UGC(用户生成内容)",
    "Once the loop has finished, the entries list is destroyed as is the map that it was taken from. There is no need to destroy the {}async_load{} DS Map as this is handled for you by {}GameMaker{}.":"循环完成后，条目列表将被销毁，就像从其中获取的地图一样。无需销毁{}async_load{} DS Map，因为这是由{}GameMaker{}为您处理的。",
    "The Steam Async Event can also be triggered when a user subscribes to an item outside of the game - for example, they tab away to a browser and subscribe to a new item then tab back to the game. In these cases the {}async_load{} map will only contain the following details (and none of the default values listed at the top of this page):":"当用户在游戏之外订阅一个项目时，Steam异步事件也可以被触发，例如，他们在浏览器上做了标签，订阅了一个新项目，然后又回到了游戏中。在这种情况下，{}async_load{}地图将只包含以下细节(而不是本页顶部列出的默认值)。",
    "The Steam Async event can also be triggered when a workshop item is subscribed to - either from within the app, or externally from a workshop browser - and in these cases the {}async_load{} map will contain the following key/value pairs:":"Steam异步事件也可以在一个车间项目被订阅时触发--无论是从应用程序内部，还是从车间浏览器外部--在这些情况下，{}异步_加载{}地图将包含以下键/值对。",
    "The event will be triggered should any item be un-subscribed too, with the DS map holding the following:":"如果任何项目被取消订阅，该事件就会被触发，DS地图持有以下内容。",
    "This map is checked for the key \"{}default{}\" and if that is found then the map is destroyed and the event is exited. If no \"{}default{}\" key is found, the code will then parse the map to extract the necessary information about the leaderboard, by first extracting a DS List from the \"{}entries{}\" key of the DS Map, and then looping through each entry of the list to get another DS Map with the {}name{}, {}score{}&nbsp;and {}rank{}&nbsp;of each entry. These values are then stored in arrays and then we check to see if there is an additional \"{}data{}\" key. If there is (ie: the score was uploaded with an additional data package) then we also parse that and send it to the compiler console for debugging, before destroying the buffer and then continuing on to destroy the map. Note that if the \" {}data{}\" key is included, it needs to be decoded using the {}{}buffer_base64_decode(){}{}&nbsp;function before it can be correctly read.":"这个地图会被检查是否有 \"{}default{}\" 这个键，如果找到了，那么这个地图就会被销毁，事件也会被退出。如果没有找到 \"{}default{}\" 键，代码将解析地图以提取有关排行榜的必要信息，首先从 DS 地图的 \"{}entries{}\" 键中提取一个 DS 列表，然后循环浏览列表中的每个条目，得到另一个 DS 地图，其中包含每个条目的 {}name{}、{}score{} 和 {}rank{}。这些值被存储在数组中，然后我们检查是否有一个额外的 \"{}data{}\" 键。如果有 (即：分数是用一个额外的数据包上传的)，那么我们也会解析它，并将其发送到编译器控制台进行调试，然后再销毁缓冲区，再继续销毁地图。注意，如果包含 \"{}data{}\" 键，需要用 {}{}buffer_base64_decode(){}{} 函数对其进行解码，才能正确读取。",
    "This will send off a request to the Steam Server for the scores from the leaderboard \"Game Scores\", storing the async ID of the request in the variable \"{}score_get{}\". This will then be handled in the {}Steam Async Event{} in the following way:":"这将向Steam服务器发送来自排行榜\"游戏分数\"的分数请求，将请求的异步ID存储在变量\"{}score_get{}\"中。然后将在{}蒸汽异步事件{}中以以下方式处理：",
    "Unique UGC Events":"独特的UGC事件",
    "Uploading Data":"上传数据",
    "We will show an example of how downloading score data works by requesting the top ten ranking for the given leaderboard and parsing its results in the Steam Async Event (for uploading examples, please see the appropriate function pages). To start with we need to request the scores with the following code:":"我们将通过请求给定排行榜的前十名排名并在蒸汽异步事件中解析其结果来展示下载分数数据的工作原理示例(有关上传示例，请参阅相应的功能页面)。首先，我们需要使用以下代码请求分数：",
    "What we do here is first check the \"{}id{}\" key of the special async_load map. If this value is the same as the value of the original callback function (stored in the \"{}score_get{}\" variable) we then continue to process the data. The first thing we do is parse the {}async_load{} DS Map for the key \"{}entries{}\" which will contain a JSON object containing the leaderboard data. This JSON object is then decoded (see {}{}json_decode(){}{}) as another DS Map, and this new map ID is stored in the variable \"{}map{}\".":"我们在这里做的是首先检查特殊 async_load 映射的 \"{}id{}\" 键。如果此值与原始回调函数的值相同 (存储在 \"{}score_get{}\" 变量中)，我们将继续处理数据。我们要做的第一件事是解析 {}async_load{} DS Map 中的键 \"{} 条目 {}\"，它将包含一个包含排行榜数据的 JSON 对象。然后将此 JSON 对象解码 (参见 {}{}json_decode(){}{}) 为另一个 DS Map，并将此新映射 ID 存储在变量 \"{}map{}\" 中。",
    "When calling any function that triggers this event, it will generate a unique async ID value which should be stored in a variable and checked, as the async_load map will always contain an ID key which you can then parse and ensure that you are responding to the correct event. In fact, the map will always hold the following keys, regardless of the Steam function used to generate the async response:":"当调用任何触发此事件的函数时，它将生成一个唯一的异步ID值，该值应存储在变量中并进行检查，因为async_load映射将始终包含一个ID键，然后您可以解析该键并确保您响应正确的事件。事实上，无论用于生成异步响应的Steam函数如何，map将始终保存以下键：",
    "When using the Steam functions for downloading User Generated Content (UGC), a number of them will trigger this event. However, each function will generate an {}async_load{} DS Map with differing key/value pairs (although they will always contain the general \"{}id{}\", \"{}result{}\" and \"{}event_type{}\" keys), so please see the page specific to the function being used for details and examples.":"当使用 Steam 函数下载用户生成的内容 (UGC) 时，其中一些函数会触发这个事件。然而，每个函数都会生成一个 {}async_load{} 的 DS Map，其中的键 / 值对各不相同。DS 地图，其中的键 / 值对各不相同 (尽管它们总是包含一般的 \"{}id{}\"、\"{}result{}\" 和 \"{}event_type{}\" 键)，所以请查看所使用函数的具体页面以了解详情和示例。",
    "When using the Steam functions for downloading a leaderboard ({}steam_download_scores(){}, {}steam_download_scores_around_user(){}&nbsp;or {}steam_download_friends_scores(){}) the returned DS map will have the following key/value pairs:":"当使用 Steam 函数下载排行榜 ({}steam_download_scores(){},{}steam_download_scores_around_user(){} 或 {}steam_download_friends_scores(){}) 时，返回的 DS 映射将具有以下键 / 值对:",
    "When using the Steam functions for uploading a leaderboard (either {}steam_upload_score(){}&nbsp;or {}steam_upload_score_buffer(){}) the returned DS map&nbsp;will have the following key/value pairs:":"使用 Steam 函数上传排行榜 ({}steam_upload_score(){} 或 {}steam_upload_score_buffer(){}) 时，返回的 DS 映射将具有以下键 / 值对：",
    "You can see examples of this on the pages for the score upload functions.":"您可以在分数上传功能的页面上看到此示例。",
    "{}This event can only be triggered by {}callback{}{}s{} from some of the {}Steam extension{}&nbsp;functions and will return a {}DS Map{} stored in the variable {}{}async_load{}{}, containing different key/value pairs depending on the call-back from the function that has triggered the event. The map will always contain the key \"{}event_type{}\" which can then be parsed to find the type of function that triggered the event and change the code required to suit.":"{} 此事件只能由某些 {}Steam 扩展 {} 函数的 {1} 回调 {2}{3}{4} 触发，并将返回存储在变量 {}{}async_load{}{} 中的 {7}DS Map{8}，其中包含不同的键 / 值对，具体取决于触发事件的函数的回调。映射将始终包含键 \"{}event_type{}\"，然后可以解析该键以查找触发事件的函数类型并更改所需的代码以适应。"
}