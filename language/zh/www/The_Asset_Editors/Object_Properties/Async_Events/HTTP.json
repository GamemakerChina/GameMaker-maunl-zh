{
    "\"{}contentLength{}\": This is the size of file that the web server has said you should expect to receive (may be -1 if the server does not return this data).":"\"{}contentLength{}\"：这是Web服务器表示您应该收到的文件大小(如果服务器不返回此数据，可能是-1)。",
    "\"{}http_status{}\": The raw http status code (if available). This returns the standard web status code for most browsers, eg: 304 for \"Not Modified\" or 204 for \"No Content\", etc...":"\"{}http_status{}\"：原始超文本传输协议状态码(如果可用)。这将返回大多数浏览器的标准Web状态代码，例如：304代表\"未修改\"或204代表\"无内容\"等…",
    "\"{}id{}\": The id which was returned from the command. If you fire off a series of {}http_{} requests then you need to know which one you are getting the reply to, and so you would use this value to compare to the value you stored when you originally sent the request to find the right one.":"\"{}id{}\"：从命令返回的id。如果您发出一系列{}http_{}请求，那么您需要知道您正在得到哪个回复，因此您将使用此值与最初发送请求时存储的值进行比较，以找到正确的请求。",
    "\"{}result{}\": The data received (string only), or the path to the file downloaded if you have used {}{}http_get_file(){}{}. You may only get this key if the status is 0, but that is platform-dependent.":"\"{}result{}\"：接收到的数据(仅限字符串)，或下载文件的路径(如果您使用了{}{}http_get_file(){}{}. 您只能在状态为0时获得此密钥，但这取决于平台。",
    "\"{}result{}\": The data received (string only), or the path to the file downloaded if you have used {}{}http_get_file{}{}. You may only get this key if the status is 0, but that is platform-dependent.":"\"{}result{}\"：接收到的数据 (仅限字符串)，或下载文件的路径 (如果您使用了 {}{}http_get_file{}{}. 您只能在状态为 0 时获得此密钥，但这取决于平台。",
    "\"{}sizeDownloaded{}\": The size of the data that has already been downloaded.":"\"{}sizeDownloaded{}\"：已下载数据的大小。",
    "\"{}status{}\": Returns a value of less than 0 for an error, 0 for success and 1 if content is being downloaded.":"\"{}status{}\"：返回小于0的错误值，0表示成功，1表示正在下载内容。",
    "\"{}url{}\": The complete URL you requested.":"\"{}url{}\"：您请求的完整URL。",
    "Note that the event will not be triggered for every single data packet that is received, but will rather update at any time during the download within the main game loop. Also note that currently this functionality is only available for regular Windows target platforms.":"请注意，该事件不会为收到的每个封包触发，而是会在主游戏循环中的下载过程中随时更新。另请注意，目前此功能仅适用于常规Windows目标平台。",
    "The above shows what you get when you use the {}{}http_post_string(){}{}&nbsp;function, but each of the {}http_{} functions may return a slightly different map, so please refer to the manual entry for each function to find out the precise data that is returned for it.":"上面显示了使用 {}{}http_post_string(){}{} 函数时得到的结果，但每个 {}http_{} 函数可能返回略有不同的映射，因此请参考每个函数的手动条目以查找为其返回的精确数据。",
    "The above shows what you get when you use the&nbsp;{}{}http_post_string{}{} function, but each of the {}http_{}&nbsp;functions may return a slightly different map, so please refer to the manual entry for each function to find out the precise data that is returned for it.":"上面显示了使用 {}{}http_post_string{}{} 函数时得到的结果，但每个 {}http_{} 函数可能返回略有不同的映射，因此请参考每个函数的手动条目以查找为其返回的精确数据。",
    "There could also be additional data supplied by this map if you have requested files for downloading. In this case, the \"status\" will have a value of 1 and the DS map will hold these extra keys:":"如果您请求下载文件，此地图还可能提供其他数据。在这种情况下，\"状态\"的值为1，DS映射将保存这些额外的键：",
    "{}NOTE{}: As {}{}async_load {}{}creates a DS map, these functions are particularly useful when coupled with the {}{}json_encode(){}{}&nbsp;and {}{}json_decode(){}{}&nbsp;functions.":"{}注意{}：当 {}{}async_load{}{} 创建 DS 映射时，这些函数与 {}{}json_encode(){}{} 和 {}{}json_decode(){}{} 函数结合使用时特别有用。",
    "{}The HTTP Event is one that is triggered by the {}callback{} from one of the {}{}http_*(){} functions{}, like {}{}http_post_string(){}{}. It actually generates a {}DS Map{}&nbsp;that is exclusive to this event and is stored in the special variable {}{}async_load{} {}(please see the individual functions for code examples that explain the use of this event in further detail). This DS map has the following general structure:":"{}HTTP 事件是由来自 {}{}http_*(){} 函数 {} 之一的 {1} 回调 {2} 触发的事件，如 {}{}http_post_string(){}{}。它实际上会生成一个 {}Ds Map{}，该映射专用于此事件，并存储在特殊变量 {}{}async_load{}{} 中 (请参阅各个函数，了解有关此事件使用的详细代码示例)。此 Ds 映射具有以下一般结构：",
    "{}The HTTP Event is one that is triggered by the {}callback{} from one of the {}{}http_*(){} functions{}, like {}{}http_post_string{}{}. It actually generates a {}DS Map{}&nbsp;that is exclusive to this event and is stored in the special variable&nbsp;{}{}async_load{}{} (please see the individual functions for code examples that explain the use of this event in further detail). This DS map has the following general structure:":"{}HTTP 事件是由来自 {}{}http_*(){} 函数 {} 之一的 {1} 回调 {2} 触发的事件，如 {}{}http_post_string{}{}。它实际上会生成一个 {}DS Map{}，该映射专用于此事件，并存储在特殊变量 {}{}async_load{}{} 中 (请参阅各个函数，了解有关此事件使用的详细代码示例)。此 DS 映射具有以下一般结构：",
    "{}{}NOTE{}{}&nbsp;As&nbsp;{}{}async_load{}{} creates a DS map, these functions are particularly useful when coupled with the&nbsp;{}{}json_encode{}{} and&nbsp;{}{}json_decode{}{} functions.":"{}{}注意{}{}：当 {}{}async_load{}{} 创建 DS 映射时，这些函数与 {}{}json_encode{}{} 和 {}{}json_decode{}{} 函数结合使用时特别有用。"
}