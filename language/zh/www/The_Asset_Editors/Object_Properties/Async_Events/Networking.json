{
    "\"{}buffer{}\": This is the unique \"buffer ID\" which is generated by the event. A \"grow\" type buffer, byte aligned to 1, is created to hold the ID should be stored in a variable and used for all further function calls to the buffer in this event. Just like the {}async_load{} map, the buffer created is automatically removed from memory at the end of this event. For more information on buffers, please see {}Reference - Buffers{}.":"\"{}buffer{}\"：这是由事件生成的唯一\"缓冲区ID\"。创建\"growth\"类型缓冲区(字节对齐为1)以保存Id，该Id应存储在变量中，并用于此事件中对缓冲区的所有进一步函数调用。与{}async_load{}映射一样，创建的缓冲区在此事件结束时会自动从内存中删除。有关缓冲区的详细信息，请参阅{}参考-缓冲区{}。",
    "\"{}id{}\": The socket id (a real number, as returned by the network_create_server or network_create_socket function) that is receiving the event. In most cases the socket ID returned is the ID of TCP or UDP socket that triggered the event, however if the event is triggered in a server and it\u0027s a Data Event (see below) then the socket ID is that of the client that sent the data.":"\"{}id{}\":接收事件的套接字ID(由network_create_server或network_create_socket函数返回的实数)。在大多数情况下，返回的套接字ID是触发事件的Tcp或Udp套接字的ID，但是，如果事件是在服务器中触发的，并且是数据事件(请参阅下文)，则套接字ID是发送数据的客户端的ID。",
    "\"{}ip{}\": The IP address of the socket (as a string).":"\"{}ip{}\":套接字的Ip地址(作为字符串)。",
    "\"{}message_type{}\":{} (WebSockets only){}&nbsp;- This will be {}network_send_binary{} if the message received was in binary form, or {}network_send_text{} if it was received in text form.":"{}消息类型{}\"：{}(仅限WebSockets){}-如果收到的消息为二进制形式，则为{}network_send_binary{};如果收到的消息为文本形式，则为{}network_send_text{}。",
    "\"{}port{}\": The port associated with the IP address (useful when working with UDP).":"\"{}port{}\":与Ip地址关联的端口(使用Udp时有用)。",
    "\"{}size{}\": This is the size (in bytes) of the buffer data that is being received.":"\"{}size{}\":这是要接收的缓冲区数据的大小(以字节为单位)。",
    "\"{}socket{}\": This key will hold the connecting/disconnecting socket id.":"\"{}socket{}\"：此键将保留连接/断开套接字ID。",
    "\"{}succeeded{}\": This key will be either 0 or 1, where 0 means the connection timed out and 1 means it succeeded and the socket is ready to use.":"{}succeeded{}：此密钥将为0或1，其中0表示连接超时，1表示连接成功并且套接字准备就绪。",
    "\"{}type{}\": This will have one of the constants listed in the table below as its return value, and designates the network event type.":"{}type{}：这将在下表中列出一个常量作为其返回值，并指定网络事件类型。",
    "Common Networking Events":"常见网络事件",
    "Connecting / Disconnecting":"连接/断开",
    "If the event is of the type {}network_type_non_blocking_connect{}, then additionally there will be the following key:":"如果事件的类型为{}network_type_non_blocking_connect{}，则还会有以下密钥：",
    "It is worth noting that the Networking Event does not get triggered in clients when the server disconnects, and that neither of the {}network_type_*{} events will be triggered in clients when the server they are connected to disconnects, even if the connection is TCP based.":"值得注意的是，当服务器断开连接时，不会在客户端中触发网络事件，并且当客户端连接到的服务器断开连接时，也不会在客户端中触发{}network_type_*{}事件，即使连接是基于Tcp的。",
    "Networking":"网络",
    "Receiving Data":"接收数据",
    "The Networking event is one which will be triggered by any incoming network traffic, and is linked to the {}Network Functions{}. This event generates a special {}DS Map{}&nbsp;that is exclusive to this event and is stored in the special variable {}async_load{}. This DS map will contain different information depending on the type of network event that generated it.":"Networking事件将由任何传入网络流量触发，并链接到{}网络函数{}。此事件将生成一个专用于此事件的{}D映射{}，该映射存储在特殊变量{}async_load{}中。此DS map将包含不同的信息，具体取决于生成它的网络事件的类型。",
    "The event was triggered by a connection configured as non-blocking (you can use the function {}{}network_set_config(){}{}&nbsp;for this, or connect using {}{}network_connect_async(){}{} or {}{}network_connect_async_raw(){}{}).":"事件由配置为非阻塞的连接触发(您可以使用函数{}{}network_set_config(){}{}进行此操作，或者使用{}{}network_connect_async(){}{}或{}{}network_connect_async_raw(){}{}进行连接)。",
    "The event was triggered by a connection.":"事件由连接触发。",
    "The event was triggered by a disconnection.":"事件由断开连接触发。",
    "The event was triggered by incoming data.":"事件由传入数据触发。",
    "The following keys are common to all received network functions and will always be present in the {}async_load{} map:":"{}async_load{}映射中始终存在以下密钥，这些密钥是所有接收到的网络函数通用的：",
    "The possible return values for the \"type\" key can be any of the four constants listed below:":"\"type\"键的可能返回值可以是下面列出的四个常量之一：",
    "When you have a {}network_type_data{}&nbsp;type event, which signifies that your network has received data, the map created will have the following keys:":"{}network_type_data{}类型的事件表示您的网络已收到数据时，创建的映射将具有以下键：",
    "When you have an event of the type {}network_type_connect{} or {}network_type_disconnect{}, the {}async_load {}map will have the following additional key:":"{}网络类型连接{}或{}网络类型断开{}类型的事件时，{}async_load{}映射将具有以下附加密钥：",
    "{}NOTE{}&nbsp;The buffer created is only valid in these events and will be automatically freed when the event is over.":"{}注意{}创建的缓冲区仅在这些事件中有效，并将在事件结束时自动释放。"
}