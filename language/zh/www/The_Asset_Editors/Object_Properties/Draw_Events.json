{
    "Apart from the main Draw event, you also have a {} Draw Begin{} and a {}Draw End{}&nbsp;event too. These act exactly the same as a standard Draw event (ie: they will draw whatever you put in them every step of the game and for all viewports), but they do not \"default draw\" anything if they have not been explicitly added to an object, and they will always run before/after the standard Draw event. So, when the game is running you will {}always{}&nbsp;have the Draw Begin event for all instances, then the Draw event for all instances, then finally the Draw End event for all instances.":"除了主 Draw 事件之外，您还有一个 {}Draw 开始 {} 和一个 {}Draw 结束 {} 事件。这些行为完全一样的标准绘制事件 (即：他们将绘制任何你把他们在游戏的每一步和所有视口)，但他们不默认绘制任何东西，如果他们没有被明确添加到一个对象，他们将始终运行之前 / 之后的标准绘制事件。因此，当游戏运行时，您将 {} 始终 {} 对所有实例有 Draw 开始事件，然后对所有实例有 Draw 事件，最后对所有实例有 Draw 结束事件。",
    "If your object has had the visible parameter set to {}off {}(so that the instances of the object are not drawn) then {}all draw events are skipped {}(except for the {}Resize {}event). This means that making an instance invisible will stop all code placed in any of these events from running, so don\u0027t put essential code in the draw events if they are not going to be visible.":"如果您的对象已将可见参数设置为 {}off{} ( 以便不绘制对象的实例)，则 {} 所有绘制事件都将跳过 {}({} 调整大小 {} 事件除外)。这意味着使实例不可见将阻止放置在任何这些事件中的所有代码运行，因此如果它们不可见，请不要将基本代码放在绘制事件中。",
    "In this way, you can draw things or set draw properties in the Draw Begin step in one instance and be sure that all instances with a standard Draw event or Draw End event will use these properties or draw over what the first instance has drawn. Basically its a sure fire way to guarantee that certain things are drawn at certain times, much like the {}Begin Step{} and {}End Step {}events do.":"通过这种方式，您可以在一个实例中的绘制开始步骤中绘制东西或设置绘制属性，并确保具有标准绘制事件或绘制结束事件的所有实例都将使用这些属性或绘制第一个实例绘制的内容。基本上，这是一种确保某些东西在特定时间被绘制的可靠方法，就像{}开始步骤{}和{}结束步骤{}事件所做的那样。",
    "In this way, you can draw things or set draw properties in the Draw GUI Begin in one instance and be sure that all instances with a standard Draw GUI or Draw GUI End event&nbsp;will use these properties or draw over what the first instance has drawn. Basically it\u0027s a sure fire way to guarantee that certain things are drawn at certain times, much like the {}Begin Step{} and {}End Step{}&nbsp;events do.":"通过这种方式，您可以在一个实例中的绘图 GUI 开始中绘制东西或设置绘图属性，并确保具有标准绘图 GUI 或绘图 GUI 结束事件的所有实例都将使用这些属性或绘制第一个实例绘制的内容。基本上，这是一种确保某些东西在特定时间被绘制的可靠方法，就像 {} 开始步骤 {} 和 {} 结束步骤 {} 事件所做的那样。",
    "The Draw GUI event type falls under the Draw Event category and is specifically designed for drawing {}GUI{}&nbsp;elements that are not affected by the view camera scale or rotation. This means that you can have an instance draw all the elements for your {}HUD{}&nbsp;or user interface without having to base all the positioning of the elements on the the instance position within the room or the position of the current camera view.":"绘制 GUI 事件类型属于绘制事件类别，专为绘制不受视图相机比例或旋转影响的 {}GUI{} 元素而设计。这意味着您可以让一个实例为您的 {}HUD{} 或用户交互界面绘制所有元素，而不必将元素的所有位置基于房间内的实例位置或当前相机视图的位置。",
    "The Pre Draw and Post Draw events are part of the Draw Event category. However, unlike the other Draw events these draw {}directly {}to the {}display buffer{}, which will be the size of the combined screen space for all viewports&nbsp;currently visible, {}or {}the window size if only using one viewport or none at all. The image below illustrates this:":"Pre Draw和Post Draw事件是Draw事件的一部分。然而，与其他绘制事件不同的是，这些事件{}直接绘制{}到{}显示缓冲区{}，这将是所有视口&nbsp;当前可见的屏幕空间的总和，{}或者{}窗口大小，如果只使用一个视口或者根本不使用。下面的图片说明了这一点。",
    "The Pre Draw event is triggered before any other draw event, and in it you can set values, set draw properties and even draw things without worrying about the viewports&nbsp;or the size of the GUI layer (the GUI layer size may be the same as the screen buffer, but it may not be since you can set the GUI resolution in code).":"预绘制事件在任何其他绘制事件之前被触发，在其中你可以设置值，设置绘制属性，甚至绘制东西，而不必担心视口&nbsp;或GUI层的大小（GUI层的大小可能与屏幕缓冲区相同，但也可能不相同，因为你可以在代码中设置GUI分辨率）。",
    "The draw event is a very intensive event, in that it\u0027s one of the events that takes up most time and resources... to that end it is never a good idea to do anything in the draw event other than drawing. So save your large code or complex actions for the Step event or Alarms or whatever other event fits, but leave the draw event clear for the drawing as that\u0027s what it does best.":"绘制事件是一个非常密集的活动，因为这是一个占用大多数时间和资源的事件...为此，在绘制事件中做除了绘制任何事情都不是一个好主意。因此，请在\"步骤\"事件或\"报警\"或其他任何适合的事件保存大型代码或复杂动作，但请保留绘制事件的清除状态，因为这是绘制的最佳选择。",
    "The rest of the draw events are explained in the sections listed below:":"其余绘制事件在以下章节中进行了解释：",
    "The {}custom draw{}, which is when you place code or actions in the draw event. This is telling {}GameMaker{} \"{}I want to control what you draw for instances of this object{}\" and it completely overrides the default drawing. This means that, for example, you can have an object with a sprite assigned, then set the draw event to draw text and the text will be drawn on-screen, but the sprite will {}not {}be drawn as you have not told {}GameMaker{} to draw it along with the text.":"{} 自定义绘制 {}，即在绘制事件中放置代码或操作时。这告诉 {}GameMaker{}\"{} 我想控制你为这个对象 {} 的实例绘制什么\"，它完全覆盖了默认绘图。这意味着，例如，您可以为一个对象分配一个精灵，然后将绘制事件设置为绘制文本，文本将在屏幕上绘制，但精灵不会 {}{} 被绘制，因为您没有告诉 {}GameMaker{} 将其与文本一起绘制。",
    "The {}default draw{}, which is when you define the sprite in the object properties and place no actions or code in the normal Draw event, and in this case {}GameMaker{} will draw the assigned sprite automatically. Note that any transforms you perform in other events to change the image scale, index, blending etc... will be reflected too as long as the draw event is empty.":"{} 默认绘制 {}，即您在对象属性中定义精灵并在正常的 Draw 事件中不放置任何操作或代码时，在这种情况下 {}GameMaker{} 将自动绘制分配的精灵。请注意，只要绘制事件为空，您在其他事件中执行的任何转换以更改图像比例、索引、混合等都会得到反映。",
    "There are a few things to note when drawing things in {}GameMaker{}, whether it\u0027s a sprite you are drawing or a shader, or a 3D buffer:":"在 {}GameMaker{} 中绘制东西时需要注意一些事情，无论是您正在绘制的精灵、着色器还是 3D 缓冲区：",
    "What you draw has nothing to do with the collision engine you choose (traditional or physics) as that is defined by the object properties and the sprite (or mask) that the object has been given.":"您绘制的内容与您选择的碰撞引擎(传统或物理)无关，因为碰撞引擎由对象属性和对象给定的精灵(或掩码)定义。",
    "When drawing in these event it is important that you understand that the draw coordinates do not change even when camera views are active and (0,0) is {}always {}the top left hand corner of either the application surface or the display (see the note at the bottom of this section), and the default width and height are 1:1 with the application surface. Depth ordering is still maintained between different instances on different layers (so an instance on a higher layer will be drawn under one at a lower layer) and also within the events themselves, as the {}Draw GUI Begin{} event will draw for all instances first, then the standard {}Draw GUI{} will draw for all instances over that, and finally the {}Draw Gui End&nbsp;{}event is triggered.":"在这些事件中绘图时，重要的是您要理解绘图坐标不会改变，即使相机视图处于活动状态，并且 (0,0){} 始终 {} 位于应用程序表面或显示器的左上角 (请参阅本节底部的注释)，默认宽度和高度与应用程序表面为 1:1。深度排序仍然保持在不同层上的不同实例之间 (因此较高层上的实例将在较低层的实例下绘制)，也在事件本身内部，因为 {}Draw GUI 开始 {} 事件将首先为所有实例绘制，然后标准 {}Draw GUI{} 将为所有实例绘制，最后 {}Draw GUI 结束 {} 事件被触发。",
    "{}Draw Begin And Draw End{}{}Draw Begin And Draw End{}":"{} 绘制开始和绘制结束 {}{} 绘制开始和绘制结束 {}",
    "{}Draw GUI{}{}Draw GUI{}":"{}绘制GUI{}{}绘制GUI{}",
    "{}Pre And Post Draw{}{}Pre And Post Draw{}":"{}开始绘制和结束绘制{}{}开始绘制和结束绘制{}",
    "{}So, if you are using the Pre or Post draw events, you are drawing to the full screen render target (display buffer) which will have the same size as the window to which all viewports&nbsp;are made to fit. If you have no viewports&nbsp;active, this is instead set to the size of the window itself.":"{}因此，如果你使用Pre或Post draw事件，你将绘制到全屏的渲染目标（显示缓冲区），它的大小与所有视口&nbsp;所适应的窗口相同。如果你没有活动的视口，这将被设置为窗口本身的大小。",
    "{}The Draw event category is the one that has all the events that governs what you see on the screen when you run your game. It is split into various separate events to better handle the different drawing requirements for your game, and the&nbsp;image below illustrates the order in which each event is performed:":"{}绘制事件类别是一个包含所有事件的类别，这些事件控制着您在运行游戏时在屏幕上看到的内容。它被分成不同的独立事件，以更好地处理游戏的不同绘图要求，下图说明了每个事件的执行顺序：",
    "{}The normal Draw event falls into three sub-types: The {}Draw Begin{}, the standard {}Draw{} and the {}Draw End{} events. In general, you will only need to use the standard Draw event and you should be aware that all instances in a room will have this event triggered each step of the game, so this event will always be called as long as the instance has the {}visible {}flag set to true. It is important to understand that even if you have defined nothing for this sub-event in the object properties (ie: no code nor actions), {}if the object has a sprite assigned it will still have a draw event which will be triggered{}. This is because {}GameMaker{} has two ways to draw things in the Draw event:":"{} 正常的 Draw 事件分为三个子类型：{} 绘制开始 {}、标准 {} 绘制 {} 和 {} 绘制结束 {} 事件。一般来说，您只需要使用标准的 Draw 事件，并且您应该知道房间中的所有实例在游戏的每一步都会触发此事件，因此只要实例将 {} visible {} 标志设置为 true，就会始终调用此事件。重要的是要理解，即使您在对象属性中没有为此子事件定义任何内容 (即：没有代码或操作)，{} 如果对象分配了精灵，它仍然会有一个将被触发的绘制事件 {}。这是因为 {}GameMaker{} 有两种方法可以在 Draw 事件中绘制东西："
}