{
    "Additional Information":"其他资料",
    "Code Injection":"代码注入",
    "Code Injection can be used for iOS/tvOS extensions in the same way as described on the Android Extensions page: see {}Code Injection{}.":"代码注入可用于iOS/tvOS扩展，方法与Android扩展页面上的描述相同：见{}代码注入{}。",
    "For information on your creating native extensions for iOS, see&nbsp;{}Source Examples{}; and for information on using CocoaPods in extensions, see the following guide:":"关于你为iOS创建原生扩展的信息，请参见&nbsp;{}示例代码{}，关于在扩展中使用CocoaPods的信息，请参见以下指南。",
    "Here you can give the following details:":"在这里，你可以提供以下细节。",
    "If your extension has had any System Frameworks or 3rd Party Frameworks added, these will now be listed in the {}Extension Properties {}window, with each one having a check-box beside it. If you mark the check-box, you are enabling weak linking, which is useful should you need to \"override\" any symbol from the included library with your own value, but it should be noted that doing so will slow linking down.":"如果你的扩展添加了任何系统框架或第三方框架，这些框架现在将被列在{}扩展属性{}窗口中，每个框架旁边都有一个复选框。如果你选中该复选框，你就启用了弱连接，如果你需要用你自己的值 \"覆盖 \"内含库中的任何符号，这很有用，但应该注意，这样做会减慢连接速度。",
    "Note that there is a Game Option {}for iOS{} and {}for tvOS{}&nbsp;to add&nbsp;a {}Podfile.lock{} file to {}GameMaker{}, which is required if you are adding CocoaPods Dependencies&nbsp;in this section.":"注意，有{}iOS{}和{}tvOS{}和两个游戏设置，在{}GameMaker{}中添加一个{}Podfile.lock{}文件，如果你在本节中添加CocoaPods Dependencies，这是必须的。",
    "The following tags are available for the iOS and tvOS platforms:":"以下标签可用于iOS和tvOS平台。",
    "The functions and constants are added using {}placeholder {}files to group them together, so you\u0027d add a placeholder and then define the functions and macros as explained in the section {}here{}. To add the rest of the files though you need to first tick the {}iOS {}and/or the {}tvOS&nbsp;{}check-box in the {}Additional Features{} section of the editor to open up the relevant {}Extension Properties{} window (the image below shows the iOS properties window, but the tvOS window is exactly the same):":"函数和常量是通过{}占位符{}文件来添加的，所以你要添加一个占位符，然后按照{}这里{}的解释来定义函数和宏。要添加其余的文件，你需要首先在编辑器的{}附加功能{}部分勾选{}iOS {}和/或{}tvOS&nbsp;{}复选框，以打开相关的{}扩展属性{}窗口（下图是iOS的属性窗口，但tvOS的窗口是完全一样的）。",
    "The runtime location where the code is injected will depend on the type of the tag:":"代码被注入的运行时位置将取决于标签的类型:",
    "To create an extension for iOS or tvOS&nbsp;you have to do it in two parts. The first part would be to add the extension itself, along with the required files, and the second is to create the functions and macros/constants that the extension requires.":"要为 iOS 或 tvOS 创建扩展，必须分两部分进行。第一部分是添加扩展本身以及所需的文件，第二部分是创建扩展所需的函数和宏/常量。",
    "iOS / tvOS Extensions":"iOS / tvOS 扩展",
    "iOS and tvOS: Using Cocoa Pods":"iOS 和 tvOS: 使用 Cocoa Pods",
    "{}3rd Party Frameworks + Bundles{}: This section is for adding third party and SDK bundles. As with system frameworks you click the {}&nbsp;button to add them and then double click {} to edit, and selecting them then clicking {}&nbsp;will remove them (see the documentation that came with your chosen SDK for info on the framework name).{} {} Here you can choose to {}Not Embed{} the framework, {}Embed &amp; Sign{} it, or {}Embed it without Signing{}:{} {}This reflects the same option for a framework added under \"{}Frameworks, Libraries and Embedded Content{}\" in Xcode. ":"{}第三方框架+捆绑包{}：这一部分是用来添加第三方和SDK捆绑包的。与系统框架一样，你点击{}&nbsp;按钮来添加它们，然后双击{}来编辑，选择它们然后点击{}&nbsp;将删除它们（关于框架名称的信息，请参见你选择的SDK附带的文档）{} {} 在这里你可以选择{}不嵌入{}框架，{}嵌入&amp;签署{}它，或者{}嵌入它而不签署{}：{} {}这反映了Xcode中\"{}框架、库和嵌入内容{}\"下添加框架的相同选项 ",
    "{}Add Source{}: You can use this to add the source files required for your extension to work.&nbsp;Added files will be stored in the {}iOSSource{}&nbsp;folder inside your&nbsp;extension directory.":"{}添加来源{}：你可以用它来添加扩展工作所需的源文件。添加的文件将被存储在你的扩展目录下的{}iOSSource{}&nbsp;文件夹中。",
    "{}App Delegate Class Name{}: The name of your custom app delegate class. Setting this allows the extension to override/extend core app functionality. To use this feature you need to do the following: {} {}Ensure that the delegate source files have the same name as the delegate class (e.g. {}@interface MyCustomAppDelegate{} should be defined in \" {}MyCustomAppDelegate.h{}\"){} {}Add the {}${YYExtAppDelegateIncludes}{} environment variable at the top of your app delegate header file. This will be replaced at compile-time with the relevant include files for the parent delegate class.{} {}Use the {}${YYExtAppDelegateBaseClass}{} environment variable as the base class for your custom app delegate. This will be replaced at compile-time with the correct base delegate class.{} {} To ensure your extension works with any other extensions that use custom app delegates, you should call any base class methods from overridden methods in your child class. Before calling the superclass method, you need to make sure it is implemented in the class hierarchy to avoid errors, for e.g.: {} {} {}- (BOOL)application:(UIApplication *)application willFinishLaunchingWithOptions:(NSDictionary *)launchOptions{} {{} &nbsp; &nbsp; {}// Check if any superclasses implement this method and call it{}{} &nbsp; &nbsp; {}if{}([[{}self{} superclass] instancesRespondToSelector:@selector(application:willFinishLaunchingWithOptions:)]){} &nbsp; &nbsp; &nbsp; {}return{} [super application:application willFinishLaunchingWithOptions:launchOptions];{} &nbsp; &nbsp; {}else{}{} &nbsp; &nbsp; &nbsp; &nbsp; {}return{} TRUE;{} }{} ":"{}应用程序代理类名{}：你的自定义应用委托类的名称。设置这个选项可以让扩展覆盖/扩展核心应用功能。要使用这个功能，你需要做以下工作。 {} {}确保委托的源文件与委托类的名称相同（例如，{}@interface MyCustomAppDelegate{}应定义在\" {}MyCustomAppDelegate.h{}\"）{} {}在你的应用程序委托头文件的顶部添加{}${YYExtAppDelegateIncludes}{}环境变量。这将在编译时被替换为父级委托类的相关包含文件。{} {}使用{}${YYExtAppDelegateBaseClass}{}环境变量作为你的自定义应用代理的基类。这将在编译时被替换为正确的基础委托类。{} {} 为了确保你的扩展与任何其他使用自定义应用程序委托的扩展一起工作，你应该从你的子类的重载方法中调用任何基类方法。在调用超类方法之前，你需要确保它在类的层次结构中被实现，以避免错误，例如。 {} {} {}- (BOOL)application:(UIApplication *)application willFinishLaunchingWithOptions:(NSDictionary *)launchOptions{} {{} &nbsp; &nbsp; {}// 检查是否有超类实现此方法并调用它{}{} &nbsp; &nbsp; {}if{}([[{}self{} superclass] instancesRespondToSelector:@selector(application:willFinishLaunchingWithOptions:)]){} &nbsp; &nbsp; &nbsp; {}return{} [super application:application willFinishLaunchingWithOptions:launchOptions];{} &nbsp; &nbsp; {}else{}{} &nbsp; &nbsp; &nbsp; &nbsp; {}return{} TRUE;{} }{}",
    "{}Class Name{}: Your extension can have multiple classes, with each class having its own functions and constants, so you should give it a name that reflects its purpose.":"{}类名{}：你的扩展可以有多个类，每个类都有自己的函数和常量，所以你应该给它起一个能反映其用途的名字。",
    "{}Code Injection{}: Here you can add any code to be injected (added) into your iOS application when your game is built for testing or final release. Make sure to revise this (and your permissions) carefully before submitting any games to the store, as incorrect settings will cause your game to be failed for submission.":"{}代码注入{}：在这里你可以添加任何代码，以便在你的游戏被构建为测试或最终发布时被注入（添加）到你的iOS应用程序中。在向商店提交任何游戏之前，请确保仔细修改这个（和你的权限），因为不正确的设置将导致你的游戏提交失败。",
    "{}Compiler Flags / Linker Flags{}: Some frameworks and third party SDKs require the addition of extra linker flags and compiler flags to work, which can be specified here (see the documentation that accompanies the SDK or framework in question for details).":"{}编译器标志/链接器标志{}: 一些框架和第三方SDK需要添加额外的链接器标志和编译器标志才能工作，可以在这里指定（详情请参见相关SDK或框架的随附文档）。",
    "{}Enter framework path on Mac{}: If you want to add a framework to the extension whose files are present on the Mac that is used to build your project, you can enter the path to that framework (on the build machine) into this field and then click the {}&nbsp;button to add it.{} {} The path needs to point to a {}.framework{} file which will be compressed as a {}.zip{} and placed into the {}iOSSourceFromMac{} folder under your extension directory; you can easily open that at any time by right clicking {}&nbsp;on the extension and selecting {}Open in Explorer{}. ":"{}输入Mac上的框架路径{}：如果你想添加一个框架的扩展，其文件存在于用于构建你的项目的Mac上，你可以在这个字段中输入该框架的路径（在构建机器上），然后点击{}&nbsp;按钮来添加它。{} {} 该路径需要指向一个{}.framework{}文件，该文件将被压缩为{}.zip{}，并放置在你的扩展目录下的{}iOSSourceFromMac{}文件夹中；你可以在任何时候通过右击{}&nbsp;扩展，选择{}在资源管理器中打开{}，轻松打开该文件。 ",
    "{}System Frameworks{}: Here you can add in any iOS system&nbsp;{}framework{}{}s{} to your extension. These are added by clicking the {}&nbsp;button which will add a placeholder framework, which you can then edit by double clicking {}&nbsp;on it. You can find out more about available system frameworks {}here{}. To remove a system framework, simply select it and then click the {}&nbsp;button.{} {} {}You can enable the checkbox for a framework to mark it as a \"{}Weak Reference{}\". This adds it to \"{}Build Phases -&gt; Link Binary with Libraries{}\" section of Xcode as an \"{}Optional{}\" framework, as opposed to a \"{}Required{}\" framework (which is the default behaviour). ":"{}系统框架{}：在这里，你可以添加任何iOS系统&nbsp;{}框架{}{}{}到你的扩展中。通过点击{}&nbsp;按钮，可以添加一个占位符框架，然后你可以通过双击{}&nbsp;对其进行编辑。你可以在{}这里{}找到更多关于可用的系统框架。要删除一个系统框架，只需选择它，然后点击{}&nbsp;按钮。{} {} {}你可以启用某个框架的复选框，将其标记为\"{}弱参考{}\"。这将它添加到Xcode的\"{}Build Phases -&gt; Link Binary with Libraries{}\"部分，作为一个\"{}Optional{}\"框架，而不是一个\"{}Required{}\"框架（这是默认行为）。 ",
    "{}{}{}NOTE{}&nbsp;These paths are only for VM.&nbsp;For YYC, injected code will go into the {}{RUNTIME}\\yyc\\{} directory, where the paths may or may not be equivalent to those for VM.":"{}{}{}注意{} 这些路径仅适用于 VM。&nbsp;对于 YYC，注入的代码将进入 {}{RUNTIME}\\yyc{} 目录，其中的路径可能与 VM 的路径不同。"
}