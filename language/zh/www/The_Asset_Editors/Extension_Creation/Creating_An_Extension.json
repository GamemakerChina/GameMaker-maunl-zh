{
    "A \"generic\" placeholder is a file that can be of any type, except those required by the specific platforms (so no {}DLL{} or {}SO {}files, for example), and it will not be used except as a \"linker\" file to connect a set of functions or constants with the given extension (generally it is only for use with iOS and Android extensions, which is explained in the sections below for those targets). You can also add \"GML\" and \"JS\" placeholder files for more specific use.":"一个 \"通用 \"占位符是一个可以是任何类型的文件，除了那些特定平台所要求的（例如没有{}DLL{}或{}SO{}文件），它将不会被使用，除了作为一个 \"链接器 \"文件来连接一组函数或常量与给定的扩展（通常它只用于iOS和Android扩展，这将在下面的章节解释这些目标）。你还可以添加 \"GML \"和 \"JS \"占位符文件，以便更具体地使用。",
    "Adding Files":"添加文件",
    "Adding Functions":"添加功能",
    "As you can see, we start each section with a {}#define{} call, which in the example above is used to define two functions. Let\u0027s look at each part of a defined function:":"正如你所看到的，我们以一个{}#define{}的调用开始每个部分，在上面的例子中，它被用来定义两个函数。让我们来看看定义函数的每一部分。",
    "Aside from adding options using \"Add Option\" you can also add sections using \"Add Section\".&nbsp;A section is {}not{} an option, but only a heading displayed in the main Extension Editor window. Use this if you have a lot of options and want to clean up the options list that the end user sees.":"除了使用 \"添加选项 \"添加选项外，您还可以使用 \"添加章节 \"添加章节。&nbsp;章节{}不是{}一个选项，而只是显示在扩展编辑器主窗口的一个标题。如果你有很多选项，想清理最终用户看到的选项列表，可以使用这个方法。",
    "At the end we have a {}return{} statement&nbsp;which is used to return data from the extension back to the GML code where the function was called.":"在最后，我们有一个{}return{}语句用来将数据从扩展中返回到调用函数的GML代码中。",
    "Below that you have a section for defining the {}Help {}text, which is the text that will be shown in the code completion&nbsp;pop-up and the helper text at the bottom of the code editor.":"下面有一个部分用于定义{}帮助{}文本，这是将在代码完成弹出窗口中显示的文本，也是代码编辑器底部的帮助文本。",
    "Click on the cog icon next to \"{}Extension Options{}\" to create or modify the options for your extensions:":"点击\"{}扩展选项{}\"旁边的齿轮图标，创建或修改你的扩展选项。",
    "Creating An Extension":"创建一个扩展",
    "Creating Extension Options":"创建扩展选项",
    "Creating a GML Extension":"创建一个GML扩展",
    "Extension options will only be available at runtime if the extension has functions that are used at runtime. However, options will always be exported to the INI file (if the option is enabled) and batch scripts regardless of the extension\u0027s use.":"只有当扩展有在运行时使用的功能时，扩展选项才会在运行时可用。然而，无论扩展的使用情况如何，选项将始终被导出到INI文件（如果选项被启用）和批处理脚本中。",
    "Finally you can choose to hide the option from the editor, making it invisible to the end user who uses the extension.":"最后，你可以选择从编辑器中隐藏该选项，让使用该扩展的终端用户看不到它。",
    "Here you would select the target platform for the extension (for GML&nbsp;you would select them all), as well as rename the extension file and set a few other details, which we\u0027ll cover in a moment.":"在这里，你将选择扩展的目标平台（对于GML你将选择它们全部），以及重命名扩展文件和设置其他一些细节，我们稍后会介绍这些。",
    "If you were writing a {}DLL{} or JavaScript extension, then the process would be similar but in the correct language for the extension\u0027s file format.":"如果你要写一个{}DLL{}或JavaScript扩展，那么这个过程将是类似的，但要用正确的语言来写扩展的文件格式。",
    "In the extras window, you can also choose to export this option to the {}options.ini{} file bundled with your game.":"在额外窗口中，你也可以选择将这个选项导出到与游戏捆绑的{}options.ini{}文件中。",
    "In the image above we have populated the function editor with the details for the function {}instance_create_colour(){} that we defined in our GML extension file (note that this function editor window isn\u0027t just for defining GML functions -- it will be the same across all extension types). Let\u0027s go through each option that can be defined for a function:":"在上图中，我们在函数编辑器中填入了我们在GML扩展文件中定义的函数{}instance_create_colour(){}的详细信息（注意，这个函数编辑器窗口并不只是用来定义GML函数的--它在所有扩展类型中都是一样的）。让我们来看看可以为一个函数定义的每个选项。",
    "It is very important that your proxy files follow the naming conventions listed below, as {}GameMaker{} will parse these names and assign the target module for the file according to its extension and name and will automatically link the files for you. If you do not follow these conventions your game may not work at runtime, as {}GameMaker{} will not be able to work out which file to use so it will not load the file properly.":"你的代理文件必须遵循下面列出的命名规则，这一点非常重要，因为{}GameMaker{}会解析这些名称，并根据文件的扩展名和名称为文件分配目标模块，并自动为你链接文件。如果你不遵循这些约定，你的游戏在运行时可能无法工作，因为{}GameMaker{}将无法确定要使用哪个文件，所以它将无法正常加载文件。",
    "Macros":"宏",
    "Naming Conventions":"命名规则",
    "Next you can define the {}Return Type{}, which can be a {}double {}(real number {}floating point{}&nbsp;value) or a {}string{}; if there is nothing returned by the external function, then this does not matter.":"接下来，您可以定义{}返回类型{} ，它可以是{}双精度{}(实数{}浮点{}值)或{}字符串{} ; 如果外部函数没有返回任何值，那么这并不重要。",
    "Normally you won\u0027t need to use placeholders unless you\u0027re building for iOS and Android, so you would choose the \"Add File\"&nbsp;option to add any one of the following files depending on the target platform they are for:":"通常情况下，你不需要使用占位符，除非你是为iOS和Android构建的，所以你会选择 \"添加文件\"&nbsp;选项，根据他们的目标平台，添加以下任何一个文件。",
    "Once you have added your proxy files they will be copied into&nbsp;the Extensions folder of your project (you can find them&nbsp;by right-clicking {}&nbsp;on the extension and selecting {}Open in Explorer{}), so if you need to edit them, you should edit the copied files that are bundled with the game and not the source file that was imported, as {}GameMaker{} will be using the ones in the project for compiling.":"一旦你添加了你的代理文件，它们将被复制到你的项目的Extensions文件夹中（你可以通过右击{}&nbsp;扩展名，选择{}在资源管理器中打开{}找到它们），所以如果你需要编辑它们，你应该编辑与游戏捆绑的复制文件而不是导入的源文件，因为{}GameMaker{}将使用项目中的文件进行编译。",
    "Once you have done all that then the function is ready to be used in the project;&nbsp;it will now show up in auto-complete and be colour-coded too:":"一旦你完成了所有这些，那么这个函数就可以在项目中使用了; 它现在会以自动完成的形式显示，并且还会有颜色编码:",
    "Once you have done that, you need to add the file to the extension (using the \"Add File\" option) which will chain a new window to the Extensions Properties for the File Properties:":"一旦你完成了这些，你需要将文件添加到扩展名中（使用 \"添加文件 \"选项），这将为文件属性的扩展名链出一个新窗口。",
    "Placeholder Files":"占位符文件",
    "Proxy Files":"代理文件",
    "Selecting \"Add Function\" will permit you to add a function to the extension which can then be called in {}GameMaker{} same as&nbsp;any of the built-in functions. {}Once the function has been added, the following window will open for you to define the function properties (or you can double-click the function to open it):{}":"选择 \"添加函数 \"将允许你添加一个函数到扩展中，然后可以在{}GameMaker{}中调用，就像任何内置函数一样。{}一旦函数被添加，下面的窗口就会打开，让你定义函数属性（或者你可以双击函数来打开它）：{}",
    "That statement&nbsp;is then followed by the function code, which uses the {}argument0{}, {}argument1{}, etc. variables to access the arguments passed into the function when it is called;":"该语句之后是函数代码，它使用{}argument0{}、{}argument1{}等变量来访问调用时传入函数的参数。",
    "The editor here is pretty much self explanatory: you give the name of the macro and its constant value, or a short line of code. Note that if the macro is a line of code {}it will be evaluated every time the macro is called{}.":"这里的编辑器几乎是不言自明的：你给出宏的名称和它的常量值，或者一行简短的代码。注意，如果该宏是一行代码{}，那么每次调用该宏时都会重新运行代码{}。",
    "The editor should automatically be populated with the functions included in our GML file, but if it isn\u0027t then you can add them manually by clicking on the functions menu button {}&nbsp;and selecting what you require:":"编辑器应该自动填入我们的GML文件中的函数，但如果没有，你可以通过点击函数菜单按钮{}，选择你所需要的，手动添加它们。",
    "The following types of options can be created:":"可以创建以下类型的选项：",
    "The naming conventions for each target platform are given below:":"下面给出了每个目标平台的命名惯例：",
    "The other option you have is to create a {}Macro{}. A macro can be either a {}constant{}&nbsp;value or a short snippet of code (for more information on macros, please see {}here{}). For example, we could remove the&nbsp;{}c_alice_blue{}&nbsp;function from our previously defined GML extension&nbsp;and make it a macro instead. To create a macro, you can simply click on the \"Macros\" button in the Extension Properties, which will open the following window:":"你的另一个选择是创建一个{}宏{}。宏可以是一个{}常量{}&nbsp;值，也可以是一个简短的代码片段（关于宏的更多信息，请参见{}这里{}）。例如，我们可以从之前定义的GML扩展中删除{}c_alice_blue{}&nbsp;函数，而将其改为宏。要创建一个宏，你可以简单地点击扩展属性中的 \"宏 \"按钮，它将打开以下窗口。",
    "The {}#define{} statement is used to define a new function with the given name;":"{}#define{}语句用于定义一个具有给定名称的新函数。",
    "This is now ready for you to add the required files and functions, and you can also give the extension a name here (following the usual convention of only letters/numbers and no special symbols except the underscore \"_\"). You can also set the version number for the extension should you wish to.":"现在已经准备好让你添加所需的文件和功能，你也可以在这里给扩展名（按照通常的惯例，只有字母/数字，除了下划线\"_\"，没有特殊符号）。如果你愿意，你还可以为扩展设置版本号。",
    "To add a file to the new extension you need to click the menu icon {}&nbsp;and select either a placeholder file (\"Add Placeholder\") or import the actual file that is required for the target platform (\"Add File\"):":"要向新的扩展名添加文件，你需要点击菜单图标{}&nbsp;并选择一个占位符文件（\"添加占位符\"）或导入目标平台所需的实际文件（\"添加文件\"）。",
    "To add a proxy file, you can simply click on the {}&nbsp;button in the Properties window for the selected resource file and browse to the file location. Once it is added you may need to update the extension\u0027s targets to add the appropriate module, and when you next run your game it will be included as a proxy for that platform. You can remove proxy files too by clicking on the {}&nbsp;button&nbsp;which will remove the selected proxy file.":"要添加代理文件，只需单击“属性”窗口中所选资源文件的{}按钮，然后浏览到文件位置。一旦它被添加，你可能需要更新扩展的目标添加适当的模块，当你下一次运行你的游戏，它将包括作为该平台的代理。您也可以通过单击将删除所选代理文件的{}按钮来删除代理文件。",
    "To create an extension, you\u0027ll first need to right click {}&nbsp;anywhere within the {}Asset Browser{} and select {}Create -&gt; Extension{}. This will open the Extension properties for your newly created asset in the Workspace:":"要创建一个扩展，你首先需要右击{}{}资源浏览器{}中的任何地方，选择{}创建-扩展{}。这将在工作区中为你新创建的资源打开扩展属性。",
    "To start with you need to create the file that is going to be used. For a GML extension, this would be a text file (saved with the {}.gml{} extension) and would be formatted something like this:":"首先，你需要创建将被使用的文件。对于GML扩展，这将是一个文本文件（以{}.gml{}为扩展名保存），其格式是这样的：",
    "Under \"Copies To\" you can choose the platforms that this extension is exported to. For a simple GML extension you do not need to worry about this as it will run on all platforms, however if you are creating a platform-specific extension (such as for Android) then you need to make sure that it\u0027s {}not{} exported to any non-compatible platforms (such as iOS, consoles, etc.).":"在 \"Copies To \"下，你可以选择这个扩展被导出的平台。对于一个简单的GML扩展，你不需要担心这个问题，因为它将在所有平台上运行，然而，如果你正在创建一个特定平台的扩展（如Android），那么你需要确保它{}不要{}导出到任何不兼容的平台（如iOS，控制台等）。",
    "Under that you define the arguments that the function will take. These arguments can be either {}doubles {}or {}strings{}, and you can add them by clicking the add button {}&nbsp;and remove them by clicking the remove button {}.{}\n      {}\n      If your function can take a variable amount of arguments (meaning it has some optional arguments), you should make sure to check the \"Variable Length Arguments\" checkbox at the bottom.\n    ":"在此之下，你可以定义函数将接受的参数。这些参数可以是{}双数{}或{}字符串{}，你可以通过点击添加按钮{}来添加它们。通过点击删除按钮{}来删除它们。{}\n      {}\n      如果你的函数可以接受可变数量的参数（意味着它有一些可选的参数），你应该确保选中底部的 \"可变长度参数 \"复选框。\n    ",
    "Using Extension Options":"使用扩展选项",
    "Using the conventions above, you would swap out the {}&lt;{}Name{}&gt;{} part for the name of the base file that you are adding the proxy files for.":"使用上述惯例，你要把{}&lt;{}Name{}&gt;{}部分换成你要添加代理文件的基础文件的名称。",
    "When working with multiple target platforms, it is worth noting that you can create a single extension with only one set of functions/macros which will work on {}all {}platforms. This is achieved by adding only one of the link libraries to your game as an extension and placing the other(s) into the list of {}Proxy Files{} in the {}Extension Properties{} window.":"当使用多个目标平台时，值得注意的是，你可以创建一个只有一套函数/宏的单一扩展，它将在{}所有{}平台上工作。这可以通过在你的游戏中只添加一个链接库作为扩展，并将其他链接库放入{}扩展属性{}窗口的{}代理文件{}列表中来实现。",
    "You can also click on the&nbsp;{}&nbsp;cog icon next to an option to give it an optional {}Display Name{} and {}Description{} (that appears as a tooltip on hovering on the Display Name).":"你也可以点击一个选项旁边的&nbsp;{}&nbsp;齿轮图标，给它一个可选的{}显示名称{}和{}描述{}（在悬停在显示名称上时以工具提示出现）。",
    "You can also retrieve your extension options in your&nbsp;{}Compiler Batch Files / Scripts{}&nbsp;by using the name {}YYEXTOPT_&lt;ExtensionName&gt;_&lt;OptionName&gt;{}.":"你也可以在你的&nbsp;{}编译器批处理文件/脚本{}&nbsp;中通过使用{}YYEXTOPT_&lt;扩展名&gt;_&lt;选项名&gt;{}来检索你的扩展选项。",
    "You can retrieve the values of an extension\u0027s options at runtime by using the&nbsp;{}Extension Functions{}.":"你可以通过使用&nbsp;{}扩展函数{}在运行时检索扩展的选项值。",
    "You can see that we have given the function a {}Name{}, which is what you would use when calling the function in your project; note that this name doesn\u0027t have to match the one used in the extension -- you can name it anything you like and then use the {}External Name{} field to link it to the actual name defined in the extension:{}":"你可以看到，我们给了这个函数一个{}Name{}，这是你在项目中调用这个函数时要使用的；注意，这个名字不一定要和扩展中使用的名字一致--你可以给它起任何你喜欢的名字，然后用{}External Name{}字段将它和扩展中定义的实际名字联系起来：{}",
    "You\u0027ll notice that there is no file type for {}Android {}or {}iOS{}, which is because their set-up is slightly different. Further down you can find explanations on how to set them up but first let\u0027s look at creating a general GML extension for any of the target platforms, since the process is the same for all of them.":"你会注意到，没有{}Android {}或{}iOS{}的文件类型，这是因为它们的设置略有不同。再往下看，你可以找到关于如何设置它们的解释，但首先让我们看看如何为任何一个目标平台创建一个普通的GML扩展，因为这个过程对所有这些平台都是一样的。",
    "{}.dll{}: This is a dynamic-link library extension format and is only compatible with the Windows&nbsp;and Xbox targets (each target will need a different {}*.dll{} file compatible with its specifications).":"{}.dll{}：这是一种动态链接库扩展格式，只与Windows&nbsp;和Xbox目标兼容（每个目标都需要不同的{}*.dll{}文件与其规格兼容）。",
    "{}.dylib{}: This is the Mac equivalent of a DLL and is only compatible with Mac target (not iOS).":"{}.dylib{}：这相当于Mac的DLL，只与Mac目标兼容（不与iOS兼容）。",
    "{}.gml{}: This is a file made only with the GameMaker Language and is compatible with all platforms.":"{}.gml{}：这是一个只用GameMaker语言制作的文件，与所有平台兼容。（事实上，很多GML扩展无法在HTML5目标上正常兼容）",
    "{}.js{}: This is a JavaScript extension format and is only compatible with the HTML5 target.":"{}.js{}：这是一种JavaScript扩展格式，只与HTML5目标兼容。",
    "{}.prx{}: This is a file format for adding functionality to the PlayStation target (each target will need a different {}*.prx{} file compatible with its specifications).":"{}.prx{}：这是一种为PlayStation目标添加功能的文件格式（每个目标都需要一个与其规格兼容的不同的{}*.prx{}文件）。",
    "{}.so{}: This is the Linux equivalent of a DLL and is only compatible with the Ubuntu (Linux) target.":"{}.so{}：这相当于Linux的DLL，只与Ubuntu（Linux）目标兼容。",
    "{}After clicking \"{}Yes{}\" on the confirmation prompt, you will see a new window, where you can add new extension options:":"{}在确认提示上点击\"{}是{}\"后，你会看到一个新的窗口，在这里你可以添加新的扩展选项。",
    "{}Boolean{}: This creates a true/false checkbox.":"{}Boolean{}：这将创建一个真/假复选框。",
    "{}Defined functions can also be set as {}Init Functions{} or {}Final Functions{}, meaning that they will be called automatically when the game starts (Init) and when the game ends (Final).":"{}定义的函数也可以被设置为{}初始函数{}或{}最终函数{}，这意味着它们将在游戏开始（初始）和游戏结束（最终）时被自动调用。",
    "{}FilePath{}: This is a path to a file. It allows you to use your OS\u0027s explorer to browse for a file.":"{}FilePath{} : 这是文件的路径。它允许您使用操作系统的浏览器浏览文件。",
    "{}FolderPath{}: This is a path to a folder/directory. It allows you to use your OS\u0027s explorer to browse for a folder.":"{}FolderPath{}：这是一个指向文件夹/目录的路径。它允许你使用你的操作系统的资源管理器来浏览一个文件夹。",
    "{}For example, say you have a Windows extension with the {} {}dll {}{}\"{}Haggis.dll{}\". You would simply replicate this {} {}dll{}{}&nbsp;as a Mac {} {}DyLib{}{}, naming it \"{}{}libHaggis.dylib{}{}\" and making sure that the internal function names match those of the original Windows {} {}dll{}{}. This {} {}DyLib{} {}would then be added into the Proxy Files and set to export when the game is run on the Mac target, and {}GameMaker{} will automatically use it when the extension functions are called.":"{}例如，假设你有一个Windows扩展的{}{}dll {}{}\"{}Haggis.dll{}\"。你可以简单地将这个{}{}dll{}{}&nbsp;复制为Mac的{}{}DyLib{}{}，将其命名为\"{}{}libHaggis.dylib{}{}\"，并确保内部函数名称与原Windows {}{}dll{}{}一致。然后，这个{}{}DyLib{}{}将被添加到代理文件中，当游戏在Mac目标上运行时被设置为导出，{}GameMaker{}将在调用扩展函数时自动使用它。",
    "{}IMPORTANT!{} All platforms support the Init function call, {}but not all platforms will perform the Final function call.{} This is because certain platforms will simply close the app without giving any notice or time for this function to be called. The platforms mostly affected by this are&nbsp;{}iOS{}, {}Android{}, {}HTML5{}, {}PlayStation {}and {}Xbox{}.":"{}重要的是！{}所有平台都支持Init函数调用，{}但不是所有平台都会执行Final函数调用。{}这是因为某些平台会直接关闭应用程序，而不给任何通知或时间让这个函数被调用。受此影响的平台主要是&nbsp;{}iOS{}、{}Android{}、{}HTML5{}、{}PlayStation{}和{}Xbox{}。",
    "{}If you do not see this, you can double click on your Extension asset in the Asset Browser to open its properties window or to focus on it when it\u0027s already open.":"{}如果你没有看到这个，你可以在资源浏览器中双击你的扩展资源来打开它的属性窗口，或者在它已经打开的情况下关注它。",
    "{}List{}: This is a dropdown from which a single item can be selected from a predefined list of items.":"{}List{}：这是一个下拉菜单，可以从预定义的项目列表中选择一个单项。",
    "{}NOTE{}: Adding a file to an extension copies it to the project directory, meaning that any further changes must be made to that copy for them to be visible in-game. You can find the copy by right-clicking on your extension in the Asset Browser and selecting \"Open in Explorer\".":"{}注意{}：将文件添加到扩展名中会将其复制到项目目录中，这意味着任何进一步的修改都必须在该副本中进行，以便在游戏中看到它们。你可以在资源浏览器中右键点击你的扩展名，并选择 \"在资源管理器中打开 \"来找到该副本。",
    "{}NOTE{}: If the function is part of a native extension for Windows, Mac or Ubuntu ({}dll{}, {}dylib{} or&nbsp;{}so{} respectively) and it has more than four arguments, {}all arguments must be of the same type{}.":"{}注意{}：如果该函数是Windows、Mac或Ubuntu（分别为{}dll{}、{}dylib{}或&nbsp;{}so{}）的本地扩展的一部分，并且它有四个以上的参数，{}所有参数必须是同一类型{}。",
    "{}Number{}: This is a real number.":"{}Number{} : 这是一个实数。",
    "{}String{}: This is a text string.":"{}String{} : 这是一个文本字符串。",
    "{}You can give each extension option a name, a default value, and a data type. The name is what you would use internally in your extension code to retrieve the option\u0027s value.":"{}你可以给每个扩展选项一个名称，一个默认值，和一个数据类型。名称是你在扩展代码中内部使用的，用来检索该选项的值。"
}