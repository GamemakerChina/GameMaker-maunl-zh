{
    "A general description of what the function does":"函数执行操作的一般说明",
    "All this script does is check to see if an instance has the same {}object_index{} as a given object and would be called simply as:":"此脚本执行的所有操作都是检查某个实例是否与给定对象具有相同的 {}object_index{}，并且可以简单地称为：",
    "Auto-Generating JSDoc":"自动生成 JSDoc",
    "By using {}Feather{}\u0027s&nbsp;{}Quick Fixes{}&nbsp;menu (press {}CTRL/CMD + Q{}&nbsp;or click the {}&nbsp;icon). The option is visible when your text cursor is placed on a function header (i.e. the line where the function\u0027s name is defined).":"使用 {}Feather{} 的 {} 快速修复 {} 菜单 (按 {}CTRL/CMD + Q{} 或点击 {} 图标)。当文本光标置于函数标题 (即定义函数名称的行) 上时，该选项可见。",
    "Descriptions in your JSDoc comments support&nbsp;{}Markdown{}, which is used when your function info is displayed in a&nbsp;{}Contextual Tooltip{}.":"JSDoc 注释中的描述支持 {}Markdown{}，当您的函数信息显示在 {} 上下文工具提示 {} 中时，将使用 Markdown。",
    "Examples":"示例",
    "For example, see the following function:":"例如，请参见以下函数：",
    "Format":"格式",
    "Hides the function from Feather\u0027s autocomplete":"对语法检查的自动完成隐藏函数",
    "However, writing that into the code editor will show you the argument variable names directly ({}_id{} and {}_obj{}) which in most cases is not very descriptive.&nbsp;You can use JSDoc to define custom argument names and descriptions, along with information for the function as well:":"但是，将其写入代码编辑器将直接显示参数变量名称 ({}_id{} 和 {}_obj{})，在大多数情况下，这些名称的描述性不强。您可以使用 JSDoc 定义自定义参数名称和说明，以及函数的信息：",
    "If you haven\u0027t specified a type for your arguments or return value, and you\u0027re using {}Feather{}, it will assume a data type for them automatically, based on your function body.":"如果您尚未为参数或返回值指定类型，并且正在使用{}语法检查{}，则它将根据您的函数体自动为这些参数指定数据类型。",
    "If you wish your custom functions to have code completion and to show the required arguments in a specific manner&nbsp;in the code editor, then you need to add some {}JSDoc style{} comments. These comments are used to tell the auto-complete feature how the function should be used and filled out in the {}script editor{}.":"如果希望自定义函数具有代码完成功能并在代码编辑器中以特定方式显示所需的参数，则需要添加一些 {}JSDoc 样式 {} 注释。这些注释用于告诉自动完成功能应如何在 {} 脚本编辑器 {} 中使用和填写该函数。",
    "If you wish your custom functions to have code completion and to show the required arguments in the code editor, then you need to add some {}JSDoc style{} comments. These comments are used to tell the auto-complete feature how the function should be used and filled out in {}The Code Editor{}.":"如果您希望自定义函数具有代码补全功能并在代码编辑器中显示所需的参数，那么您需要添加一些 {}JSDoc 样式 {} 注释。这些注释用于告诉自动完成功能应如何在 {} 代码编辑器 {} 中使用和填写该功能。",
    "In both cases, when it can, Feather will automatically fill the data type of each parameter and the return value of the function, based on their usage in the function body.":"在这两种情况下，如果可以的话，Feather 都会根据函数体中的用法自动填充每个参数的数据类型和函数的返回值。",
    "In&nbsp;{}The Code Editor{}, JSDoc comments can be auto-generated if its {}preference{} (\"{}Autofill jsdoc header comments{}\") is enabled. To insert JSDoc, simply start writing a comment above your function header.":"在 {} 代码编辑器 {} 中，如果启用了其 {} 首选项 {}(\"{} 自动填充 jsdoc 标头注释 {}\")，则可以自动生成 JSDoc 注释。要插入 JSDoc，只需在函数标题上方编写注释即可。",
    "Information on an argument, with an optional {}type{}&nbsp;in {}{}{} (or multiple acceptable types separated by {},{} or&nbsp;{}|{})":"有关参数的信息，在中具有可选的 {0}type{1} {}{ }{} （或由 {}、{} 或 {}|{} 分隔的多个可接受的类型）",
    "Information on arguments, with an optional {}type{}":"有关具有可选{}类型{}的参数的信息",
    "Marks the function as deprecated":"将函数标记为已弃用",
    "Marks the function as&nbsp;{}pure{}":"将函数标记为 {}pure{}",
    "Now, when calling this function anywhere in your project, you will see the new argument names that were entered in the JSDoc comments:":"现在，在项目中的任何位置调用此函数时，都会看到在 JSDoc 注释中输入的新参数名称：",
    "See information on data types for {}@param{} and {}@return{} on {}Feather Data Types{}.":"有关 {}@param{} 和 {}@return{} 的数据类型的信息，请参阅 {} 语法检查数据类型 {}。",
    "See the following example, where the JSDoc comments were auto-filled by Feather and not manually modified:":"请参阅以下示例，其中 JSDoc 注释由 Feather 自动填充，而不是手动修改：",
    "Sets the context for the function, which Feather auto-complete uses to provide contextual information. Can be an object or a constructor.":"设置函数的上下文，\"语法检查自动完成\"使用该上下文提供上下文信息。可以是对象或构造函数。",
    "Since scripts can have multiple functions in them, you can add JSDoc comments for each of them before its declaration:":"由于脚本中可以包含多个函数，因此可以在脚本声明之前为每个脚本添加 JSDoc 注释：",
    "The comments themselves need to be given an identifier (preceded by \"{}@{}\") and content. The available identifiers are as follows:&nbsp;":"需要为注释本身指定一个标识符 (前面带有 \"{}@{}\") 和内容。可用标识符如下：",
    "The format for a typical function header would be to have the function name, the description of the function, and then the list of the different arguments (parameters) that the function takes, making sure to start each line with a triple forward slash \"{}///{}\" as that tells {}GameMaker{} to parse the comment as being JSDoc style. You can alternatively wrap your JSDoc comments in {}/**{}&nbsp;...&nbsp;{}*/{}, with the {}/**{} being on its own line.":"典型函数标题的格式为：函数名称、函数说明，然后是函数所采用的不同参数 (参数) 的列表，确保每行都以 \"{}///{}\" 三进制斜杠开头，这表示 {}GameMaker{} 将注释解析为 JSDoc 样式。您也可以用 {}/**{}...{}*/{} 封装 JSDoc 注释，{}/**{} 位于自己的行上。",
    "The full function name including arguments":"包含参数的完整函数名",
    "The {}start_x{} and {}start_y{} arguments are marked as optional, which means the code editor will now expect 2 to 4 arguments, as can be seen in the warning message:":"{}start_x{} 和 {}start_y{} 参数被标记为可选，这意味着代码编辑器现在需要 2 到 4 个参数，如警告消息中所示：",
    "To get an idea of how this would work when writing your own functions, let\u0027s take this basic example:":"要了解在编写自己的函数时如何工作，让我们以下列基本示例为例：",
    "URL for the function, opens when you press {}F1{} on the function name or use the {}RMB -&gt; Go To Declaration{} option.":"函数的 URL，当您在函数名称上按 {}F1{} 或使用 {}RMB -&gt; 时打开转至声明 {} 选项。",
    "When using {}Feather{}, you will see detailed information on the function when you hover your mouse over it:":"使用{}语法检查{}时，将鼠标悬停在该函数上方时，将会看到有关该函数的详细信息：",
    "You can auto-generate JSDoc in two ways:":"您可以通过两种方式自动生成 JSDoc：",
    "{}In the image above, the top part shows the function in the auto-complete and the bottom part shows how the argument helper at the bottom works. Note that both the optional \"type\" and the obligatory \"description\" parts of {}@param{} are not displayed by default in the IDE code complete, and to see them you must activate the options in the {}GML Preferences{}.":"{} 在上图中，顶部显示了自动完成中的功能，底部显示了底部参数帮助器的工作原理。请注意，{}@param{} 的可选 \" 类型 \" 和必填 \" 说明 \" 部分默认不会显示在 IDE 代码完成中，要查看它们，必须激活 {}GML 首选项 {} 中的选项。",
    "{}It automatically inserted the correct data types for each parameter, as {}enemy_obj{} is an object, {}num{} is a real and the function returns an array.":"{} 它会自动为每个参数插入正确的数据类型，因为 {}enemy_obj{} 是一个对象，{}num{} 是一个实数，并且该函数返回一个数组。",
    "{}JSDoc Script Comments{}":"{}JSDoc 脚本注释{}",
    "{}Type{} of data the function returns":"函数返回的数据{}类型{}",
    "{}You can wrap an argument name in {}[]{} brackets to indicate that it is optional. The code editor will then expect any number of arguments between the minimum required arguments and the total number of arguments.":"{}您可以用{}[]{}括号括起参数名称，以表明它是可选的。然后，代码编辑器将期望在最小必需参数和参数总数之间有任意数量的参数。",
    "{}{}NOTE{}{}&nbsp;You will get the same behaviour if you use optional arguments in the function declaration. See {}script functions{} for more information.":"{}{}注意{}{} 如果在函数声明中使用可选参数，将获得相同的行为。有关详细信息，请参阅{}脚本函数{}。",
    "{}{}TIP{}{}&nbsp;You can generate these comments automatically using {}Feather{}\u0027s&nbsp;{}Quick Fixes{}&nbsp;menu (press&nbsp;{} /&nbsp;{}&nbsp;+ Q or click the {}&nbsp;icon).":"{}{} 提示 {}{} 您可以使用 {} 语法检查 {} 的 {} 快速修复 {} 菜单 (按 {}/{}+ Q 或单击 {} 图标) 自动生成这些注释。",
    "{}{}TIP{}{}&nbsp;You can generate these comments automatically using {}Feather{}\u0027s&nbsp;{}Quick Fixes{}&nbsp;menu (press&nbsp;{} /&nbsp;{}&nbsp;+ Q or click the {}&nbsp;icon). The option is visible when your text cursor is placed on a function header (i.e. the line where the function\u0027s name is defined).":"{}{} 提示 {}{} 您可以使用 {} 语法检查 {} 的 {} 快速修复 {} 菜单 (按 {}/{}+ Q 或单击 {} 图标) 自动生成这些注释。当文本光标放在函数标题(即定义函数名称的行)上时，该选项可见。"
}