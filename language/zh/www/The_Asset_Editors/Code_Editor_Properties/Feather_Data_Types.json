{
    "A boolean":"布尔值",
    "A constant, requires specifiers":"常量，需要说明符",
    "A function, may include specifiers":"函数，可以包括说明符",
    "A pointer, may include specifiers":"指针，可以包括说明符",
    "A real number":"一个实数",
    "A specifier is added after the base data type using a dot {}.{}, to specify the exact type of data in that group.":"使用点 {}.{} 在基本数据类型之后添加说明符，以指定该组中数据的确切类型。",
    "A string":"字符串",
    "A struct, may include specifiers":"结构，可以包括说明符",
    "A struct, may include specifiers (such as constructors)":"一个结构，可以包括说明符(如构造函数)",
    "Allowed":"允许",
    "An ID, requires specifiers":"ID，需要说明符",
    "An array, may include specifiers":"数组，可以包括说明符",
    "An asset, requires specifiers":"资源，需要说明符",
    "Any data type":"任何数据类型",
    "Collection Types":"集合类型",
    "Error":"错误",
    "Feather":"语法检查",
    "Feather Data Types":"语法检查数据类型",
    "Feather Features":"语法检查功能",
    "For example, an array containing strings would be {}Array&lt;String&gt;{}, and a DS List, containing an Array, containing Reals, would be {}Id.DsList&lt;Array&lt;Real&gt;&gt;{}.":"例如，包含字符串的数组为 {}Array&lt;String&gt;{}，包含数组 Reals 的 Ds 列表为 {}Id.DsList&lt;Array&lt;Real&gt;&gt;{}。",
    "For example, specifying {}undefined{} (first row) for a parameter requiring a string (second column) results in an error.":"例如，为需要字符串 (第二列) 的参数指定 {}undefined{}(第一行) 会导致错误。",
    "It also allows you to specify the data types for the parameters and return values of your own&nbsp;{}script functions{}, using {}JSDoc comments{}.":"它还允许您使用 {}JSDoc 注释 {} 为自己的 {} 脚本函数 {} 的参数和返回值指定数据类型。",
    "JSDoc Script Comments":"JSDoc 脚本注释",
    "Multiple Types":"多种类型",
    "Multiple data types can also be listed,&nbsp;separated by a comma {},{}. For example&nbsp;{}String,Array&lt;String&gt;{},&nbsp;{}Id.Instance,Asset.GMObject{}, etc.":"还可以列出多个数据类型，用逗号{},{}分隔。例如{}String,Array String{},{}Id.Instance、Asset.GMObject{}等。",
    "See Also":"另请参阅",
    "Specifiers":"说明符",
    "Syntax Errors (Feather Messages)":"语法错误(语法检查消息)",
    "The table below shows what happens if you pass a value of a certain type (rows) into a parameter requiring a data type (column).":"下表显示了如果将特定类型(行)的值传递到需要数据类型(列)的参数中，会发生什么情况。",
    "The {}@param{} and {}@return{}&nbsp;JSDoc tags allow you specify any one of the following types:":"在 JSDoc 标记中的 {}@param{} 和 {}@return{} 允许您指定以下任一类型：",
    "This is done using Collection Types, which are appended to the type using angle brackets {}&lt;&gt;{}.":"这是使用集合类型完成的，集合类型使用尖括号 {}&lt;&gt;{} 附加到类型。",
    "Type Validation":"类型验证",
    "Types such as {}Array{} and {}Id.DsList{}, which are data structures that contain multiple values, are able to specify a single data type for all of their contents.":"例如 {}Array{} 和 {}Id.DsList{} 等类型是包含多个值的数据结构，它们能够为其所有内容指定单个数据类型。",
    "Types such as {}Id.DsList{}, {}Asset.GMObject{}, and {}Constant.Color{} use specifiers.":"例如 {}Id.DsList{}、{}Asset.GMObject{} 和 {}Constant.Color{} 等类型使用说明符。",
    "Types such as {}Id.DsList{}, {}Asset.GMObject{}, and {}Constant.Color{} use specifiers. Constructors are specified through the syntax&nbsp;{}Struct.{ConstructorName}{}. For example:":"{}Id.DsList{}、{}Asset.GMObject{}和{}Constant.Color{}等类型使用说明符。构造函数通过语法{}Struct.{ConstructorName}{}指定。例如：",
    "Warning":"警告",
    "You may see an {}Any{}*{}{} type in the IDE when using Feather, which indicates that the type of the identifier (which may be a variable, parameter, return value, etc.)&nbsp;can\u0027t be discerned by Feather at the moment. When more code is added for that identifier, it may be able to assume a specific type.":"使用语法检查时，您可能会在 IDE 中看到 {}Any{}*{}{} 类型，这表示标识符的类型 (可能是变量、参数、返回值等) 此时语法检查无法识别。当为该标识符添加更多代码时，它可能能够采用特定类型。",
    "{}Feather{} uses data types to provide smart syntax-checking when writing code, ensuring you don\u0027t use the wrong data type for a variable or function parameter.":"{}语法检查{}在编写代码时使用数据类型提供智能语法检查，确保不会将错误的数据类型用于变量或函数参数。",
    "{}NOTE{}&nbsp;JSDoc types are case-insensitive, meaning {}Id.DsList{} and {}id.dslist{} are the same.":"{}注意{} JSDoc 类型不区分大小写，意思是 {}Id.DsList{} 和 {}id.dslist{} 相同。",
    "{}NOTE{}&nbsp;JSDoc&nbsp;base types are case-insensitive, so {}string{} and {}String{} are the same, however specifiers (after the {}.{}) are case-sensitive, meaning {}Id.DsList{} is valid (referring to a&nbsp;{}{}DS List{}{}) but {}Id.dslist{} is not.":"{}注意{} JSDoc 基类型不区分大小写，因此{}string{}和{}String{}相同，但说明符(在{}.{}之后)区分大小写，这意味着 {}Id.DsList{} 有效(指的是{}{}DS列表{}{})，但 {}Id.dslist{} 无效。",
    "{}NOTE{}&nbsp;{}*{} The {}Specifier Examples{} column lists some example specifiers, but not all of them. For example, there may be more possible types under the {}Id{}, {}Asset{}, and {}Constant{} groups, which are not listed here.":"{}注意{} {}*{}{}说明符示例{} 列出了一些示例说明符，但不是全部。例如，{}Id{}、{}Asset{}和{}Constant{}组下可能存在更多可能的类型，这些类型在此处未列出。"
}