{
    "A basic description of a {}global {}variable is one that, once declared, it belongs to no instance in particular and yet can be accessed by all. Just like {}local variables{}, global variables must be declared using an identifier, but unlike a local variable, a global variable remains in memory {}until the end of the game{}. So, you can create a global variable to keep track of (for example) the number of bullets that the player has and then just update this variable at different points in the game, form any instance or function and at any time. Essentially, a&nbsp;global variable does not belong to any specific instance and can be accessed, changed and used by all instances, and any changes&nbsp;made to the variable are \"global\", in that all instances using the variable will be affected by the change. Let\u0027s have a look at an example:":"对{}全局{}变量的基本描述是：一旦声明，它就不属于任何特定的实例，但却可以被所有人访问。就像{}局部变量{}一样，全局变量必须用一个标识符来声明，但与局部变量不同的是，全局变量在游戏结束前{}一直留在内存{}中。因此，你可以创建一个全局变量来记录(比如)玩家拥有的子弹数量，然后在游戏的不同时间点，以任何实例或函数的形式，随时更新这个变量即可。从本质上讲，全局变量不属于任何特定的实例，可以被所有的实例访问、改变和使用，对该变量的任何改变都是 \"全局的\"，因为所有使用该变量的实例都会受到改变的影响。让我们来看看一个例子。",
    "As you can see, with nothing to show that the variable is global in scope you are potentially setting yourself up for many subtle problems to arise in your game, which is why this declaration should be avoided.":"正如您可以看到的那样，由于没有任何可以表明变量在范围内是全局的，因此您可能正在设置自己，以便在游戏中出现许多细微的问题，这就是为什么应该避免此声明的原因。",
    "Finally, there are two variables that can be used for script functions and methods:":"最后，有两个变量可以用于脚本函数和方法。",
    "Once declared in this way that variable \"food\" is now considered global and requires no {}global.{} prefix - which also means that it\u0027s a lot harder to identify global variables in your code and it\u0027s also much easier to get variable overlap as you use the same variable name in different objects or from extensions that you\u0027ve installed. Once declared in this way the global variable is accessed as follows:":"以这种方式声明之后，变量food现在被视为全局变量，并且不需要{}global.{}前缀-这也意味着在代码中识别全局变量要困难得多，而且由于在不同的对象中使用相同的变量名称或者从安装的扩展名中使用相同的变量名称，也更容易获得变量重叠。以这种方式声明后，将按如下方式访问全局变量：",
    "The following form can also be used to declare global variables, but it is {}{}only included for backwards compatibility{}{}, and it is not recommended that you use this form for new projects as future versions of GameMaker may not support it.":"下面的形式也可以用来声明全局变量，但{}{}只为向后兼容{}{}, 不建议您为新项目使用这种形式，因为GameMaker的未来版本可能不支持。",
    "The second form for creating global variables is to declare them as such using the {}globalvar{} declaration, much as you would a local variable using the {}var{} declaration.":"创建全局变量的第二种形式是使用{}globalvar{}声明声明它们，就像使用{}var{}声明对局部变量进行声明一样。",
    "There are a few functions designed to help you when dealing with global variables, which you can find on the following page:":"有几个函数可以帮助您处理全局变量，您可以在以下页面中找到这些函数：",
    "There are also three {}deprecated{} built in global variables which you should be aware of (these variables are only designed to support legacy projects from previous versions of GameMaker and should {}{}not be used in new projects{}{}):":"还有三个{}被废弃的{}内置全局变量，你应该注意(这些变量只是为了支持GameMaker以前版本的遗留项目，不应该{}{}用在新项目中{}{})。",
    "This (deprecated) declaration would be used as follows:":"这个(废弃的)声明的使用方法如下。",
    "Variable Functions":"变量函数",
    "We also have another object that draws this value like this:":"我们还有另一个对象可以绘制此值，如下所示：",
    "We declare the \"{}food{}\" variable by first writing \"{}global{}\" and then a \"{}.{}\" to tell {}GameMaker{} that this variable is now global scope. We will need to use this form from now on any time we are required to access or to change this variable in any way. So, we have created a new variable called \"{}food{}\" and we have declared it as global. Now, any instance or function can use and change this variable in any way and all other instances will \"see\" this. For example we could have a different food object that the player collides with and in the collision event we have:":"我们首先写入\"{}global{}\"，然后写入\"{}.{}\"来声明\"{}food{}\"变量，以告诉{}GameMaker{}此变量现在是全局范围。从现在开始，当需要以任何方式访问或更改此变量时，我们都需要使用此表单。因此，我们创建了一个名为\"{}food{}\"的新变量，并将其声明为全局变量。现在，任何实例或函数都可以以任何方式使用和更改此变量，并且所有其他实例都将\"看到\"此变量。例如，我们可以有一个不同的食物对象，玩家与之碰撞，并且在碰撞事件中：",
    "With global variables we can change values and see those changes reflected in all instances of the objects that reference this variable. As with {}local{} variables you have to take care not to name your global variables the same as any instance variables as that may cause you problems and make bugs creep into your games due to variable overlap, which can be a difficult issue to debug sometimes. In general you should have a single object that declares all your global variables at the very start of the game (for example, in the {}Room Start Event{}&nbsp;of the first&nbsp;object instance placed in the first room of the game) or a single {}script function{} that declares them all together, as this gives you a handy place to go back and reference everything at once should you need to check a variable name or edit a value.":"使用全局变量，我们可以更改值并查看引用此变量的所有对象实例中反映的那些更改。对于{}个local{}变量，您必须注意不要将全局变量命名为与任何实例变量相同的名称，因为这可能会导致问题，并使错误因变量重叠而渗入游戏，有时这可能是一个很难调试的问题。一般来说，您应该有一个在游戏开始时声明所有全局变量的单个对象(例如，放置在游戏第一个房间中的第一个对象实例的{}房间开始事件{})或一个将所有变量声明在一起的单个{}脚本函数{}，因为这样，如果您需要检查变量名称或编辑值，就可以方便地返回并一次性引用所有变量。",
    "argument":"argument 参数",
    "event_data":"event_data 事件数据",
    "or:":"或:",
    "{}GameMaker{} has a collection of \"built in\" global variables too, so you should be aware of them as you may name one of your instance variables the same or wish to have your own global variable with the same name and wonder why you are getting errors! They are easy to spot, however, as they are shown in a different colour in the code editor and also come up in the auto-complete bar at the bottom. The majority of built-in global variables have very specific uses are listed in the appropriate sections of the manual - however there are two important ones that are used frequently and aren\u0027t listed elsewhere:":"{}GameMaker{}也有一系列 \"内置 \"的全局变量，所以你应该注意它们，因为你可能会把你的一个实例变量命名为相同的名字，或者希望有你自己的全局变量有相同的名字，并想知道为什么你会得到错误！但是它们很容易被发现，因为它们在代码编辑器中显示为不同的颜色，也会在底部的自动完成栏中出现。然而，它们很容易被发现，因为它们在代码编辑器中以不同的颜色显示，也会出现在底部的自动完成栏中。大多数内置的全局变量都有非常具体的用途，在手册的相应章节中列出，但是有两个重要的全局变量经常使用，没有在其他地方列出。",
    "{}IMPORTANT!{} The {}globalvar{} declaration is {}deprecated{} and only supported for legacy purposes. You should {}always{} use the {}global.{} identifier to mark global variables.":"{}重要！{}{}globalvar{}声明已过时{}，仅支持传统用途。你应该{}始终使用{}global.{}标识符来标记全局变量。",
    "{}async_load{}":"{}async_load{} 异步加载",
    "{}health{}":"{}health{} 血量",
    "{}lives{}":"{}lives{} 命数",
    "{}score{}":"{}score{} 分数",
    "{}{}argument_count{}{}":"{}{}argument_count 参数数量{}{} "
}