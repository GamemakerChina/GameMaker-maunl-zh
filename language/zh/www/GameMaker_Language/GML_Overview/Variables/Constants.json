{
    "A constant is a type of variable that is set once at the start of the game and then never changes. In fact, constant values&nbsp;{}cannot be changed after they have been declared{}. This makes them ideal for holding values that are used throughout the game to identify special data.":"常量(constant)是一种变量，在游戏开始时被设置一次，然后永远不会改变。事实上，常量值{}在被声明后不能被改变{}。这使它们成为保存整个游戏中用于识别特殊数据的数值的理想选择。",
    "An enum is an \"enumerator\", and it essentially permits you to create your own limited data type with a list of constant values, and they have the following structure:":"枚举是\"枚举器(enumerator)\"，它基本上允许您使用常量值列表创建自己的有限数据类型，并且它们具有以下结构：",
    "An enum is an \"enumerator\"; it essentially permits you to create your own limited data type with a list of constant values. They have the following structure:":"枚举是一个\"枚举器\"它本质上允许您使用常量值列表创建自己的有限数据类型。它们的结构如下：",
    "As an example, let\u0027s use the \"{}rainbowcolours{}\" enum that we created in the code above:":"例如，让我们使用在上述代码中创建的\"{}rainbowcolours{}\"枚举：",
    "As you can see, you give the config name first then a colon {}:{} and then the macro name and value. Note that you cannot have any white-space between the colon {}:{} and either the config name nor the macro name otherwise you will get an error.":"如你所见，你先给配置名称，然后是冒号{}:{}，然后是宏名称和值。请注意，冒号{}:{}与配置名称或宏名称之间不能有空格，否则会出现错误。",
    "Built-In Constants":"内置常量",
    "Constants":"常量",
    "Enums":"Enums 枚举",
    "For example, say you define the following macro \"{}total_weapons{}\":":"例如，假设你定义了以下宏 \"{}total_weapons{}\"：",
    "If you need the value of a macro to change at run-time then you should probably make it a {}global variable{}, since these can be changed from code during a game, unless you set the macro to be a{}&nbsp;{}runtime&nbsp;{}{} {}function{}. By setting the macro to a function it means that this function will be called every time you use the macro. For example:":"如果您需要在运行时更改宏的值，那么您应该将其设置为{}全局变量{}，因为这些可以在游戏期间从代码更改，除非您将宏设置为{} {}运行时{}{} {}函数{}。通过将宏设置为函数，这意味着每次使用宏时都会调用该函数。例如：",
    "If you need the value of a macro to change at run-time then you should probably make it a {}global variable{}, since these can be changed from code during a game, unless you set the macro to be a{}&nbsp;{}runtime{}{}&nbsp;{}function{}. By setting the macro to a function it means that this function will be called every time you use the macro. For example:":"如果需要在运行时更改宏的值，则可能应该将其设置为{}全局变量{}，因为这些变量可以在游戏期间从代码中更改，除非您将宏设置为{}{}运行时{}{}{}函数{}。通过将宏设置为函数，这意味着每次使用宏时都会调用该函数。例如：",
    "In the GameMaker Language there are two types of user-defined constant:&nbsp;{}macros{}&nbsp;and&nbsp;{}enums{}, both of which are explained below. Also note that any value that is always the same is classed as a constant, regardless of the {}data type{}, for example, a string or the number 3.":"在GameMaker语言中，有两种类型的用户定义常量：{}宏{}和{}枚举{}，这两个都在下面进行了说明。另请注意，无论{}数据类型{}如何，始终相同的任何值都被归类为常量，例如字符串或数字3。",
    "In the GameMaker Language there are two types of user-defined constants:&nbsp;{}macros{}&nbsp;and&nbsp;{}enums{}, both of which are explained below. Also note that any value that is always the same is classed as a constant, regardless of the {}data type{}, for example, a string or the number 3.":"在GameMaker语言中，有两种类型的用户定义常量：{}宏{}和{}枚举{}，，下面将对这两种类型进行解释。还要注意，始终相同的任何值都被归类为常量，而与{}数据类型{}无关，例如字符串或数字3。",
    "In the following example, we create an enum for the colours of the rainbow and assign it various constants and default values:":"在以下示例中，我们为彩虹的颜色创建一个枚举，并为其指定各种常量和默认值：",
    "Macro syntax...":"宏语法...",
    "Macros":"Macros 宏",
    "Note that you would not be able to change the constant\u0027s value, so code like this will cause the game to crash:":"请注意，你将无法更改常量的值，所以像这样的代码会导致游戏崩溃：",
    "Note that you {}cannot {}modify the values for any enum constant after it has been created, much the same as you can\u0027t modify macros after they have been created.":"请注意，{}无法在创建任何枚举常量之后修改其值，这与创建宏之后无法修改宏非常相似。",
    "Notice in the above example we use another enum to create an expression for \"violet\". This only works if the enum being referenced was created {}before{} the enum that is using it in an expression, but it will not work for variables or functions, since the enum value must be able to be evaluated as a constant when the project is {}Compiling{}. Also note that all enum values evaluate to {}integer{} values, and when you create your own you should be aware that {}only integer values are permitted{} for enums to work. This value can be any integer number that a floating point double precision number can represent, including negative values.":"请注意，在上面的示例中，我们使用了另一个枚举来创建 \"violet\" 的表达式。这仅在引用的枚举是在表达式中使用枚举的{}之前创建的{}时有效，但它不适用于变量或函数，因为当项目{}编译{}时，枚举值必须能够被计算为常量。另请注意，所有枚举值的计算结果均为{}整数(integer){}值，当您创建自己的枚举值时，应注意{}只允许整数值{}使枚举起作用。该值可以是浮点双精度数可以表示的任何整数，包括负值。",
    "One very important feature of macros is that they can be defined for use with specific {}Configurations{} (configs), meaning you can have the same macro name but give it different values based on the currently selected config. For example, say you have a configuration for Android Ads and another for iOS Ads, then you could define a single macro to hold the required app ID value:":"宏的一个非常重要的函数是，它们可以定义为与特定{}配置{}(configs)一起使用，这意味着您可以使用相同的宏名称，但根据当前选定的配置为其赋予不同的值。例如，如果您有Android广告的配置和iOS广告的配置，则可以定义单个宏来保存所需的应用程序ID值：",
    "One very important feature of macros is that they can be defined for use with specific&nbsp;{}Configurations{}&nbsp;(configs), meaning you can have the same macro name but give it different values based on the currently selected config. For example, say you have a configuration for Android Ads and another for iOS Ads, then you could define a single macro to hold the required app ID value:":"宏的一个非常重要的特性是，它们可以定义为与明确的 {} 配置 {}(configs)，一起使用，这意味着您可以具有相同的宏名称，但根据当前选择的配置为其赋予不同的值。例如，假设您有一个用于 Android 广告的配置和另一个用于 iOS 广告的配置，那么您可以定义一个宏来保存所需的应用程序 ID 值：",
    "See {}Equality Table{}&nbsp;for information on equality comparisons for a few of the constants listed above.":"有关上面列出的几个常数的等式比较信息，请参见{}等式表{}。",
    "The enum entries can only be {}integer numbers{} or {}{}expression{}{}s{} with previous enums that evaluate to an integer number{}, and by default are numbered from 0 upwards, so our example given above would default to {}red = 0{}, {}orange = 1{}, {}yellow = 2{}, etc...":"枚举条目只能是{}整数{}或{}{}表达式{}{} {}，前面的枚举计算为整数{}，默认情况下从0往上编号，所以我们上面给出的示例将默认为{}red = 0{}， {}orange = 1{}， {}yellow = 2{}，等等……",
    "The following table shows a list of the built-in constants that can be returned by some functions and operations in your projects:":"下表列出了项目中某些函数和操作可以返回的内置常量：",
    "The syntax shown above must be used correctly to define macros. You cannot use an equal sign (like in variables) or put a semicolon at the end (like in a regular statement). Doing so will cause your macro definition to become invalid.{} {} For example, this is not the correct way to define a macro:{} {} {}#macro total_weapons = 10;{}{} {} Removing the equal sign and colon will make it a valid macro definition. ":"必须正确使用上面显示的语法来定义宏。您不能使用等号(如在变量中)或在末尾加上分号(如在常规语句中)。这样做会导致您的宏定义失效。{}{}例如，这不是定义宏的正确方法：{}{}{}# macro total_weapons= 10;{}{}{}删除等号和冒号将使其成为有效的宏定义。",
    "The syntax structure for a macro is as follows:":"宏的语法结构如下所示：",
    "The {}colour_value{} variable would now hold the value 100 (20 * 5).":"{}colour_value{}变量现在将保留值100(20 * 5 )。",
    "This constant indicates that the pointer is not pointing to anything meaningful (the same as{}&nbsp;{}{}NULL{}{}&nbsp;{}in C++ or {}null{} in C#).{} This value is {}falsy{}.":"此常量表示指针没有指向任何有意义的内容(与C++中的{}{}{}NULL{}{}{}或C#中的{}null{}相同)。{}此值为{}falsy{}。",
    "This constant is returned when a function has to return&nbsp;{}something{}&nbsp;but has no appropriate or \"correct\" value to return.{} This value is {}falsy{}.":"当函数必须返回{}某些内容{}但没有适当的\"或正确的\"值要返回时，将返回此常量。{}此值为{}falsy{}。",
    "This constant represents the value 0, which is what {}GameMaker{} will evaluate as a boolean \"false\" (note that any value less than or equal to 0 will evaluate as {}false{}).":"此常量表示值0，即{}GameMaker{}将计算为布尔\"false\"(请注意，任何小于或等于0的值都将计算为{}false{})。",
    "This constant represents the value 1, which is what {}GameMaker{} will evaluate as a boolean \"true\" (note that any value equal to or greater than 1 will evaluate as {}true{}).":"此常量表示值1，即{}GameMaker{}将评估为布尔值\"true\"(请注意，任何等于或大于1的值都将计算为{}true{})。",
    "This constant represents the value of pi: 3.141592653589793280 etc... although the exact value will depend on various factors like the OS or the platform being targeted.":"此常量表示pi:3.141592653589793280等...尽管确切值将取决于各种因素，如操作系统或所针对的平台。",
    "This constant represents the value of pi: 3.141592653589793280..., although the exact value will depend on various factors like the OS or the platform being targeted.":"这个常数表示pi的值：3.141592653589793280...，虽然确切的值将取决于各种因素，如操作系统或目标平台。",
    "This constant simply means that the value is not a valid pointer":"此常量仅表示该值不是有效的指针",
    "This is purely cosmetic, in that splitting a macro like this will have no effect over the result of the final macro when used, and is simply to provide support for multi-line text on macros that have longer lines of code.":"这纯粹是装饰性的，因为像这样拆分宏在使用时对最终宏的结果没有任何影响，只是为了在代码行较长的宏上提供对多行文本的支持。",
    "To later access the value within a given enum type, you can use the point {}\".\"{} method, like this:":"要稍后访问给定枚举类型中的值，可以使用点{}\".\"{}方法，如下所示：",
    "Using this code will make the image blend a different colour every time the macro is used. It is worth noting that you can also split macros over multiple lines using the {}{}\\{}{} character to show where the line breaks are. An example would be something like:":"使用此代码将使图像在每次使用宏时混合不同的颜色。值得注意的是，您还可以使用{}{}\\{}{}字符将宏拆分到多行，以显示换行符在哪里。例如：",
    "Using this code will make the image blend a different colour every time the macro is used. It is worth noting that you can also split macros over multiple lines using the {}{}\\{}{} character to show where the line breaks. An example would be something like:":"每次使用宏时，使用此代码将使图像混合不同的颜色。值得注意的是，您还可以使用{}{}\\{}{}字符在多行上拆分宏，以显示换行位置。例如：",
    "While not exactly variables, macros are similar to them in how they are used, i.e.: they are named values that you can use throughout your code to replace {}hard-coded{} values. Basically, a macro is a named variable that holds an expression.&nbsp;You can define your own macros using the {}Script Editor{} and then use them in your code and actions as if they were regular variables, with the one difference being that they {}can\u0027t be changed in the game{}.":"虽然不完全是变量，但宏在使用方式上与它们相似，即：它们是命名的值，你可以在整个代码中使用它们来替换{}硬编码的{}值。基本上，宏是一个持有表达式的命名变量。你可以用{}脚本编辑器{}来定义你自己的宏，然后在你的代码和动作中使用它们，就像它们是普通变量一样，唯一不同的是，它们{}不能在游戏中被改变{}。",
    "You can also assign values to the enum variables at the time of creation:":"还可以在创建时为枚举变量指定值：",
    "You can define a macro anywhere in your code or in a script&nbsp;and it will be {}pre-compiled{} and included in your game as if it was there from the start, but we recommend that you create a dedicated script asset and define all your macros in there. It will be easier to organise and debug later!":"你可以在代码或脚本中的任何地方定义宏，它将被{}预编译{}并像从一开始就存在一样包含在游戏中，但我们建议你创建专用的脚本资源并在其中定义所有宏。以后组织和调试会更容易！",
    "You could then use this in your code like this:":"然后您可以在代码中这样使用它：",
    "You would then call this macro something like this:":"然后，您可以将此宏调用为类似以下内容：",
    "{}Constants{}":"{}常量{}",
    "{}NOTE{}&nbsp;The GameMaker Language also has a number of built-in constant values that are used to identify specific things. These are outlined on the appropriate pages for the runtime functions that require them in the {}GML Reference{} section.":"{}注意{}GameMaker语言也有一些内置的常量值，用于识别特定的事物。这些常量值在需要它们的运行时函数的相应页面中进行了概述，见{}GML参考{}部分。",
    "{}NOTE{}: Enum values are stored as int64s, so running {}{}is_real(){}{} on them will return {}false{}.":"{}注意{}。枚举值以int64形式存储，因此对其运行{}{}is_real(){}{}将返回{}false{}。",
    "{}This constant that can be returned when the compiler cannot evaluate the results of an operation as a number - for example, 0 / 0 cannot be defined as a real number, and is therefore represented by&nbsp;{}{}NaN{}":"{}当编译器无法以数字形式计算操作结果时可返回的常量-例如，0/0不能定义为实数，因此用{}{}NaN{}表示",
    "{}{}NOTE{}{}&nbsp;Enum values are stored as int64s, so running&nbsp;{}{}is_real{}{}&nbsp;on them will return {}false{}.":"{}{}注意{}{} 枚举值存储为 int64s，因此在它们上运行 {}{}is_real{}{} 将返回 {}false{}。",
    "{}{}NOTE{}{}&nbsp;The GameMaker Language also has a number of built-in constant values that are used to identify specific things. These are outlined on the appropriate pages for the runtime functions that require them in the {}GML Reference{} section.":"{}{}注意{}{} GameMaker 语言也有许多用于标识特定事物的内置常量值。在 {}GML 参考 {} 部分中需要它们的运行时函数的相应页面上概述了这些内容。",
    "{}{}NOTE{}{}&nbsp;You {}cannot {}modify the values for any enum constant after it has been created, much the same as you can\u0027t modify macros after they have been created.":"{}{}注意{}{} 您不能{}在创建任何枚举常量后修改它的值，这与创建宏后不能修改它们非常相似。",
    "{}{}{} {}{}This constant&nbsp;{}{} {}{}{}{}refers to a number that is considered infinite, such as the result you would get when dividing any floating point value by zero, e.g.&nbsp;1.0/0.{}":"{}{}{}{}{}此常量 {}{}{}{}{}{}是指一个被认为是无穷大的数字，例如将任何浮点值除以零时得到的结果，例如 1.0/0。{}",
    "{}{}{} {}{}This constant&nbsp;{}{} {}{}{}{}refers to a number that is considered infinite, such as the result you would get when dividing any floating point value by zero, eg: 1.0/0.{}":"{}{}{}{}{}此常量{}{}{}{}{}{}是指一个被认为是无穷大的数字，例如，将任何浮点值除以零时将得到的结果，例如：1.0/0.{}"
}