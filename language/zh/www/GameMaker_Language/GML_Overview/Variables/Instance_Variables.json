{
    "An {}instance {}variable is created within an instance of an object and is considered unique to that instance - ie: many instances of the same object can have the same variable, but each variable can hold a different value as they are {}unique {}to each instance. But {}how{} is an instance variable created? Well, you create new variables by simply assigning a value to them as shown in this small example (this is called {}declaring{}&nbsp;the variable):":"{}实例{}变量(Instance Variables)是在对象的一个\u200B\u200B实例中创建的，并且被认为是该实例唯一的 - 即：同一对象的许多实例可以具有相同的变量，但每个变量可以保留不同的值每个实例都{}唯一{}。但是{}如何{}创建实例变量？好吧，您可以通过简单地为变量赋值来创建新变量，如这个小示例所示（这称为{}声明{}变量）：",
    "As you can see you just have to give the name and then a value (the value can be any {}data type{}) to set that variable and have it ready for use within an instance of the object you are coding for (note that the value can come from the return value of a function or the result of an operation between other variables, etc...). These variables can then be used and modified in a number of ways from within the instance, for example this code could be in a collision event and used to take an amount off of the variable \"{}life{}\":":"正如你所看到的，你只需要给出名字和一个值(这个值可以是任何{}数据类型{})，就可以设置该变量，并且可以在你编码的对象的实例中使用它(注意，这个值可以是来自一个函数的返回值或其他变量之间的操作结果，等等...)。然后，这些变量可以在实例中以多种方式被使用和修改，例如，这段代码可以在一个碰撞事件中出现并用于从变量\"{}life{}\"中减去一个数值。",
    "If \"{}life{}\" is at 100 it will now have a value of 97 (100 - (5 + -2) = 97). Now, that\u0027s a simple example, and you {}could{} replace \"{}armour{}\" for the actual value of -2, but what happens if that value is {}hard-coded{} in multiple places and then you decide to change it? You would have to go through ALL your code and change every -2 to whatever the new value is, which is time consuming and very error prone! But if you use a variable, all you have to do is reassign it a new value and the code will automatically use that new value from then onwards, making things far more flexible and far easier to fix should there be a problem. It should also be noted that even if a value is not going to change it is far easier to remember what a variable called \"{}life{}\" means rather than just looking at a number.":"如果\"{}life{}\"是100，它现在的值是97(100-(5+-2)=97)。现在，这只是一个简单的例子，你{}可以{}把\"{}armour{}\"换成实际值-2。但如果这个值在多个地方都是{}硬编码{}，然后你决定改变它，会发生什么？你将不得不翻阅所有的代码，把每2个值都改成新的值。是，这很费时间，而且很容易出错！但如果你使用一个变量，你所要做的就是给它重新分配一个新的值，然后代码会自动使用这个新的值。但是，如果你使用一个变量，你所要做的就是给它重新分配一个新的值，从那时起，代码将自动使用这个新的值，使事情更加灵活，更容易解决。如果有问题的话。还应该注意的是，即使一个值不会改变，要记住一个叫做\"{}life{}\"的变量是什么意思，也比只看一个数字容易得多。",
    "Instance Variables":"实例变量",
    "There are quite a few {}runtime functions{} designed to help you when dealing with instance variables, which are all listed in the following section:":"有不少{}运行时函数{}旨在帮助你处理实例变量，以下部分列出了这些函数：",
    "Variable Functions":"变量函数",
    "{}GameMaker{} has a collection of \"built in\" instance variables too, so you should be aware of them as you may name one of your own instance variables the same or wish to have your own global variable with the same name and wonder why you are getting errors. They are easy to spot, however, as they are shown in a different colour in the code editor and also come up in auto-complete and are shown in bar at the bottom of the {}code editor{}.":"{}GameMaker{}也有一组 \"内置\" 的实例变量，所以你应该注意它们，因为你可能用相同的名字命名自己的一个实例变量，或者希望自己的全局变量同名，想知道为什么你遇到了错误。但是，它们很容易被发现，因为它们在代码编辑器中以不同的颜色显示，也可以自动完成，并显示在{}代码编辑器{}底部的栏中。"
}