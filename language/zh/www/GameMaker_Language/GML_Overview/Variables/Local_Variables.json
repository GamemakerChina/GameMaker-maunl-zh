{
    "A {}local{} variable is one that we create for a specific {}event{} or {}function{}&nbsp;{}only{}&nbsp;and then discard when the&nbsp;event or function&nbsp;has finished. If it is created in a custom function then the local variable is only available to the function and then discarded when the function has finished. Why would we need them? Well, variables take up space in memory and it may be that we are only going to use them for one operation or function in which case we only need to have it in memory for that short time that it\u0027s used. This keeps your code base clean and tidy as well as keeping memory space optimised for the things that really need it. To declare a local variable we use the {}{}{}var{}{}{}&nbsp;operator like this:":"{}局部{}变量是我们{6}仅{7}为特定的{}事件{}或{}函数{}创建的变量，然后在事件或函数完成后丢弃。如果局部变量是在自定义函数中创建的，则局部变量仅适用于该函数，然后在函数完成后将其丢弃。我们为什么需要它们？好吧，变量会占用内存中的空间，可能我们只将它们用于一个操作或函数，在这种情况下，我们只需要在使用它的那短时间内将其存入内存。这样可以使您的代码库保持干净整洁，并优化内存空间，以满足真正需要它的事物。要声明局部变量，我们使用{}{}{}var{}{}{}运算符，如下所示：",
    "All of the variables created in this way will be \"forgotten\" (ie: removed from memory) at the end of the event (or function) in which they were created. You should be careful that the name you give all {}var{} declared variables does not coincide with another instance variable within the object running the code, and also make sure that you have no intention of using the value stored in that variable outside of the event or function you declare it in (in the examples above, all the {}var{} declared variables have been defined with the underscore \"_\" preceding the variable name, but this is not required and is done simply to make it more obvious in the code that we are dealing with a local variable). That said, if you find yourself in a situation where you think a local variable&nbsp;{}should{}&nbsp;be the same as an instance variable, then you can use the {}self{} {}keyword{} to identify the instance variable as separate, for example:":"所有以这种方式创建的变量将在创建它们的事件(或函数)结束时被 \"遗忘\"(即：从内存中删除)。你应该注意，你给所有{}var{}声明的变量起的名字不能与运行代码的对象中的另一个实例变量重合，而且还要确保你无意在你声明的事件或函数之外使用该变量中存储的值(在上面的例子中，所有{}var{}声明的变量都在变量名前面加上了下划线\"_\"，但这并不是必须的，这样做只是为了在代码中更明显地说明我们在处理一个局部变量)。也就是说，如果你发现自己处于这样一种情况：你认为局部变量{}应该{}与实例变量相同，那么你可以使用{}self{}{}关键字{}来确定实例变量是独立的，比如说。",
    "Here we have used the local variables \"{}_x{}\" and \"{}_y{}\" to store some random coordinates that we then use to create an instance. In this example you can see that it is not strictly necessary that we use these variables but for the sake of readability and ease of use, we do. It is MUCH clearer and obvious what we are doing there than if we used this code:":"这里我们使用了局部变量\"{}_x{}\"和\"{}_y{}\"来存储一些随机的坐标，然后用它们来创建一个实例。在这个例子中，你可以看到，严格来说，我们没有必要使用这些变量，但为了可读性和易用性，我们还是使用了。比起使用这段代码，我们在这里做的事情要清楚和明显得多。",
    "Local variables are used a lot in programs, especially in loops for counting {}iteration{}{}s{}, or when using a value several times in one operation that is not going to be repeated again. Here are another couple of examples:":"程序中经常使用局部变量，特别是在循环中用于计数{}迭代{}{} {}，或者在一个操作中多次使用一个值而不会再重复时。下面是另外几个例子。",
    "One other thing about {}var{} declared local variables should be noted... Since they are unique to the event or function that runs them, they can be used in any other instances through code too! This means that we can use these variables to set and change things in other instances using the \"{}with(){}\" construct (see the section on {}variable scope{} for more information). The actual code itself would look something like this:":"关于{}var{}声明的局部变量，还有一件事需要注意......因为它们对运行它们的事件或函数来说是唯一的，所以它们也可以通过代码在任何其他实例中使用！这意味着我们可以使用这些变量来设置和改变其他实例中的东西，使用\"{}with(){}\"结构。这意味着我们可以通过\"with()\"结构，使用这些变量来设置和改变其他实例中的东西(更多信息请参见{}变量范围{}部分)。实际的代码本身看起来会是这样的。",
    "The above code creates a local variable called \"{}_i{}\" and sets it to 0, all in the same line. Note that in previous versions of {}GameMaker{} you had to declare your local variables first and {}then{} assign them values, but in this version you can declare {}and{} assign them a value at the same time. The above code then uses this variable to initialize an {}array{}. As the variable \"{}_i{}\" is not going to be used for any further functions in the instance other than this, it can be local in scope. Here is one more example:":"上面的代码创建了一个名为\"{}_i{}\"的局部变量，并将其设置为0，所有这些都在同一行中完成。请注意，在以前的{}GameMaker{}版本中{}中，你必须先声明你的局部变量，然后{}为它们赋值，但在目前版本中，你可以同时声明{}和{}为它们赋值。然后，上面的代码使用这个变量来初始化一个{}数组{}。由于变量\"{}_i{}\"不会被用于实例中除此以外的任何其他函数，所以它可以是局部范围的。下面是另外一个例子。",
    "The above code works because the {}var{} declared variable is local to the {}event{} (or function) it is contained in, not the instance, nor the game world, and so can be used in any function in any object as long as it is in the same code block.":"上述代码之所以有效，是因为{}var{}声明的变量是它所包含的{}事件{}(或函数)的局部，而不是实例，也不是游戏世界，所以只要在同一个代码块中，就可以在任何对象的任何函数中使用。"
}