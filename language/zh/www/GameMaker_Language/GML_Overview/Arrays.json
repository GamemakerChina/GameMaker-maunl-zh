{
    "Accessors":"访问器",
    "Again, all of this is not necessary if {}Copy on Write{} is {}disabled{} (which is the default and recommended option).":"同样，如果{}写时复制{}{}禁用{}(这是默认和推荐的选项)，则所有这些都不是必需的。",
    "Also see:&nbsp;{}&nbsp;{}":"另请参阅：{}变量函数{}",
    "Arrays as Function Arguments":"作为函数参数的数组",
    "Arrays&nbsp;can be extremely useful and are an essential part of making games. It is essentially a type of variable that can hold multiple values as a \"list\" -- consider the following code:":"数组非常有用，是制作游戏的重要组成部分。它本质上是一种可以将多个值保存为\"list\"的变量类型--请考虑以下代码：",
    "As described in the previous section, arrays can be passed into functions as arguments. To do this, you simply have to specify the array variable (no need for each of the individual positions, nor the {}[]{} brackets) and the entire array will be {}passed by reference{} into the function:":"正如上一节所述，数组可以作为参数传入函数。要做到这一点，你只需要指定数组变量(不需要每个单独的位置，也不需要{}[]{}括号)，整个数组将通过{}引用{}传递到函数中。",
    "Copy on Write":"写时复制",
    "Find out more information on accessors and how they work, along with an example for arrays, from the following page:":"有关访问器及其工作方式的详细信息，以及阵列示例，请参阅以下页面：",
    "For example, the function called above,&nbsp;{}do_something(){}, may do something simple like this:":"例如，上面调用的函数{}do_something(){}可能会做这样简单的事情：",
    "For example, this function simply changes the first three elements of the array passed into it:":"例如，这个函数只是改变了传入数组的前三个元素。",
    "However, when {}Copy on Write{} is enabled, changing any of the array\u0027s values inside the function creates a temporary copy with your modifications. The original array is not modified. This behaviour is called Copy on Write.":"但是，如果启用了{}写入时复制{}，则更改函数内部的任何数组值会创建一个包含您的修改的临时副本。不会修改原始数组。此行为称为写入时拷贝。",
    "In previous GameMaker versions, this was not the case, as modifying an array inside a function would create a copy instead. This {}deprecated{} behaviour can still be enabled if desired: read the \"{}Copy on Write{}\" section below for more information.":"在以前的GameMaker版本中，情况并非如此，因为在一个函数中修改数组会创建一个副本。如果需要的话，这种{}被废弃的{}行为仍然可以被启用：阅读下面的\"{}写时复制{}\"部分以了解更多信息。Write{}时的拷贝 \"一节，以了解更多信息。",
    "Now you would expect {}my_array{} to hold the values {}1, 200, 4{}, etc., which would normally be correct -- but when {}Copy on Write{} is enabled, the original array remains unaffected.":"现在，您将期望{}my_array{}保存值{}1、200、4{}等，这通常是正确的-但是当启用{}写时复制{}时，原始数组不受影响。",
    "The Copy on Write behaviour is deprecated, and is only used when \"{}Enable Copy on Write behaviour for Arrays{}\" is enabled in the {}General Game Options{}. This section describes the behaviour of arrays when this option is enabled.":"不推荐使用 \"写入时复制\" 行为，仅在{}General Game Options{}中启用 \"{}为数组启用写入时复制{}\" 时使用。本节描述了启用此选项时数组的行为。",
    "The function itself would return the modified array back:":"该函数本身将返回修改后的数组。",
    "The second solution is to use the&nbsp;{}@{}&nbsp;accessor to change the array values directly, which saves the CPU overhead of having to make a temporary copy. This means that you do not need to return the array from the function and can edit it directly:":"第二种解决方案是使用{}@{}访问器直接更改数组值，这节省了必须进行临时复制的CPU开销。这意味着你不需要从函数返回数组，可以直接编辑它:",
    "To actually modify the original array that was passed into the function, you must either return it back, or use the {}@{} accessor.":"要实际修改传递到函数中的原始数组，您必须将其返回或使用{}@{}访问器。",
    "To work around this, you can make the function {}return{} the modified array copy, and then apply it back to the original variable:":"为了解决这个问题，你可以让函数{}返回{}修改后的数组副本，然后将其应用于原始变量。",
    "Using the {}[item, item, item]{} syntax we are creating an array that is stored in a variable. The items stored in an array can later be accessed through that variable using an integer number, starting at {}0{}, which is placed inside {}[]{} brackets:":"使用{}[item ,item ,item]{}语法，我们将创建一个存储在变量中的数组。稍后可以使用整数(从{}0{}开始)通过该变量访问存储在数组中的项目，该整数位于{}[]{}括号内：",
    "Using this accessor bypasses the Copy on Write behaviour and directly modifies the referenced array. This can be used to selectively disable Copy on Write for specific statements while keeping the option enabled.":"使用此访问器可以绕过 写时复制 行为，直接修改引用的数组。这可用于有选择地为特定语句禁用 写时复制，同时保持该选项处于启用状态。",
    "You can now create an array and pass it into this function, which will modify the array:":"现在你可以创建一个数组并将其传入该函数，该函数将修改数组。",
    "You can pass arrays into&nbsp;{}script&nbsp;functions{} and {}method variables{} as arguments, and modify those arrays anywhere inside the function. Doing so will modify the original arrays as well.":"你可以将数组作为参数传入{}脚本函数{}和{}方法变量{}，并在函数中的任何地方修改这些数组。这样做也会修改原来的数组。",
    "{}A basic array is classed as having 1 {}dimension{}, but you can have arrays with more than one dimension too. The sections below explain both types of arrays:{}":"{}一个基本的数组被归类为有1{}个维度{}，但是你也可以有不止一个维度的数组。下面的章节解释了这两种类型的数组：{}。",
    "{}NOTE{}{}&nbsp;{}The above code is not necessary if you are not changing any of the array\u0027s values, but rather referencing them. Referencing an array will not copy it and will be faster to parse.":"{}注意{}{}{}如果您不更改数组的任何值，而是引用它们，则不需要上面的代码。引用数组不会复制它，解析速度会更快。"
}