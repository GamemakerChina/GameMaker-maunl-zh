{
    "An expression can be a simple value but can also be more complicated, so, rather than assigning a value to a variable, one can also add a value to the current value of the variable using {}{}+={}{}, for example:":"表达式可以是简单的值，但也可以更加复杂，因此，与其为变量赋值，还可以使用{}{}+={}{}将值添加到变量的当前值，例如：",
    "And examples of built-in global variables would be:":"内置全局变量的示例如下：",
    "And instead it should be done as:":"相反，应该按如下方式进行：",
    "Constants":"常量",
    "Finally, there are a number of functions that are dedicated to setting, getting or checking variables in some way, available from the following page:":"最后，还有一些专门用于设置、获取或以某种方式检查变量的函数，可从以下页面获得：",
    "Global Variables":"全局变量",
    "Instance Variables":"实例变量",
    "Like any programming language {}GML{} uses {}variables{} as the basic unit for most programming operations. Variables are used to store information in the devices memory for later (or instant) use, and they are given a name so that you can refer to them in runtime and script functions. A variable in {}GML{} can store many different {}{}data types{}{}, like a real number (eg: 100, 2.456575, -56 etc...), a string (eg: \"Hello world!\"), an integer (eg: 1, 556, -7), or a boolean ({}true{} or {}false{}), as well as other things:":"与任何编程语言{}一样，Gml{}使用{}变量{}作为大多数编程操作的基本单位。变量用于将信息存储在设备内存中供以后(或即时)使用，并且为它们指定了一个名称，以便您可以在运行时和脚本函数中引用它们。{}Gml{}中的变量可以存储许多不同的{}{}数据类型{}{}，如实数(例如：100、2.456575、-56等等，字符串(例如：\"Hello world！\")，整数(例如：1, 556,-7 )或布尔值({}true{}或{}false{})，以及其他内容：",
    "Local Variables":"局部变量",
    "Most built-in variables can be changed and set like other variables, and some can even be {}arrays{}, only you don\u0027t have to set them to create them like you would a regular variable as they will already be initialised to a default value.":"大多数内置变量可以像其他变量一样进行更改和设置，有些变量甚至可以是{}数组{}，只是您不必像创建常规变量那样设置它们，因为它们已经初始化为默认值。",
    "Note that you {}cannot{} do the following (or any variation):":"请注意，您{}无法{}执行以下操作(或任何变更)：",
    "Now, In many programming languages you need to create a variable \"assignment\" before you can use it. This basically means that you tell the computer the name you wish to use for the variable and assign it an initial value. The variable is then given a place in memory to store the value or perform operations on it. Assigning a variable takes the form of:":"现在，在许多编程语言中，您需要创建一个\"变量\"赋值才能使用它。这基本上意味着您告诉计算机要用于变量的名称，并为其指定初始值。然后在内存中为变量指定一个存储值或对其执行操作的位置。赋值变量的形式为：",
    "Similarly, you can subtract using {}{}-={}{}, multiply using {}{}*={}{}, divide using {}{}/={}{}, or use bitwise operators using {}{}|={}{}, {}{}&amp;={}{}, or {}{}^={}{}. You can also add or subtract {}one{} from a value using {}{}++{}{}, {}{}--{}{}. For further information see the section on {}Expressions And Operators{}.":"类似地,您可以使用减 {}{}-={}{}, 乘 {}{}*={}{}, 除 {}{}/={}{}, 或者使用位操作符使用 {}{}|={}{}, {}{}& ={}{},或 {}{}^={}{}.您还可以使用{}{}{}{}++{}{}, {}{}--{}{}从一个值添加或减去1。有关更多信息，请参见{}表达式和运算符{}一节。",
    "So, a variable is something that we can name and use to store a value for later use in one or more operations. A great \"real world\" example of a variable is {}pi&nbsp;\uD835\uDF0B&nbsp;{}... it is a variable that everyone knows and it holds the value 3.14159265(etc...). Why do we have it in our language? Well, it\u0027s much easier to say to someone \"pi\" than \"three point one four one five nine two six five\"! Naming things like this makes life a lot simpler and it also means that should the value of that variable ever change, we don\u0027t have to change the number everywhere as the variable {}name{} is still the same.":"因此，变量是我们可以命名并用于存储值的对象，以便以后在一个或多个操作中使用。变量的一个很好的\"真实世界\"示例是{}pi \uD835\uDF0B{}...它是一个变量，每个变量都知道并保留值3.14159265(等等...)。为什么我们有我们的语言？好吧，对某人说\"pi\"比\"3点14159265\"要容易得多！这样命名会使生活变得简单许多，这也意味着如果该变量的值发生变化，我们不必随处更改数字，因为变量{}名称{}仍然相同。",
    "The GameMaker Language also has multiple different built-in variables that can have any of the above mentioned scopes (except {}local{}). These variables are special as they are included by default as part of the objects and the rooms in the game world. Some built in global variables are listed in the section mentioned above, and the different parts of the manual for sprites, rooms, objects, etc... also outline the built-in variables available in each case. Examples of such built-in instance variables would be:":"GameMaker语言还具有多个不同的内置变量，这些变量可以具有上述任何范围({}local{}除外)。这些变量是特殊的，因为默认情况下它们是游戏世界中对象和房间的一部分。上述部分列出了一些内置的全局变量，手册中针对精灵、房间、对象等的不同部分也概述了每种情况下可用的内置变量。此类内置实例变量的示例如下：",
    "The variable assignments shown above are all {}instance {}variables, however there are actually three other main variable categories when you program with {}GameMaker{} and each has its own {}scope {}(which can be considered as its area of operation, or reach). The different kinds of variables and their scope are all outlined in the following pages:":"上面显示的变量赋值是所有{}实例{}变量，但是当您使用{}GameMaker{}进行编程并且每个变量都有自己的{}范围{}(可视为其操作区域或到达范围)时，实际上还有其他三个主要变量类别。以下各页概述了不同类型的变量及其范围：",
    "Variable Functions":"变量函数",
    "Variables And Variable Scope":"变量和变量范围",
    "When forming variables in {}GML{} it must have a name that starts with a letter or the underscore symbol \"_\" and can contain only letters, numbers, and the underscore symbol \u0027_\u0027 with a maximum length of 64 symbols. So, valid variables are things like {}fish{}, {}foo_bar{}, {}num1{}, or {}_str{}, while invalid variables would be {}6fish{}, {}foo bar{}, or {}*num{}.":"在{}Gml{}中构成变量时，名称必须以字母或下划线符号\"_\"开头，并且只能包含字母、数字和下划线符号\"_\"，最大长度为64个符号。因此，有效变量包括{}fish{}、{}foo_bar{}、{}num 1{}或{}_str{}，而无效变量为{}6 fish{}、{}foo bar{}或{} *num{}。",
    "You can also use variables to hold the values returned from functions, for example:":"也可以使用变量保存从函数返回的值，例如：",
    "{}NOTE{}&nbsp;The GameMaker Language will also accept \"{}:={}\" for assignments, although this is not typically the most common way to do it:":"{}注意{}GameMaker语言还将接受\"{}:={}\"作为赋值，尽管这通常不是最常用的方法："
}