{
    "An important feature of accessors is the fact that they can be {}chained{} together. This means that if you have several nested data structures and/or arrays, there is no longer the need to use a variety of functions to get access to a value that is deep within the nested structure. For example, say you have an array, and each item in the array is a DS list, like this:":"访问器的一个重要特征是它们可以被{}链接在一起{}。这意味着，如果您具有多个嵌套数据结构和/或数组，则不再需要使用各种函数来访问嵌套结构中的深层值。例如，假设您有一个数组，并且数组中的每个项目都是DS list，如下所示：",
    "However, the second example is better as it works without the unnecessary overhead of copying the entire array first.":"但是，第二个示例更好，因为它没有先复制整个数组的不必要开销。",
    "However, you can do the same thing using chained accessors in a much cleaner way that uses less code:":"但是，你可以用更简洁的方式使用链式访问器做同样的事情，使用更少的代码：",
    "In the above code we\u0027ve created a 3 item array and assigned a DS list to each of them, and then we\u0027ve populated the different lists with the instance IDs of various objects in the game. Now, to access an ID in one of the lists we can do the following:":"在上面的代码中，我们已经创建了一个3项数组，并为每个数组分配了一个DS list，然后我们用游戏中各种对象的实例ID填充了不同的列表。现在，为了访问其中一个列表中的ID，我们可以做以下工作。",
    "It is worth noting that when using accessors in this way, you should always use the {}@{} accessor for arrays, as otherwise you will be adding extra overhead to any actions being performed. As mentioned above, by default arrays are passed by reference into functions and then use the \"copy on write\" behavior when modified. However, if the array is part of a chain, then the previous item in the chain will be updated with the copied array and the \"original\" will be deleted. For example, doing something like this:":"值得注意的是，当以这种方式使用访问器时，你应该始终使用{}@{}访问器来访问数组，否则你将为正在执行的任何操作增加额外的开销。如上所述，默认情况下，数组是通过引用传入函数的，然后在修改时使用 \"写时复制 \"行为。然而，如果数组是一个链的一部分，那么链中的前一个项目将用复制的数组进行更新，而 \"原始 \"将被删除。例如，做这样的事情。",
    "The GameMaker Language (GML) also permits you to access certain {}Data Structures{}&nbsp;and {}Arrays{} through the use of logical expressions called {}accessors{}. This is structured in a similar way as when you are normally working with an&nbsp;array, only we use an {}identifier symbol{} before the first argument to tell {}GameMaker{} that you are working on a (previously created) data structure or the array literal.":"GameMaker语言(Gml)还允许您通过使用称为{}访问器{}的逻辑表达式来访问某些{}数据结构{}和{}数组{}。这与您通常使用数组时的结构相似，只是在第一个参数之前使用了{}标识符号{}来告诉{}GameMaker{}您正在使用(以前创建的)数据结构或数组文本。",
    "Using chained accessors for things not only means you can write more compact code, it will also permit you to use iteration (for example, using a {}{}for{}{}&nbsp;loop) and other techniques to access your data in a cleaner and more intuitive manner.":"对事物使用链接访问器不仅意味着您可以编写更紧凑的代码，还允许您使用迭代(例如，使用{}{}for{}{}循环)和其他技术以更干净、更直观的方式访问数据。",
    "You can chain multiple accessors together in this way and they can be of multiple types to get access to the information stored in each part of the nested structure. Here are some more examples:":"您可以通过这种方式将多个访问器链接在一起，它们可以是多种类型的，以访问存储在嵌套结构每个部分中的信息。以下是更多示例：",
    "achieves the same results as doing this:":"获得与以下操作相同的结果："
}