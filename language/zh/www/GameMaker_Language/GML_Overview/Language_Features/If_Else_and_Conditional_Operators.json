{
    "A fundamental feature of most programming languages is the ability to ask a simple question that gives a boolean {}true{} or {}false{} answer, and in GML this is achieved using the {}if{} keyword. A simple {}if{} condition takes an {}expression{} and will perform one or more {}statement{}{}s{} if the expression resolves as {}true{}, with the following basic form:":"大多数编程语言的基本特征是能够提出一个简单的问题，给出一个布尔{}true{}或{}false{}的答案，而在GML中，这是用{}if{}关键字实现的。一个简单的{}if{}条件需要一个{}表达式{}，如果表达式解析为{}true{}，就会执行一个或多个{10}语句{11}{12} {13}，其基本形式如下。",
    "Apart from {}if{} and {}then{}, you can also use the {}else{} keyword to do something else if the expression being checked evaluates as&nbsp;{}false{}. This \"{}if... then... else...{}\" form looks like this:":"除了{}if{}和{}then{}之外，如果要检查的表达式的计算结果为{}false{}，您还可以使用{}else{}关键字执行其他操作。此\"{}if... then ... else ...{}\"形式如下所示：",
    "Here we are checking using the {}&amp;&amp;{} \"and\" operator, so it\u0027s checking if {}both {}of the conditions in the {}if{} evaluate to {}true{}, and if the first one is {}false{} then the second one won\u0027t even be checked. This is called \"short circuiting\" the code, so when combining expressions to check, you should ensure that the \"cheapest\" one for performance is always the first to avoid evaluating the more expensive ones if the first evaluates to {}false{}. In a similar vein, if a condition will can be evaluated as&nbsp;{}true{} or {}false{} at compile time, then the entire condition will be removed from the code, for example, say you have a {}macro{} {}DEBUG_ON {}for debugging and it can be either {}true{} or {}false{} - when it is set to {}false{} then the following code block will be stripped from the game when it is compiled:":"在这里，我们使用 {}&&{}“和”运算符进行检查，因此它检查 {}if{} 中的{}两个{}条件是否计算为 {}true{}，以及第一个条件是否为 {}false{} 那么第二个甚至不会被检查。这称为“短路”代码，因此在组合表达式进行检查时，您应确保性能“最便宜”的始终是第一个，以避免在第一个计算结果为 {}false{} 时计算更昂贵的表达式。同样，如果一个条件可以在编译时被评估为{}真{}或{}假{}，那么整个条件将从代码中移除，例如，假设您有一个{}宏{} {}DEBUG_ON {}用于调试，它可以是 {}true{} 或 {}false{} - 当它设置为 {}false{} 时，以下代码块将在编译时从游戏中删除:",
    "In this case the expression will be evaluated, and if it evaluates as {}false{}, the statement after {}else{} is executed, otherwise the initial statement is executed (it\u0027s {}true{}).":"在这种情况下，将计算表达式，如果它的计算结果为{}false{}，则执行在{}else{}之后的语句，否则将执行初始语句(当它为{}true{})。",
    "It is a good habit to always put brackets around the expressions and curly brackets {} around the statements in the {}if{} (otherwise only the first statement will be executed), and take a new line in the block for each statement, for example:":"最好始终在{}if{}中的表达式周围加括号，在语句周围加大括号{}(否则将只执行第一条语句)，并在块中为每条语句添加新的一行，例如：",
    "It is worth noting too that you can nest conditional operations but that if you do then each operation will need to be enclosed in brackets, for example:":"值得注意的是，您可以嵌套有条件的操作，但如果这样做，则需要将每个操作放在括号中，例如：",
    "Note that while this is slightly more verbose, it means that there is no ambiguity in the code and that it will compile correctly on ail platforms at all times. However, the initial example may not, as explained on the section in the {}Expressions And Operators{} page.":"请注意，虽然这稍微比较冗长，但它意味着代码中没有歧义，并且它将始终在所有平台上正确编译。但是，初始示例可能不是，如{}表达式和运算符{}页中的部分所述。",
    "Note that you can also do {}compound{} checks in an {}if{}, ie: check various values or expressions in the same statement. These checks can use the various {}Combining Operators{} ({}&amp;&amp;{} and, {}||{} or, and {}^^{} xor). When you do this, {}GameMaker{} will evaluate each of them one at a time, and depending on how they evaluate, then the rest may be skipped. For example:":"请注意，您还可以在{}if{}中执行{}复合{}检查，即：检查同一语句中的各种值或表达式。这些检查可以使用各种{}组合运算符{}({} && {} 和 {} || {}或{} ^^ {}异或)。执行此操作时，{}GameMaker{} 将一次对它们中的每一个进行评估，并根据它们的评估方式，然后可能会跳过其余部分。例如：",
    "The above code will check the value of \"x\" against the value of half the room width and then if it is less it will set \"{}temp_x{}\" to 32 otherwise \"{}temp_x{}\" will be room width - 32. Here are a few more examples of use:":"上述代码将根据房间宽度的一半的值检查\"x\"的值，如果该值小于该值，则将\"{}temp_x{}\"设置为32，否则\"{}temp_x{}\"将为房间宽度-32。以下是更多的使用示例：",
    "The conditional operator \"{}?{}\" will return one of two given values depending on whether the condition expression evaluates to {}true{} or {}false{}, for example:":"条件运算符\"{}?{}\"将返回两个给定值中的一个，具体取决于条件表达式的计算结果是{}true{}还是{}false{}，例如：",
    "To give a proper&nbsp;example of using {}if{},&nbsp;consider the following code which will move an instance towards the position {}x=200{} in the room when placed in the Step Event:":"要给出使用{}if{}的正确示例，请考虑以下代码，当放置在Step Event中时，这些代码将使实例朝向房间中的位置{}x= 200{}移动：",
    "You can also perform {}conditional operations{} (also know as {}ternary{} operations), which are essentially a \"shortcut\" way of performing a basic {}if{}. It has the following syntax:":"您还可以执行{}条件运算{}（也称为{}三元{}运算），这本质上是执行基本 {}if{} 的“快捷方式”。它具有以下语法：",
    "if / else and Conditional Operators":"if / else 和条件运算符",
    "{}\n    Here you are saying that if an expression resolves as {}true{} then do something. Note that the \"then\" part of the condition is {}implicit{}, but there is a {}then{} keyword that can be used (although it\u0027s almost always omitted), so you can also create conditionals like this:":"{}\n这里是说，如果一个表达式解析为{}true{}，那么就做什么。注意，条件的 \"then \"部分是{}隐式{}的，但有一个{}then{}关键字可以使用（尽管它几乎总是被省略），所以你也可以创建这样的条件。",
    "{}NOTE{} In the GameMaker language any&nbsp;value that is less than or equal to 0 will evaluate as {}false{}, while any value that is greater than 0 will evaluate as {}true{}.":"{}注意{}在GameMaker语言中，任何小于或等于0的值将被评估为{}false{}，而任何大于0的值将被评估为{}true{}。",
    "{}NOTE{}: When comparing two values to see if they are equal, you should use the \"{}=={}\" operator, and only use the \"{}={}\" one for assignment. Currently GameMaker will treat them as interchangeable, but this may change in the future and your code is cleaner and more obvious when using the correct operators for comparisons and assignments.":"{}注{}：比较两个值以确定它们是否相等时，应使用\"{}=={}\"运算符，并且仅使用\"{}={}\"运算符进行赋值。当前GameMaker会将它们视为可互换的，但这种情况在将来可能会改变，并且在使用正确的运算符进行比较和分配时，您的代码更干净、更清晰。",
    "{}var{} c = a ? {}\"foo\"{} : (b ? {}\"bar\"{} : {}\"whee\"{}); {}// Correct{}{}\n    {}var{} c = a ? {}\"foo\"{} : b ? {}\"bar\"{} : {}\"whee\"{};&nbsp;&nbsp; {}// Will cause an error{}":"{}var{} c = a ? {}\"foo\"{} : (b ? {}\"bar\"{} : {}\"whee\"{}); {}// 正确{}{}\n    {}var{} c = a ? {}\"foo\"{} : b ? {}\"bar\"{} : {}\"whee\"{};&nbsp;&nbsp; {}// 会炸{}"
}