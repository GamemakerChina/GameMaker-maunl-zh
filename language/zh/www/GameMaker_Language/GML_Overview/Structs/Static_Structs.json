{
    "After applying the static struct for {}potion{} to it, it becomes an instance of {}potion{} (as tested with {}{}is_instanceof{}(){}) and also gets any static variables and static methods contained in the {}potion{} constructor.":"在将 {}potion{} 的静态结构应用于它之后，它将成为 {}potion{} 的实例 (如用 {}{}is_instanceof{}(){} 测试的那样)，并且还获得包含在 {}potion{} 构造函数中的任何静态变量和静态方法。",
    "Changing The Static Struct":"改变静态结构",
    "Checking Inheritance":"检查多重继承",
    "Every function has a \"static struct\", where its static variables are stored. You can get that struct using&nbsp;{}{}static_get{}{}:":"每个函数都有一个\"静态结构\"，其中存储了它的静态变量。您可以使用{}{}static_get{}{}获取该结构：",
    "Every struct created from the constructor accesses its static variables from that static struct.":"从构造函数创建的每个结构都从该静态结构访问其静态变量。",
    "For example, let\u0027s say you have a constructor {}item{}, and a constructor {}potion{}&nbsp;which is a child of&nbsp;{}item{}:":"例如，假设您有一个构造函数 {}item{}，以及一个构造函数 {}potion{}，它是 {}item{} 的子级：",
    "In the code above, upon loading the potion struct, it\u0027s only created as a simple struct and doesn\u0027t belong to a constructor, nor does it have any static variables.":"在上面的代码中，在加载 potion 结构时，它只被创建为一个简单的结构，不属于构造函数，也没有任何静态变量。",
    "It creates a struct from the {}potion{} constructor. Using {}is_instanceof(){}, we can check that the new struct:":"它从 {}potion{} 构造函数创建一个结构。使用 {}is_instanceof(){}，我们可以检查新结构：",
    "Now, if you call {}static_get(static_potion){}, you will get the static struct for {}item{}! This is the same struct you would get from {}static_get(item){}.":"现在，如果您调用 {}static_get(static_potion){}，您将获得 {}item{} 的静态结构！这与您从 {}static_get(item){} 获得的结构相同。",
    "Static Chain":"静态链",
    "The above code shows three constructors:&nbsp;{}item{}, {}potion{} which is a child of {}item{}, and {}enemy{}, which is a separate constructor.":"上面的代码显示了三个构造函数：{}item{}，{}potion{}，它是 {}item{} 的子类，以及 {}enemy{}，它是一个单独的构造函数。",
    "The function&nbsp;{}{}static_set{}{}&nbsp;is provided to let you change the static struct of a function (constructor or not). This way you can change what static variables are available to a constructor and its structs, and also change the \"static chain\" that a constructor belongs to.":"函数 {}{}static_set{}{} 允许您更改函数的静态结构 (构造函数或非构造函数)。通过这种方式，您可以更改构造函数及其结构可用的静态变量，还可以更改构造函数所属的 \" 静态链\"。",
    "The recommended use-case for this function is deserialisation. If you\u0027re loading structs from JSON, those structs won\u0027t belong to any constructors, however you can change that by using&nbsp;{}{}static_set{}{}&nbsp;to \"apply\" a constructor to a struct, so that that struct receives its shared static variables and you can run&nbsp;{}{}is_instanceof{}{}&nbsp;to check its kind.":"此函数的推荐用例是反序列化。如果您从 JSON 加载结构，那么这些结构将不属于任何构造函数，但是您可以通过使用 {}{}static_set{}{} 将构造函数 \" 应用 \" 到一个结构，以便该结构接收其共享的静态变量，并且您可以运行 {}{}is_instanceof{}{} 来检查其类型。",
    "This is also true for {}constructor functions{}. Each constructor has a static struct, where its static variables and static methods are stored.":"对于{}构造函数{}也是如此。每个构造函数都有一个静态结构，其中存储了它的静态变量和静态方法。",
    "This is because {}item{} is the parent of the {}potion{} constructor, so the static struct for {}item{} is linked to the static struct for {}potion{}.":"这是因为 {}item{} 是 {}potion{} 构造函数的父级，因此 {}item{} 的静态结构链接到 {}potion{} 的静态结构。",
    "This is done by checking if your struct has the given constructor\u0027s static struct anywhere in its static chain.":"这是通过检查结构是否在其静态链中的任何位置具有给定构造函数的静态结构来完成的。",
    "This way you can check whether a struct \"is\" something, as {}a potion is an item{}, so it returns {}true{} for both constructors. However if wouldn\u0027t be true the other way around: {}an item is not a potion{}.":"通过这种方式，您可以检查结构是否\"是\"某物，因为 {}potion 是 item{}，因此它为两个构造函数返回 {}true{}。然而，如果不是真的，反过来：{} item 不是 potion {}。",
    "When you use constructor inheritance, those constructors form a \"static chain\" - a chain of static structs where each child links to its parent.":"当您使用构造函数继承时，这些构造函数形成一个\"静态链\" -- 一个静态结构链，其中每个子级都链接到其父级。",
    "You can get the static struct of {}potion{} using {}static_get(potion){}&nbsp;- this is where the static variables for {}potion{} are stored. Let\u0027s call this {}static_potion{}.":"您可以使用 {}static_get(potion){} 获取 {}potion{} 的静态结构-这是存储 {}potion{} 的静态变量的位置。让我们将其称为 {}static_potion{}。",
    "You can use&nbsp;{}{}is_instanceof{}{}&nbsp;to check if a struct belongs to the given constructor, or has the constructor as a parent.":"您可以使用 {}{}is_instanceof{}{} 来检查结构是否属于给定的构造函数，或者是否将该构造函数作为父构造函数。",
    "is a {}potion{}":"是一个 {}potion{}",
    "is an {}item{}":"是一个 {}item{}",
    "is not an {}enemy{}":"不是一个 {}enemy{}",
    "{}Static Struct{}":"{}静态结构{}",
    "{}{}{}Static{} Struct{}{}":"{}{}{}静态{}结构{}{}"
}