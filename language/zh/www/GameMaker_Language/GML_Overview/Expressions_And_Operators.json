{
    "Accessors":"访问器",
    "An expression is a mathematical phrase that can contain ordinary numbers, variables, strings, or functions as well as one or more {}operators {}(like add, subtract, multiply, etc...). The values used in an expression can be real numbers (e.g. {}3.4 * 6{}), hexadecimal numbers starting with a {}${} sign (e.g. {}$00FFAA | $88FFAA{}), strings between double quotes (e.g. {}\"hello\"{} + {}\"world\"{}) or more complicated expressions using multiple operators and values.":"表达式是一个数学短语，可以包含普通数字、变量、字符串或函数，以及一个或多个{}运算符{}(如加、减、2乘等)。表达式中使用的值可以是实数(如{}3.4*6{})，以{}${}符号开头的十六进制数字(如{} $00FFAA | $88FFAA{})，双引号之间的字符串(如{}\"hello\"{}+{}\"world\"{})或使用多个运算符和值的更复杂的表达式。",
    "Consider the following example:":"请考虑以下例子:",
    "Expression Grouping":"表达式组",
    "Expressions":"表达式",
    "Expressions And Operators":"表达式和运算符",
    "Here are some final examples of the various different expressions:":"下面是各种不同表达方式的一些最终例子。",
    "Here, the {}username{} variable will get the value stored in {}data.username{}, however if {}data.username{} happens to be&nbsp;{}undefined{} or {}pointer_null{}, the variable will get the string {}\"INVALID USERNAME\"{} instead. This example ensures&nbsp;that any function calls using the {}username{}&nbsp;variable do not cause an error because of being given&nbsp;a nullish value, and that the user knows when their username was not returned.":"在这里，{}username{}变量将获得存储在{}data.username{}中的值，但是如果{}data.username{}恰好是{}undefined{}或{}pointer_null{}，该变量将获得字符串{}\"INVALID USERNAME\"{}代替。这个例子确保了任何使用{}username{}变量的函数调用不会因为被赋予一个空值而导致错误，并且用户知道他们的用户名没有被返回。",
    "However, the compiler could interpret this in one of two ways:":"然而，编译器可以用两种方式之一来解释这一点:",
    "If {}input{} is {}undefined{} or {}pointer_null{}, the expression will return the {}null_output{} value; however in all other cases it will simply return the {}input{} value. This can be used to define a \"default\" value for a variable in case the variable itself does not hold a valid value.":"如果{}input{}(输入)是{}undefined{}或{}pointer_null{}，该表达式将返回{}null_output{}(输出)值;但是在其他情况下，它将仅仅返回{}input{}值。这可以用来定义一个变量的 \"默认 \"值，以防止该变量本身不包含一个有效的值。",
    "If {}variable{} is {}undefined{} or {}pointer_null{}, the {}null_value{}&nbsp;value will be assigned to it; otherwise the variable will remain unchanged. This can be used to assign a custom \"default\" value to a variable when it holds a nullish value.":"如果{}variable{}是{}undefined{}或{}pointer_null{}，{}null_value{}值将被分配给它;否则变量将保持不变。这可以用来在变量持有空值时为其分配一个自定义的 \"默认 \"值。",
    "Now, you can tell looking at the code that one of those is a bit stupid, but that\u0027s because we know what we are wanting to achieve and what we want to happen, but the compiler doesn\u0027t. All it sees is two variables with the ++ operator between them so it has to choose which one to apply it to. Therefore, you should&nbsp;{}always explicitly bracket expressions, operations and statements{}. The correct version of the above code should be:":"现在，你看了这段代码就知道，其中一个有点愚蠢，但那是因为我们知道我们想要实现什么，我们想要发生什么，但编译器不知道。它所看到的是两个变量和它们之间的++运算符，所以它必须选择哪一个来应用它。因此，你应该{}总是明确地将表达式、运算和语句{}括起来。上述代码的正确版本应该是。",
    "One final thing to note is that there are also some&nbsp;expression \"short-cuts\" called {}accessors{} for use with certain {}Data Structures{}&nbsp;and {}Arrays{}. These enable you to add, or replace data within these formats quickly and easily and without the use of any function calls. For full details, please see the following page":"最后要注意的是，还有一些表达式的 \"捷径\"，称为{}访问器{}，用于某些{}数据结构{}和{}数据结构{}。数据结构和数组。这使你能够在这些格式中快速、轻松地添加或替换数据，而无需使用任何函数调用。完整的细节，请参见以下页面",
    "Operators":"运算符",
    "Statement Grouping":"语句分组",
    "The debug output would be 1 and 3. Here are some examples of use:":"调试输出将是1和3。下面是一些使用的例子:",
    "The different target compilers will perform the operations in different orders since they are not explicitly shown, giving rise to \"odd\" results that you may not expect when you play your game. to avoid this, use the {}(){} to separate out the parts, like this:":"不同的目标编译器将以不同的顺序执行操作，因为它们没有明确显示，引起 \"奇怪 \"的结果，当你玩你的游戏时，你可能没有想到。为了避免这种情况，使用{}(){}来分离出部分，像这样:",
    "The following operators are provided for use with expressions:":"以下是提供给表达式使用的运算符。",
    "The following {}unary{} operators are provided:":"提供了以下{}一元{}运算符。",
    "Therefore, if you have something like this:":"因此，如果你有这样的东西:",
    "This may appear more verbose, but there is no ambiguity about the operations being performed and it will compile and behave consistently across all platforms. Also note that while you can chain expressions and statements without the use of brackets at the moment, this is a legacy feature and going forward may be deprecated and removed from GML, so using brackets appropriately now will \"future-proof\" your code (and is generally good practice anyway).":"这样做可能会显得比较啰嗦，但对所执行的操作没有任何歧义，而且它在所有平台上的编译和行为也是一致的。还要注意的是，虽然你现在可以不使用方括号来链接表达式和语句，但这是一个遗留函数，今后可能会被废弃并从GML中删除，所以现在适当地使用方括号将 \"证明 \"你的代码(而且通常是好的做法)。",
    "When doing multiple operations in a single expression, it is {}very important{} that you use brackets {}(){} to separate out the order of operation, as different platforms may perform them differently if not explicitly stated in this way. For example, consider the following code:":"在一个表达式中进行多个操作时，使用括号{}(){}来区分操作顺序是非常重要的，因为如果没有明确说明，不同的平台可能会有不同的执行方式。例如，考虑下面的代码:",
    "When using various operations and expressions in a single code block, these too should be separated. For example, the following&nbsp;{}looks{}&nbsp;like valid code:":"当在单个代码块中使用各种操作和表达式时，它们也应该分开。例如，以下{}看起来{}是有效代码：",
    "You can find additional information on how to use the bitwise operators and what they do from the section:&nbsp;{}Bitwise Operators{}.":"你可以从本节中找到更多关于如何使用位运算符和它们的作用的信息:{}位运算符{}。",
    "a = (b == c || d);&nbsp; &nbsp;{}//better{}{} a = ((b == c) || d); {}//best{}":"a = (b == c || d);&nbsp; &nbsp;{}//好的{}{} a = ((b == c) || d); {}//最好的{}",
    "will give different results depending on the platform.":"将根据平台的不同给出不同的结果。",
    "{}++a{}&nbsp;will increment the variable and return the incremented value.":"{}++a{} 将递增变量并返回递增的值。",
    "{}??={} is similar to the nullish coalescing operator described above but&nbsp;is used specifically for variable assignments. This operator expects the following syntax:":"{}??={}与上述的nullish合并运算符类似，但专门用于变量赋值。这个运算符希望使用以下语法。",
    "{}??{} is a nullish coalescing operator that returns a specified expression if the given value is {}undefined{} or {}pointer_null{}. This operator expects the following syntax:":"{}??{}是一个nullish合并运算符，如果给定值是{}undefined{}或{}pointer_null{}，则返回指定的表达式。该运算符希望使用以下语法:",
    "{}Arithmetical (+, -, *, /){}{}Arithmetical (+, -, *, /){}":"{}Arithmetical (+, -, *, /){}{}Arithmetical (+, -, *, /){} 算术",
    "{}Assigning (=){}{}Assigning (=){}":"{}Assigning (=){}{}Assigning (=){} 赋值",
    "{}Bitwise (|, &amp;, ^, &lt;&lt;, &gt;&gt;){}{}Bitwise (|, &amp;, ^, &lt;&lt;, &gt;&gt;){}":"{}Bitwise (|, &amp;, ^, &lt;&lt;, &gt;&gt;){}{}Bitwise (|, &amp;, ^, &lt;&lt;, &gt;&gt;){} 位",
    "{}Combining (&amp;&amp;, ||, ^^){}{}Combining (&amp;&amp;, ||, ^^){}":"{}Combining (&amp;&amp;, ||, ^^){}{}Combining (&amp;&amp;, ||, ^^){} 组合",
    "{}Comparing (&lt;, &lt;=, ==, !=, &gt;, &gt;=){}{}Comparing (&lt;, &lt;=, ==, !=, &gt;, &gt;=){}":"{}Comparing (&lt;, &lt;=, ==, !=, &gt;, &gt;=){}{}Comparing (&lt;, &lt;=, ==, !=, &gt;, &gt;=){} 比较",
    "{}Division and Modulo (div, %, mod){}{}Division and Modulo (div, %, mod){}":"{}Division and Modulo (div, %, mod){}{}Division and Modulo (div, %, mod){} 除法和模",
    "{}Increment/Decrement (++, --){}{}Increment/Decrement (++, --){}":"{}Increment/Decrement (++, --){}{}Increment/Decrement (++, --){} 递增递减",
    "{}NOTE{}&nbsp;\"Nullish\" simply refers to a value being equal to {}undefined{} or {}pointer_null{}.":"{}注意{}\"Nullish \"只是指等于{}undefined{}或{}pointer_null{}的一个值。",
    "{}NOTE{}&nbsp;The expression on the right hand side of the nullish coalescing operator is only executed when the input value is nullish, meaning that any function calls included in the RHS expression will only be executed if the input value is nullish.":"{}注意{}只有当输入值为nullish时，nullish合并运算符右侧的表达式才会被执行，这意味着只有当输入值为nullish时，RHS表达式中包含的任何函数调用才会被执行。",
    "{}NOTE{}:&nbsp;On the YoYo Compiler target platforms (those marked (YYC)), these expressions are evaluated from left to right, while on all other target platforms they are evaluated from right to left, meaning that this:":"{}注意{}: 在YoYo编译器的目标平台上(那些标有(YYC)的平台)，这些表达式从左到右进行运算，而在所有其他目标平台上，它们从右到左进行运算，这意味着:",
    "{}Nullish (??, ??=){}{}Nullish (??, ??=){}":"{}Nullish (??, ??=){}{}Nullish (??, ??=){} 空值合并",
    "{}Unary (!, -, ~){}{}Unary (!, -, ~){}":"{}Unary (!, -, ~){}{}Unary (!, -, ~){} 一元",
    "{}a++{}&nbsp;will increment the variable but return the value before it was incremented.":"{}a++{} 将增加变量，但返回被增加之前的值。",
    "{}if{} (a == b &amp;&amp; c == d) { {}do{} something... } &nbsp;{}// and{}{} {}if{} (a == b || c == d) { {}do{} something... } &nbsp;&nbsp;{}// or{}{} {}if{} (a == b ^^ c == d) { {}do{} something... } &nbsp;{}// xor{}":"{}if{} (a == b &amp;&amp; c == d) { {}do{} something... } &nbsp;{}// and 和 {}{} {}if{} (a == b || c == d) { {}do{} something... } &nbsp;&nbsp;{}// or 或{}{} {}if{} (a == b ^^ c == d) { {}do{} something... } &nbsp;{}// xor 异或{}",
    "{}{}!{}{}: boolean \"not\", so&nbsp;{}!true == false{}":"{}{}!{}{}: not 布尔\"非\"，所以 {} !true == false{}",
    "{}{}&amp;&amp;{}, {}||{}, {}^^{} ({}and{}, {}or{} and {}xor{}){} are used to combine boolean values to give either true or false. If any of the following examples resolves to {}true{} then the code would be run:":"{}{}&amp;&amp;{}, {}||{}, {}^^{} ({}and{}, {}or{} 和 {}xor{}){} 用于组合布尔值以给出 true 或 false。如果以下任何示例解析为 {}true{}，则代码将运行：",
    "{}{}&lt;{}, {}&lt;={}, {}=={}, {}!={}, {}&gt;{}, {}&gt;={}{}&nbsp;are comparisons and can only give a&nbsp;{}true{}&nbsp;or&nbsp;{}false{}&nbsp;result (where true can also be interpreted as 1, and false as 0). Examples of use:":"{}{}&lt;{}, {}&lt;={}, {}=={}, {}!={}, {}&gt;{}, {}&gt;={}{}&nbsp;是比较，只能给出{}true{}或{}false{}结果（其中 true 也可以解释为 1，false 也可以解释为 0）。使用示例：",
    "{}{}++{}{}, {}{}--{}{}&nbsp;are used to add or subtract&nbsp;one ({}1{}) from a value. It is worth noting that placing this before or after the value to be added to or subtracted from will have slightly different results. For example:":"{}{}++{}{}, {}{}--{}{} 用来从一个值中加减({}1{})。值得注意的是，将其放在要加减的数值之前或之后，会有稍微不同的结果。例如。",
    "{}{}+{}, {}-{}, {}*{}, {}/{}{}&nbsp;are add, subtract, multiply and divide, respectively. Examples of use:":"{}{}+{}, {}-{}, {}*{}, {}/{}{} 分别是加、减、乘、除。使用示例：",
    "{}{}-{}{}: negates the next real or integer value (not valid for strings or booleans)":"{}{}-{}{}: 取反一个实数或整数值（对字符串或布尔运算无效）。",
    "{}{}={}{}&nbsp;is used to assign a value to a variable. Note that this can {}also{} be used for comparing variables in {}GameMaker{} and you may see this in examples and other peoples codes. However, this is a legacy from old {}GameMaker{} versions and you should use the {}=={} operators for comparing and {}={} for assigning, as shown in these examples:":"{}{}={}{}是用来给变量赋值的。请注意，{6}GameMaker{7}中这也可以{}用于在{}中对变量进行比较。你可能会在例子和其他人的代码中看到这一点。然而，这是从{}GameMaker{}旧版中遗留下来的。你应该使用{}=={}运算符进行比较，使用{}={}进行赋值，如这些例子所示:",
    "{}{}As values in all expressions you can use numbers, variables, or functions that return a value, and sub-expressions can be placed between brackets too.&nbsp;All operators work for real number values, but {}comparisons {}also work for strings and the \"{}+{}\" operator can be used to concatenate&nbsp;strings.":"{}{}作为所有表达式中的值，您可以使用返回值的数字、变量或函数，子表达式也可以放置在括号之间。所有运算符都适用于实数值，但{}比较{}也适用于字符串，并且\"{}+{}\"运算符可用于连接字符串。",
    "{}{}NOTE{}{}&nbsp;Floating point numbers do not stop on Divide by Zero as they will get an infinity as the answer. If A and B are integers (either int32 or int64) then the division will be done as integers (and divide by 0 will be checked and error\u0027d. Otherwise it will be done as a floating point division (with no divide by 0 check).":"{}{}注意{}{}浮点数在除以零时不会停止，因为它们会得到一个无穷大的答案。如果a和b是整数(int32或int64)，那么除法将作为整数进行(除以0会被检查并出错。否则，它将作为浮点除法进行(没有除以0的检查)。",
    "{}{}div{}, {}mod{} ({}%{}){}&nbsp;are division and modulo, where&nbsp;div&nbsp;gives you the amount a value can be divided into producing only an integer quotient, while&nbsp;mod&nbsp;gives you only the remainder of a division. Note that you can only&nbsp;div&nbsp;or&nbsp;mod&nbsp;using&nbsp;integer&nbsp;values. Examples of use:":"{}{}div{}, {}mod{} ({}%{}){}是除法和模，其中 div 为您提供一个值可以被划分为仅产生整数商的数量，而 mod 仅为您提供除法的余数。请注意，您只能使用整数值进行 div 或 mod。使用示例：",
    "{}{}|{}, {}&amp;{}, {}^{}, {}&lt;&lt;{}, {}&gt;&gt;{} {}are used to&nbsp;perform bitwise operations, where | = bitwise or, &amp; = bitwise and, ^ = bitwise xor, &lt;&lt; = shift left, &gt;&gt; = shift right. Examples of use:":"{}{}|{}, {}&amp;{}, {}^{}, {}&lt;&lt;{}, {}&gt;&gt;{} {} 用于执行位操作，其中 | = 位或，& = 位和 ，^=位异或，<< = 左移 ，>> = 右移 。使用的例子:",
    "{}{}~{}{}: negates the next value bitwise":"{}{}~{}{}: 按位取反一个值"
}