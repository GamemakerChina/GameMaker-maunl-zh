{
    "The above code creates a virtual key 64x64 pixels square, positioned on the screen at (32, 32) which will trigger the vk_left event when touched and assigns the index of this virtual key to a global variable.":"上面的代码创建了一个64x64像素的正方形虚拟键，位于屏幕上的(32，32)处，当被触摸时，它将触发 vk_left 事件，并将该虚拟键的索引分配给一个全局变量。",
    "The actual position of the virtual key is based on the {}screen{} position rather than room position and so the x/y values are absolute on the screen. This means that you don\u0027t need to worry about the use of views or the relative room coordinates, and can simply define the keys in the {}Create Event{} of an object (you only need to define a virtual key once per-room), then draw your key sprites in the&nbsp;{}Draw GUI Event{}, sizing the GUI layer to be the same as the screen.":"虚拟键的实际位置基于{}屏幕{}位置而不是房间位置，因此X/Y值在屏幕上是绝对的。这意味着您无需担心视图或相对房间坐标的使用，并且可以简单地在对象的{}创建事件{}中定义按键(您只需为每个房间定义一次虚拟按键)，然后在{}绘制GUI事件{}中绘制您的按键精灵，将GUI层的大小调整为与屏幕相同。",
    "The height of the virtual key":"虚拟键的高度",
    "The width of the virtual key":"虚拟键的宽度",
    "The x coordinate (left side) of the virtual key {}on the screen{}":"虚拟按键{}在屏幕{}上的X坐标(左侧)",
    "The y coordinate (top side) of the virtual key {}on the screen{}":"虚拟按键{}在屏幕{}上的Y坐标(顶边)",
    "This function enables you to map \"touches\" of a screen area to keyboard events. This means that once you have assigned an area to a virtual key, all touches on that area will trigger the keyboard event corresponding to the key you have mapped to the area. You can assign each virtual key you define to a variable too, which can then be used in the further virtual key functions to show, hide and delete them. These keys are assigned on a {}per room{} basis and will be automatically removed by {}GameMaker{} when changing rooms.":"此函数使您能够将屏幕区域的“触摸”映射到键盘事件。这意味着，一旦您将某个区域分配给某个虚拟键，该区域上的所有触摸都将触发与您映射到该区域的键相对应的键盘事件。您也可以将您定义的每个虚拟键分配给一个变量，然后可以在进一步的虚拟键功能中使用该变量来显示、隐藏和删除它们。这些钥匙是以{}每个房间{}为基础分配的，并将在更换房间时由{}GameMaker{}自动删除。",
    "Which keyboard key event should be triggered by touching this area":"触摸此区域应触发哪个键盘键事件"
}