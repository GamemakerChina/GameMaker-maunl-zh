{
    "The above code will set a global variable to {}true{} and then save the current game state to the buffer indexed in the variable \"save_buff\" when the key \"S\" is pressed.":"上述代码将全局变量设置为{}true{}，然后在按键\"S\"时将当前游戏状态保存到变量\"save_buffs\"中索引的缓冲区。",
    "The buffer id to save to.":"要保存到的缓冲区ID。",
    "This is a variant of the {}{}game_save(){}{} function, so please read {}its&nbsp;page{} first as it contains important information related to its use and to this function\u0027s as well.":"这是{}{}game_save(){}{}函数的变体，因此请首先阅读{}其页面{}，因为它包含与其使用以及此函数相关的重要信息。",
    "With this function you can save the current state of the game to a previously created \"grow\" buffer (see {}Buffers{}) which can then be loaded again at any time using {}{}game_load_buffer(){}{} function. This function is designed for use in a single room at a time (ie: it\u0027s not advised to do a buffer save in one room, then try and load the buffer from another one) and should ideally be used only for checkpoints or level restarts.":"使用此函数，您可以将游戏的当前状态保存到以前创建的\"增长\"缓冲区(请参见{}缓冲区{})，然后可以使用{}{}game_load_buffer(){}{}函数随时重新加载该缓冲区。此功能设计为一次在单个房间中使用(即，不建议在一个房间中执行缓冲区保存，然后尝试从另一个房间加载缓冲区)，理想情况下应仅用于检查点或级别重新启动。",
    "{}NOTE{}: This function is {}very{} limited and it is designed for the beginner to get a checkpoint system up and running quickly, but more advanced users may prefer to code their own system using the {}File{}&nbsp;functions, due to the fact that the game will {}not{} save any of the dynamic resources like data structures, surfaces, added sprites etc.":"{}注意{}：此功能{}非常{}有限，专为初学者设计，可让检查点系统快速启动并运行，但更高级的用户可能更喜欢使用{}文件{}功能对自己的系统进行编码，因为游戏不会{}保存任何动态资源，如数据结构、曲面、添加的精灵等。"
}