{
    "A buffer of fixed size.":"固定大小的缓冲区。",
    "A buffer that will \"grow\" dynamically as data is added":"一个缓冲区，将在添加数据时动态 \"增长\"",
    "A buffer where the data will \"wrap\". When the data being added reaches the limit of the buffer size, the overwrite will be placed back at the start of the buffer, and further writing will continue from that point.":"数据将\"包装\"在其中的缓冲区。当要添加的数据达到缓冲区大小的限制时，覆盖将被放回到缓冲区的开始处，并且从该点开始继续进一步写入。",
    "Apart from the buffer type, you will also have to set the {}byte alignment{} for the buffer. This value will vary depending on the data that you wish to store in the buffer, and in most cases a value of 1 is perfectly fine. However, be aware that for some operations a specific alignment is {}essential{}, and an incorrect alignment may cause errors (for further details on alignment see {}Buffers{}). The following is a general guide to show which values are most appropriate for each data type (when in doubt, use an alignment of 1):":"除了缓冲区类型之外，您还必须为缓冲区设置{}字节对齐{}。此值将根据您希望存储在缓冲区中的数据而变化，并且在大多数情况下，值为1是完全可以的。但是，请注意，对于某些操作，特定的对齐是{}必不可少的{}，并且不正确的对齐可能会导致错误 (有关对齐的更多详细信息，请参见{}缓冲区{})。以下是显示哪些值最适合每种数据类型的通用指南 (如有疑问，请使用1的对齐方式):",
    "Floats of up to 16bits should be aligned to 2 bytes. {}(Not currently supported!){}":"最多16位的浮点数应与2个字节对齐。{}(当前不支持!){}",
    "Floats of up to 32bits should be aligned to 4 bytes.":"最多32位的浮点数应与4字节对齐。",
    "Floats of up to 64bits should be aligned to 8 bytes.":"最多64位的浮点数应与8个字节对齐。",
    "Signed or unsigned 16bit integers should be aligned to 2 bytes.":"有符号或无符号的16位整数应对齐2字节。",
    "Signed or unsigned 32bit integers should be aligned to 4 bytes":"有符号或无符号的32位整数应对齐为4字节",
    "Signed or unsigned 8bit integers can be aligned to any value, but note that for a fast buffer (see {}{}buffer_write(){}{}) it {}must{} be aligned to 1.":"有符号或无符号的8位整数可以与任何值对齐，但是请注意，对于快速缓冲区 (请参阅{}{}buffer_write(){}{})，它{}必须{}与1对齐。",
    "Special \"stripped\" buffer that is extremely fast to read/write to. Can only be used with {}buffer_u8{} {}data types{}, and {}must{} be 1 byte aligned.":"读取/写入速度极快的特殊\"剥离\"缓冲器。只能用于{}buffer_u8{}{}数据类型{}，且{}必须{}对齐1字节。",
    "Strings should be aligned to 1 byte.":"字符串应与 1 字节对齐。",
    "The above code allocates memory to a buffer then copies the data from the given vertex buffer into it, returning the index of the new buffer which is stored in the variable \"player_buffer\", for future use.":"上述代码将内存分配给缓冲区，然后将数据从给定的顶点缓冲区复制到其中，返回存储在变量 \"player_buffer\" 中的新缓冲区的索引，以备将来使用。",
    "The byte alignment for the buffer":"缓冲器的字节对齐",
    "The type of buffer to create (see the constants list above).":"要创建的缓冲区类型(请参见上面的常量列表)。",
    "The vertex buffer index to use.":"要使用的顶点缓冲区索引。",
    "This type of buffer is to be used as a vertex buffer only.":"这种类型的缓冲区仅用作顶点缓冲区。",
    "You use this function to allocate a portion of memory as a buffer in your game filled with the data from a previously created {}vertex buffer{}. The function returns a unique {}buffer id{} that should be stored in a variable and used for all further function calls to the buffer. The function takes the id for the vertex buffer to use (as returned by the function {}{}vertex_create_buffer(){}{}, for example) with the following constants being used to define the buffer type:":"您可以使用此函数在游戏中分配一部分内存作为缓冲区，其中包含来自先前创建的{}顶点缓冲区{}的数据。该函数返回一个唯一的{}缓冲区id{}，该id应存储在变量中，并用于对缓冲区的所有其他函数调用。该函数采用要使用的顶点缓冲区的id (如函数{}{}vertex_create_buffer(){}{}, 例如)，其中以下常量用于定义缓冲区类型:",
    "{}NOTE{}: It\u0027s important that you remove any dynamically created resources like this from memory when you no longer need them to prevent memory leaks, so when you are finished with the buffer that you have created you should free it up again using {}{}{}buffer_delete(){}{}{}. Also note that the vertex buffer used to create the new buffer is not removed from memory either and you should use the function {}{}{}vertex_delete_buffer(){}{}{} when it is no longer required.":"{}注意{}：当您不再需要防止内存泄漏时，您需要从内存中删除任何像这样的动态创建的资源，这一点很重要，因此当您完成创建的缓冲区时，您应该使用{}{}{}buffer_delete(){}{}{}来再次释放它。另请注意，用于创建新缓冲区的顶点缓冲区也没有从内存中移除，当不再需要它时，您应该使用函数{}{}{}vertex_delete_buffer(){}{}{}",
    "{}NOTE{}: Vertex buffers are 1 byte aligned, but you can create the buffer with any alignment depending on how you want to treat the data, as the vertex data is simply a raw memory copy into the buffer.":"{}注意{}: 顶点缓冲区是1字节对齐的，但是您可以根据您想要如何处理数据来创建具有任何对齐方式的缓冲区，因为顶点数据只是进入缓冲区的原始内存副本。"
}