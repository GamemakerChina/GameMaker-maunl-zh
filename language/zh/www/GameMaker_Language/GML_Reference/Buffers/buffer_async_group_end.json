{
    "The above code starts a buffer group then sets it to save out 4 files asynchronously. The group definition is then ended (at which point saving will begin), storing the ID of the function call in the variable \"{}save_id{}\". When the save is complete, the asynchronous Save/Load event will be triggered and you can parse the {}async_load{} map for the correct ID of the function, like this:":"上面的代码启动一个缓冲区组，然后将其设置为异步保存4个文件。然后结束组定义 (此时将开始保存)，将函数调用的ID存储在变量 \"{}save_id{}\" 中。保存完成后，将触发异步保存/加载事件，您可以解析{}async_load{}映射以获取函数的正确ID，如下所示:",
    "The above code will first check the id of the DS map that has been created, then check the status of the callback, posting a debug message if there has been any issues.":"上面的代码将首先检查已创建的DS映射的id，然后检查回调的状态，如果有任何问题，则发布调试消息。",
    "The {}buffer_async_group_end(){} function can be called from any event, and since it is asynchronous the callback can be almost instantaneous or could take several seconds. Calling the function is simple and would look something like this:":"{}buffer_async_group_end(){}函数可以从任何事件调用，由于它是异步的，所以回调可以几乎是瞬时的，或者可能需要几秒钟的时间。调用函数很简单，看起来如下：",
    "This function finishes the definition of a buffer async group. You must have previously called the function {}{}buffer_async_group_begin(){}{} to initiate the group, then call the function {}{}buffer_save_async(){}{} for each file that you wish to save out (or {}{}buffer_load_async(){}{} to load buffers). Finally you call this function, which will start the saving of the files. The function will return a unique ID value for the save, which can then be used in the {}Asynchronous Save / Load event{} to parse the results from the {}async_load{} DS map.":"此函数完成缓冲区异步组的定义。您必须先调用函数{}{}buffer_async_group_begin(){}{}来启动组，然后为要保存的每个文件调用函数{}{}buffer_save_async(){}{}(或{}{}buffer_load_async(){}{}加载缓冲区)。最后你调用这个函数，它将开始保存文件。函数将为保存返回唯一的ID值，然后可以在{}异步保存/加载事件{}中使用该值来解析来自{}async_load{}DS映射的结果。"
}