{
    "The above code will store the current seek position within the buffer indexed in the variable \"buff\" to the local variable \"pos\". The buffer seek position will then be set to the start of the buffer, and three pieces of data are read into an array, before finally re-setting the buffer seek position to where it was previously.":"上述代码将把在变量\"buffe\"中索引的缓冲区内的当前寻道位置存储到局部变量\"pos\"。然后，缓冲区寻道位置将被设置为缓冲区的起始位置，并且三条数据读入数组，然后最终将缓冲区寻道位置重新设置为之前的位置。",
    "The above code will store the current seek position within the buffer stored in the variable {}buff{} to the local variable {}_pos{}. The buffer seek position will then be set to the start of the buffer, and three pieces of data read into an array, before finally resetting the buffer seek position to where it was previously.":"上述代码会将变量 {}buff{} 中存储的缓冲区内的当前查找位置存储到局部变量 {}_pos{}。然后，缓冲区查找位置将设置为缓冲区的开头，并将三块数据读入数组，最后将缓冲区查找位置重置为之前的位置。",
    "The index of the buffer to use.":"要使用的缓冲区的索引。",
    "This function gets the current \"seek\" position for use in other buffer functions.":"此函数获取当前 \" 查找 \" 位置以供其他缓冲区函数使用。",
    "To change the seek value of a buffer, use {}{}buffer_seek{}{}.":"要更改缓冲区的查找值，请使用 {}{}buffer_seek{}{}。",
    "When you read or write data to a buffer using the {}{}buffer_read(){}{} or {}{}buffer_write(){}{} the current \"seek\" position is advanced by the bytes written or read, and with this function you can get the current \"seek\" position for use in other buffer functions. For example, if your buffer alignment is set to 4 bytes and you write a single piece of data which is 1 byte in size then do a {}buffer_tell(){}, you\u0027ll get an return value of 1. However, if you write another piece of data, also 1 byte in size, then do a {}buffer_tell(){}, you\u0027ll get a return value of 5 as the alignment has \"padded\" the data to that position.":"当您使用{}{}buffer_read(){}{}或{}{}buffer_write(){}{}读取数据或将数据写入缓冲区时，当前\"seek\"位置将按写入或读取的字节前进，并且这个函数你可以得到当前的\"seek\"位置，以便在其它缓冲区函数中使用。例如，如果您的缓冲区对齐设置为4字节，并且您写入一段大小为1字节的数据，然后执行{}buffer_tell(){}，您将获得1的返回值。但是，如果您写入另一个数据片段(也是1字节大小)，然后执行{}buffer_tell(){}，则会得到一个返回值5，因为对齐已将数据\"填充\"到该位置。",
    "When you read or write data to a buffer using the&nbsp;{}{}buffer_read{}{} or&nbsp;{}{}buffer_write{}{} the current \"seek\" position is advanced by the bytes written or read, and with this function you can get the current \"seek\" position for use in other buffer functions. For example, if your buffer alignment is set to 4 bytes and you write a single piece of data which is 1 byte in size then do a {}{}buffer_tell{}{}, you\u0027ll get an return value of 1. However, if you write another piece of data, also 1 byte in size, then do a {}{}buffer_tell{}{}, you\u0027ll get a return value of 5 as the alignment has \"padded\" the data to that position.":"当您使用 {}{}buffer_read{}{} 或 {}{}buffer_write{}{} 读取数据或将数据写入缓冲区时，当前 \"seek\" 位置将按写入或读取的字节前进，并且这个函数你可以得到当前的 \"seek\" 位置，以便在其它缓冲区函数中使用。例如，如果您的缓冲区对齐设置为 4 字节，并且您写入一段大小为 1 字节的数据，然后执行 {}{}buffer_tell{}{}，您将获得 1 的返回值。但是，如果您写入另一个数据片段 (也是 1 字节大小)，然后执行 {}{}buffer_tell{}{}，则会得到一个返回值 5，因为对齐已将数据 \\\" 填充 \\\" 到该位置。",
    "When you read or write data to a buffer using the&nbsp;{}{}buffer_read{}{} or&nbsp;{}{}buffer_write{}{}&nbsp;functions,&nbsp;the current \"seek\" position is advanced by the bytes written or read. For example, if your buffer alignment is set to 4 bytes and you write a single piece of data which is 1 byte in size then do a {}{}buffer_tell{}{}, you\u0027ll get a return value of 1. However, if you write another piece of data, also 1 byte in size, then do a {}{}buffer_tell{}{}, you\u0027ll get a return value of 5 as the alignment has \"padded\" the data to that position.":"当您使用 {}{}buffer_read{}{} 或 {}{}buffer_write{}{} 函数向缓冲区读取或写入数据时，当前 \" 查找 \" 位置会提前写入或读取的字节。例如，如果您的缓冲区对齐设置为 4 字节，并且您写入了 1 字节大小的单条数据，然后执行 {}{}buffer_tell{}{}，您将得到返回值 1。但是，如果您写入另一条数据，大小也是 1 个字节，然后执行 {}{}buffer_tell{}{}，您将得到返回值 5，因为对齐已将数据 \" 填充 \" 到该位置。"
}