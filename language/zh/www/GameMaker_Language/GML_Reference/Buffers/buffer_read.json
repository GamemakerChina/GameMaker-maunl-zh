{
    "A 16bit float. This can be a positive or negative value within the range of +/- 65504.":"16 位浮点数。这可以是 +/-65504 范围内的正值或负值。",
    "A 16bit float. This can be a positive or negative value within the range of +/- 65504. {}(Not currently supported!){}":"16位浮点数。这可以是+/-65504范围内的正值或负值。{}(当前不支持！){}",
    "A 32bit float. This can be a positive or negative value within the range of +/-16777216.":"32 位浮点数。这可以是 +/-16777216 范围内的正值或负值。",
    "A 64bit float.":"64 位浮点数。",
    "A boolean value, can only be either 1 or 0 ({}true{} or {}false{}). It is stored in a single byte (8bit)":"布尔值，只能是 1 或 0({}true{} 或 {}false{})。它以单字节 (8 位) 存储",
    "A boolean value. Can only be either 1 or 0 ({}true{} or {}false{})":"布尔值。只能是1或0({}true{}或{}false{})",
    "A signed, 16bit integer. This can be a positive or negative value from -32,768 to 32,767 (0 is classed as positive).":"有符号的 16 位整数。这可以是 -32,768 到 32,767 之间的正值或负值 (0 被归类为正值)。",
    "A signed, 32bit integer. This can be a positive or negative value from -2,147,483,648 to 2,147,483,647 (0 is classed as positive).":"有符号的 32 位整数。这可以是从 -2,147,483,648 到 2,147,483,647 的正值或负值 (0 被归类为正值)。",
    "A signed, 8bit integer. This can be a positive or negative value from -128 to 127 (0 is classed as positive).":"有符号的 8 位整数。这可以是 -128 到 127 之间的正值或负值 (0 被归类为正值)。",
    "A string of any size, including a final null terminating character":"任意大小的字符串，包括最后一个空终止字符",
    "A string of any size, without the final null terminating character":"不带最后一个空终止字符的任意大小的字符串",
    "A string of any size, without the final null terminating character.":"任意大小的字符串，没有最终的空终止字符。",
    "A string of any size.":"任意大小的字符串。",
    "After the function has executed the seek position is advanced by the number of bytes read. The next&nbsp;{}{}buffer_read{}{}&nbsp;will be done at this new position and will read the next byte(s) of data.":"函数执行后，查找位置会提前读取的字节数。下一个 {}{}buffer_read{}{} 将在这个新位置完成，并将读取下一个数据字节。",
    "An unsigned 64bit integer.":"无符号64位整数。",
    "An unsigned 64bit integer. This is a positive value from&nbsp;0 to 18,446,744,073,709,551,615.":"无符号的 64 位整数。这是从 0 到 18,446,744,073,709,551,615 之间的正值。",
    "An unsigned, 16bit integer. This is a positive value from 0 - 65,535.":"无符号的 16 位整数。这是一个从 0 到 65,535 之间的正值。",
    "An unsigned, 32bit integer. This is a positive value from 0 to 4,294,967,295.":"无符号的 32 位整数。这是一个从 0 到 4，294，967，295 的正值。",
    "An unsigned, 8bit integer. This is a positive value from 0 to 255.":"无符号的 8 位整数。这是一个从 0 到 255 的正值。",
    "Buffer Data Type Constant":"缓冲区数据类型常量",
    "First a new grow buffer with an initial size of 10240 bytes is created using&nbsp;{}{}buffer_create{}{}. At this point you can explicitly call&nbsp;{}{}buffer_seek{}{}&nbsp;to set the seek position to 0, but this isn\u0027t necessary since a newly created buffer\u0027s seek position is 0. Next the string {}\"Hello World\"{} is written to the buffer with a call to&nbsp;{}{}buffer_write{}{}. This advances the seek position by 12 bytes: 11 bytes for the characters of the string followed by a final null byte. After this, the string is read back from the buffer. To read the correct data, the seek position is first set back to 0 with a call to&nbsp;{}{}buffer_seek{}{}. The data is then read into a variable {}result{}&nbsp;using&nbsp;{}{}buffer_read{}{}, which is shown in a debug message.":"首先，使用 {}{}buffer_create{}{} 创建一个初始大小为 10240 字节的新增长缓冲区。此时，您可以显式调用 {}{}buffer_seek{}{} 将查找位置设置为 0，但这不是必需的，因为新创建的缓冲区的查找位置为 0。接下来是字符串 {}\"Hello World\"{} 通过调用 {}{}buffer_write{}{} 将 } 写入缓冲区。这会将查找位置提前 12 个字节：字符串字符前移 11 个字节，后跟最后一个空字节。之后，从缓冲区读回字符串。要读取正确的数据，首先通过调用 {}{}buffer_seek{}{} 将查找位置设置回 0。然后使用 {}{}buffer_read{}{} 将数据读入变量 {18}result{19}，并在调试消息中显示。",
    "If the function succeeds it will return a value of the given type, however if it fails then it will cause a runner error.":"如果函数成功，它将返回给定类型的值，但是如果失败，则将导致Runner错误。",
    "If the function succeeds it will return a value of the given type, however if it fails then it will cause a {}runner error{}.":"如果函数成功，它将返回给定类型的值，但如果失败，则会导致{}运行器错误{}。",
    "If the function succeeds, it will return a value of the given type, however if it fails then it will cause a {}runner error{}.":"如果函数成功，它将返回给定类型的值，但如果失败，则会导致 {} 运行器错误 {}。",
    "Since the function only reads the contents starting from the buffer\u0027s current {}seek position{}, you must ensure this is set correctly before calling the function - otherwise, you will get either incorrect results or nothing at all being returned.":"由于该函数仅读取从缓冲区的当前 {} 查找位置 {} 开始的内容，因此您必须确保在调用该函数之前设置正确 - 否则，您将得到不正确的结果或根本不返回任何结果。",
    "The above code creates a buffer, writes a string to it and reads it back.":"上面的代码创建一个缓冲区，向其中写入一个字符串并将其读回。",
    "The above code reads from the buffer with the id stored in the variable \"buff\" a signed 16bit value into the local variable \"cmd\".":"上面的代码使用存储在变量\" buff \"中的ID从缓冲区中读取一个有符号的16位值到局部变量\" cmd \"中。",
    "The buffer to read from.":"要读取的缓冲区。",
    "The index of the buffer to read from.":"要从中读取的缓冲区的索引。",
    "The return value depends on the type of data that you are reading, which can be&nbsp;one&nbsp;of the following constants:":"返回值取决于您正在读取的数据类型，可以是以下常量之一：",
    "The return value will depend on the type of data that you are reading, which in itself is defined by the following constants:":"返回值将取决于您正在读取的数据类型，该类型本身由以下常量定义：",
    "The type of data that is to be read from the buffer (see the list of constants above).":"要从缓冲区读取的数据类型(请参阅上面的常量列表)。",
    "The type of data to be read from the buffer (see the list of constants above).":"要从缓冲区读取的数据类型 (请参阅上面的常量列表)。",
    "This function can be used to read data from a previously created buffer. It will read the value at the buffer\u0027s current {}seek position{}.":"此函数可用于从先前创建的缓冲区中读取数据。它将在缓冲区的当前{}查找位置{}读取值。",
    "This function can be used to read data from a previously created buffer. The return value will depend on the type of data that you are reading, which in itself is defined by the following constants:":"此函数可用于从先前创建的缓冲区中读取数据。返回值将取决于您正在读取的数据类型，该类型本身由以下常量定义：",
    "This function reads a piece of data of the given type from the given buffer at the buffer\u0027s current&nbsp;{}seek position{}.":"此函数从给定缓冲区的当前 {} 查找位置 {} 读取给定类型的数据。",
    "{}NOTE{}&nbsp;Using the incorrect data type for the data being read will result in erroneous values being returned.":"{}注意{}对正在读取的数据使用不正确的数据类型将导致返回错误的值。",
    "{}{}NOTE{}{}&nbsp;Reading a&nbsp;{}buffer_s32{} or {}buffer_u32{} on HTML5 returns the value as a&nbsp;{}{}Real{}{}, which is a 64-bit double, as int32 is not supported on that platform.":"{}{} 注意{}{} 在 HTML5 上读取 {}buffer_s32{} 或 {}buffer_u32{} 会返回 {}{}Real{}{} 形式的值，该值是 64 位双精度值，就像 int32 一样该平台不支持。",
    "{}{}NOTE{}{}&nbsp;Using the incorrect data type for the data being read will result in erroneous values being returned.":"{}{}注意{}{} 对于正在读取的数据使用错误的数据类型将导致返回错误的值。",
    "{}{}NOTE{}{}&nbsp;You can use&nbsp;{}{}buffer_peek{}{}&nbsp;to get a value anywhere in the buffer without changing the seek position.":"{}{} 注意{}{} 您可以使用 {}{}buffer_peek{}{} 获取缓冲区中任意位置的值，而无需更改查找位置。"
}