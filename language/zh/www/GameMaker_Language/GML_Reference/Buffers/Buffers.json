{
    "A buffer is a region of physical memory used to temporarily hold data while it is being moved from one place to another or manipulated in some way, for example you can use a buffer to hold packet data awaiting transmission over a network or for storing a packet that has been received over a network. {}GameMaker{} has a number of specific functions related to creating, modifying and loading/saving buffers, but before using them please note the following points:":"缓冲区是物理内存的一个区域，用于在数据从一个地方移动到另一个地方或以某种方式进行操作时临时保存数据，例如，您可以使用缓冲区来保存等待通过网络传输的数据包数据，或者用于存储通过网络接收到的数据包。{}GameMaker{}有许多与创建、修改和加载/保存缓冲区相关的特定函数，但在使用它们之前，请注意以下几点：",
    "Buffers":"缓冲区",
    "Finally, you can also use special {}Vertex Buffers{} to create your own custom primitives or models, etc... You can find out more about these from the following section of the manual:":"最后，您还可以使用特殊的{}顶点缓冲区{}来创建自己的自定义原语或模型等...您可以从手册的以下部分中找到有关这些内容的更多信息:",
    "Primitive Building":"基元创建",
    "Some of the buffer functions also create a new buffer (like {}buffer_load{} for example). Remember that these buffers will also need to be removed from memory when not in use using the {}buffer_delete{} function.":"一些缓冲区函数还创建了一个新的缓冲区 (例如{}buffer_load{})。请记住，当不使用{}buffer_delete{}函数时，还需要从内存中删除这些缓冲区。",
    "Some of the buffer functions also create a new buffer (like&nbsp;{}{}buffer_load{}{} for example). Remember that these buffers will also need to be removed from memory when not in use using the&nbsp;{}{}buffer_delete{}{} function.":"一些 buffer 函数也会创建一个新的 buffer(例如 {}{}buffer_load{}{})。请记住，这些缓冲区在不使用时也需要使用 {}{}buffer_delete{}{} 函数从内存中删除。",
    "The \"Alignment\" argument refers to how data is stored within a buffer. If your alignment is set to say, 4, and you write a single piece of data which is 1 byte in size then do a {}buffer_tell{}, you\u0027ll get an offset of 1. However, if you write another piece of data, also 1 byte in size, then do a {}buffer_tell{}, you\u0027ll get an offset of 5 as the alignment has \"padded\" the data to that size. Alignment only affects {}where{} things are written to, so if you do a {}buffer_tell{} after you write something, it\u0027ll return the current write position which immediately follows the data you\u0027ve written. Note, however, that if you then write another piece of data, internally the buffer will move the write position along to the next multiple of the alignment size before actually writing the piece of data.":"\"Alignment\" 参数是指数据在缓冲区中的存储方式。如果你的对齐设置为 4，并且你写了一段大小为 1 字节的数据，然后执行{}buffer_tell{}，你的偏移量将为 1。但是，如果您再写一段数据，大小也是 1 字节，然后执行{}buffer_tell{}，则偏移量为 5，因为对齐已将数据 \"填充\" 到该大小。对齐仅影响写入{}内容的{}处，因此，如果您在写入内容后执行{}buffer_tell{}，它将返回紧随您写入的数据的当前写入位置。但是请注意，如果您随后写入另一段数据，则在实际写入该数据之前，缓冲区内部会将写入位置移动到对齐大小的下一个倍数。",
    "The \"Alignment\" argument refers to how data is stored within a buffer. If your alignment is set to say, 4, and you write a single piece of data which is 1 byte in size then do a {}{}buffer_tell{}{}, you\u0027ll get an offset of 1. However, if you write another piece of data, also 1 byte in size, then do a {}{}buffer_tell{}{}, you\u0027ll get an offset of 5 as the alignment has \"padded\" the data to that size. Alignment only affects {}where{} things are written to, so if you do a&nbsp;{}{}buffer_tell{}{}&nbsp;after you write something, it\u0027ll return the current write position which immediately follows the data you\u0027ve written. Note, however, that if you then write another piece of data, internally the buffer will move the write position along to the next multiple of the alignment size before actually writing the piece of data.":"\"对齐\"参数是指数据如何存储在缓冲区内。如果你的对齐设置为 4，你写了一个 1 字节大小的数据，然后执行 {}{}buffer_tell{}{}，你会得到一个偏移量 1。但是，如果您写入另一段数据，也是 1 字节大小，然后执行 {}{}buffer_tell{}{}，您将获得偏移量 5，因为对齐已将数据 \" 填充 \" 到该大小。对齐只影响 {} 写入 {} 的位置，所以如果你在写入内容后执行 {}{}buffer_tell{}{}，它将返回当前写入位置，紧跟在你写入的数据之后。但是，请注意，如果您随后写入另一段数据，则在实际写入该数据段之前，缓冲区将在内部将写入位置移动到对齐大小的下一个倍数。",
    "The \"size\" argument of the buffer functions always refers to the size {}in bytes{} of the buffer.":"缓冲区函数的 \"大小\" 参数总是指缓冲区的大小{}(以字节为单位)。",
    "The following functions exist for you to use with binary buffers in your games:":"以下函数可供您在游戏中与二进制缓冲区一起使用:",
    "The following pages explain how buffers work within the context of {}GameMaker{} and contain a couple of code examples for those users that are unsure of how to use them:":"以下页面解释了缓冲区如何在{}GameMaker{}的上下文中工作，并为那些不确定如何使用它们的用户提供了几个代码示例:",
    "The memory used for creating buffers is {}system memory{} so even when the game doesn\u0027t have focus, any data stored in a buffer should be safe, however if the app is closed or re-started then it will be lost.":"用于创建缓冲区的内存是{}系统内存{}所以即使游戏没有焦点，存储在缓冲区中的任何数据都应该是安全的，但是如果应用程序关闭或重新启动，它将丢失。",
    "There are also two extra functions related to buffers that can be used to save and load game states (note that they require a buffer to have been created previously):":"还有两个与缓冲区相关的额外函数，可用于保存和加载游戏状态 (请注意，它们需要以前创建的缓冲区):",
    "Using Buffers":"使用缓冲区",
    "When a buffer is created, it is automatically cleared and filled to 0.":"创建缓冲区时，它会自动清除并填充为0。",
    "When dealing with \"offset\", this is the value {}in bytes{} to offset the data by within the given buffer. So if your buffer is 2 byte aligned and you want to skip the first 4 aligned places, you would have an offset of {}2 * 4 bytes{}.":"当处理 \"offset\" 时，这是字节{}中的值{}，用于在给定缓冲区内偏移数据。因此，如果您的缓冲区是2字节对齐的，并且您想跳过前4个对齐位置，则您的偏移量为{}2*4字节{}。",
    "{}{}IMPORTANT!{}{} When you create a buffer, the index value used to identify it is an integer value starting at 0. These indices are re-used by GameMaker, so a destroyed buffer index value may be used by a newly created one afterwards, and we recommend that you set any variable that holds a buffer&nbsp;index to -1 after having destroyed the buffer.":"{}{}重要!{}{}创建缓冲区时，用于标识缓冲区的索引值是从0开始的整数值。这些索引由GameMaker重新使用，因此在之后新创建的缓冲区索引值可能会使用已销毁的缓冲区索引值，我们建议您在已销毁缓冲区后将任何保存缓冲区索引的变量设置为-1。",
    "{}{}IMPORTANT{}{} When you create a buffer, the index value used to identify it is an integer value starting at 0. These indices are re-used by {}GameMaker{}, so a destroyed buffer index value may be used by a newly created one afterwards, and we recommend that you set any variable that holds a buffer&nbsp;index to -1 after having destroyed the buffer.":"{}{} 重要{}{} 创建缓冲区时，用于标识缓冲区的索引值是从 0 开始的整数值。这些索引由 {}GameMaker{} 重复使用，因此已销毁的缓冲区索引值可能会被新创建的缓冲区索引值使用，我们建议您在销毁缓冲区后将保存缓冲区索引的任何变量设置为 -1。"
}