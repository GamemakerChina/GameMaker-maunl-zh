{
    "Alert (0x07)":"响铃符 (0x07)",
    "Another thing to note is that the Unicode character 9647 (\u25AF) is used to substitute any missing glyphs that you may have in your designated font when rendering it in the draw event. So if your font doesn\u0027t have, for example, the ° symbol, then writing 90° will actually produce 90\u25AF.":"另一件要注意的事情是，Unicode字符9647（\u25AF）被用来替代你在绘制事件中渲染指定字体时可能缺少的任何字形。因此，如果你的字体没有，比如说°符号，那么写90°实际上会产生90\u25AF。",
    "At some time when making your game you will need to use text. Text in games is dealt with by using the {}string{} functions (a string is just another way of saying a line of text) and {}GameMaker{} has a complete set of functions that permit you to manipulate strings in many ways, including the insertion of one string in another, the copying of strings and the ability to parse strings for the digits or the letters that they contain. In general a string can {}only{} be created by adding text within double quotes \" \" and {}single quote strings are not accepted{}, nor can you split the string over multiple lines and expect {}GameMaker{} to render it as if the line breaks were newlines (unless a {}string literal{} {}@{} identifier is used, as explained below).":"在制作游戏的过程中，有时你会需要使用文本。游戏中的文本是通过使用{}string{}函数来处理的（字符串只是表示一行文本的另一种方式），{}GameMaker{}有一套完整的函数，允许你以多种方式处理字符串，包括在另一个字符串中插入一个字符串，复制字符串，以及分析字符串中的数字或字母的能力。一般来说，一个字符串{}只能{}通过在双引号\"\"内添加文本来创建，{}不接受单引号字符串{}，也不能在多行上分割字符串，并期望{}GameMaker{}把它当作换行符来呈现（除非使用{}字符串字面{}{}@{}标识符，如下文所述）。",
    "Backslash itself (0x5c)":"反斜杠本身 (0x5c)",
    "Backspace (0x08)":"退格 (0x08)",
    "Carriage return":"回车",
    "Form Feed (0x0c)":"分页符 (0x0c)",
    "Horizontal Tab (0x09)":"水平制表符 (0x09)",
    "Insert Unicode character":"插入Unicode字符",
    "Insert hex literal character":"插入十六进制字符",
    "Insert octal Unicode character":"插入八进制的Unicode字符",
    "It is worth noting that there are certain conventions that you can use when creating strings, mostly concerned with using {}escape characters{}. These are characters that are preceded by a \"{}\\{}\" symbol. So, for example, if you wanted to put quotation marks within a string you would have something like this:":"值得注意的是，在创建字符串时可以使用某些约定，主要涉及使用{}转义字符{}。这些是前面带有“{}\\{}”符号的字符。例如，如果你想在一个字符串中加上引号，你可以这样做:",
    "Newline":"换行",
    "Other than those functions that relate specifically to strings, some targets&nbsp;also give you access to the clipboard to get and set text information:":"除了那些与字符串特别相关的函数之外，一些目标还允许您访问剪贴板来获取和设置文本信息:",
    "Strings":"字符串",
    "The above code will render the string over multiple lines as if there was a line break escape character included. A verbatim string literal is similar to previous GameMaker version string literals but they also use double or single quotes and must be prefixed by an {}@{} symbol, they can be broken over multiple lines in the code file and they DO NOT support escaped characters i.e. {}@\"Hello\\World\"{} will {}not{} try to escape the W on World and will be stored verbatim. Note though that when using string literals like this, you will need to break the string if you wish to include quotation marks as part of the string, ie:":"上面的代码将在多行上渲染字符串，就像有一个断行转义字符一样。逐字字符串与以前GameMaker版本的字符串字面意义相似，但它们也使用双引号或单引号，并且必须以{}@{}符号为前缀，它们可以在代码文件中分多行，并且不支持转义字符，即{}@\"Hello/World\"{}将{}不会{}尝试转义World上的W，而是逐字存储。但是请注意，当使用这样的字符串字面时，如果你想把引号作为字符串的一部分，你将需要断开字符串，即。",
    "The following list of functions are all for dealing with strings:":"下面的函数列表全部用于处理字符串:",
    "Vertical Tab (0x0b)":"垂直制表符 (0x0b)",
    "You can also create verbatim {}string literals{} by preceding the whole string with the {}@{} character:":"您还可以通过在整个字符串前面加上{}@{}字符来逐字创建{}字符串文字{}:",
    "as just using \"{}\\u00e2a{}\" would actually result in the Unicode character \"{}ส{}\" (essentially becoming \"{}\\ue2a{}\").{}{}":"正如只使用“{} \\u00e2a {}”实际上会导致 Unicode字符“{}ส{}”(本质上变成“{} ue2a {}”){}{}",
    "or":"或",
    "{}GameMaker{} also has full four byte wide Unicode character support, allowing you to decode and encode Unicode characters in the upper bounds of the standard (including - but not limited to - emoji). To deal with Unicode characters, you can use the \"{}\\{}\" to precede any Unicode literal - digits of hex preceded a \"{}u{}\", for example \"{}{}\\u00e2{}{}\" for \"á\"- where the digits are the number of the Unicode character. When working with Unicode in this way, you need to be aware of the fact that {}GameMaker{} will interpret {}all{} digits following the \"{}u{}\", so if you wanted to write \"áa\" for example, you should use:":"{}GameMaker{}也有完整的四字节宽的Unicode字符支持，允许你解码和编码标准上限的Unicode字符（包括-但不限于-表情符号）。为了处理Unicode字符，你可以在任何Unicode字面十六进制数字前使用\"{}\\{}{}u{}\"，例如\"{}{}\\u00e2{}{}\"代表 \"á\"--其中的数字是Unicode字符的编号。当以这种方式处理Unicode时，你需要注意的是，{}GameMaker{}将解释{}所有{}\"{}u{}\"后面的数字，所以如果你想写 \"áa\"，你应该使用。",
    "{}GameMaker{} can also handle any hexadecimal literal - normally written as digits of hex following \"{}0x{}\", for example \"{}0xff{}\", where the digits are the number of the character to use. In {}GameMaker{} these are written using \"{}\\x{}\" and then the hex value. These and other predefined escape characters are listed in the table below:":"{} GameMaker {}还可以处理任何十六进制文字——通常写作“{}0x{}”后面的十六进制数字，例如“{}0xff {}”，其中这些数字是要使用的字符号。在{} GameMaker {}中，使用“{} x {}”和十六进制值编写。下表列出了这些和其他预定义转义字符:",
    "{}NOTE{}: Strings support form feed, vertical tab etc... but this does not mean to say that {}rendering{} does, and when drawing strings these characters may be ignored.":"{}注意{} : 字符串支持表单提要、垂直选项卡等..但这并不意味着{}呈现{}就是这样，而且在绘制字符串时可以忽略这些字符。"
}