{
    "A string is a type of {}variable{}. The simplest way to create one is by adding text within double quotes {}\" \"{}:":"字符串是一种{}变量{}。最简单的创建方法是在双引号 {}\"\"{} 中添加文本：",
    "Alert (0x07)":"响铃符 (0x07)",
    "Another thing to note is that the Unicode character 9647 (\u25AF) is used to substitute any missing glyphs that you may have in your designated font when rendering it in the draw event. So if your font doesn\u0027t have, for example, the ° symbol, then writing 90° will actually produce 90\u25AF.":"另一件要注意的事情是，Unicode字符9647(\u25AF)被用来替代你在绘制事件中渲染指定字体时可能缺少的任何字形。因此，如果你的字体没有，比如说°符号，那么写90°实际上会产生90\u25AF。",
    "At some time when making your game you will need to use text. Text in games is dealt with by using the {}string{} functions (a string is just another way of saying a line of text) and {}GameMaker{} has a complete set of functions that permit you to manipulate strings in many ways, including the insertion of one string in another, the copying of strings and the ability to parse strings for the digits or the letters that they contain. In general a string can {}only{} be created by adding text within double quotes \" \" and {}single quote strings are not accepted{}, nor can you split the string over multiple lines and expect {}GameMaker{} to render it as if the line breaks were newlines (unless a {}string literal{} {}@{} identifier is used, as explained below).":"在制作游戏的过程中，有时你会需要使用文本。游戏中的文本是通过使用{}string{}函数来处理的(字符串只是表示一行文本的另一种方式)，{}GameMaker{}有一套完整的函数，允许你以多种方式处理字符串，包括在另一个字符串中插入一个字符串，复制字符串，以及分析字符串中的数字或字母的能力。一般来说，一个字符串{}只能{}通过在双引号\"\"内添加文本来创建，{}不接受单引号字符串{}，也不能在多行上分割字符串，并期望{}GameMaker{}把它当作换行符来呈现(除非使用{}字符串字面{}{}@{}标识符，如下文所述)。",
    "Backslash itself (0x5c)":"反斜杠本身 (0x5c)",
    "Backspace (0x08)":"退格 (0x08)",
    "Below is the list of functions for dealing with strings.":"下面是处理字符串的函数列表。",
    "Carriage return":"回车",
    "Carriage return (0x0d)":"回车 (0x0d)",
    "Character Code":"字符串编码",
    "Clipboard":"剪贴板",
    "Creating Strings":"创建字符串",
    "Data Type":"数据类型",
    "Debugging:&nbsp;{}{}show_debug_message{}{}&nbsp;and&nbsp;{}{}show_debug_message_ext{}{}":"调试：{}{}show_debug_message{}{} 和 {}{}show_debug_message_ext{}{}",
    "Drawing-Related":"与绘制相关的",
    "Escape Characters":"转义字符",
    "Form Feed (0x0c)":"分页符 (0x0c)",
    "Function Reference":"函数参考",
    "Horizontal Tab (0x09)":"水平制表符 (0x09)",
    "In GML, text is created as a&nbsp;{}string{}, which can be stored in a variable. \"String\" refers to&nbsp;a \"{}string{} of characters\" which makes up your text.":"在 GML 中，文本被创建为{}字符串{}，可以存储在变量中。\"字符串\"是指组成文本的\"{}字符串{}字符\"。",
    "Insert Unicode character":"插入Unicode字符",
    "Insert hex literal character":"插入十六进制字符",
    "Insert octal Unicode character":"插入八进制的Unicode字符",
    "It also has more advanced functions to deal with strings, including trimming, splitting into an array, concatenating from an array and iterating over characters.":"它还具有更高级的字符串处理函数，包括修剪、拆分成数组、从数组连接和迭代字符。",
    "It is worth noting that there are certain conventions that you can use when creating strings, mostly concerned with using {}escape characters{}. These are characters that are preceded by a \"{}\\{}\" symbol. So, for example, if you wanted to put quotation marks within a string you would have something like this:":"值得注意的是，在创建字符串时可以使用某些约定，主要涉及使用{}转义字符{}。这些是前面带有“{}\\{}”符号的字符。例如，如果你想在一个字符串中加上引号，你可以这样做:",
    "Iteration":"重复",
    "Just using \"{}\\u00e2a{}\" would actually result in the Unicode character \"{}ส{}\" (essentially becoming \"{}\\ue2a{}\").{}{}":"只使用 \"{}\\u00e2a{}\" 实际上会产生 Unicode 字符 \"{}ส{}\"( 实质上变成 \"{}\\ue2a{}\")。",
    "Lastly,&nbsp;{}GameMaker{}&nbsp;also provides a convenient way to convert&nbsp;{}structs{}&nbsp;and&nbsp;{}instances{}&nbsp;to a string representation by assigning them a&nbsp;{} {}.":"最后，{}GameMaker{} 还提供了一种便捷的方法来转换{}结构{}和{}实例{}到字符串表示形式，方法是为它们分配一个{}{}。",
    "Lastly,&nbsp;{}GameMaker{}&nbsp;also provides a convenient way to convert&nbsp;{}structs{}&nbsp;and&nbsp;{}instances{}&nbsp;to a string representation by assigning them a&nbsp;{}toString() Method{}.":"最后，{}GameMaker{} 还提供了一种便捷的方法来转换{}结构{}和{}实例{}到字符串表示形式，是为它们分配一个 {}toString() 方法{}。",
    "Manipulating Strings":"操作字符串",
    "Methods":"方法",
    "Multi-Line String Literal":"多行字符串文字",
    "Multi-line string literals do not support escaped characters, e.g. {}@\"Hello\\World\"{} will {}not{} try to escape the W on World and will be stored verbatim. Note though that when using string literals like this, you will need to break the string if you wish to include quotation marks as part of the string, e.g.:":"多行字符串文字不支持转义字符，例如，{}@\"Hello\\World\"{} 将 {} 不会 {} 尝试对 World 上的 W 进行转义，并将逐字存储。但请注意，在使用这样的字符串文字时，如果希望将引号作为字符串的一部分，则需要断开字符串，例如：",
    "Newline":"换行",
    "Other than those functions that relate specifically to strings, some targets&nbsp;also give you access to the clipboard to get and set text information:":"除了那些与字符串特别相关的函数之外，一些目标还允许您访问剪贴板来获取和设置文本信息:",
    "Related functions":"相关函数",
    "Searching and Information":"搜索和信息",
    "Sometimes you will need to add special characters inside a string, such as double quotes {}\"{}, newline characters or characters with a specific character code.":"有时，您需要在字符串中添加特殊字符，如双引号 {}\"{}、换行符或具有特定字符代码的字符。",
    "String Basics":"字符串基础",
    "Strings":"字符串",
    "Text":"文本",
    "The above code will create a string that is rendered over multiple lines as if there was a line break escape character included. A string literal can also be defined using single quotes {}\u0027 \u0027{} when prefixed by an {}@{} symbol.":"上面的代码将创建一个字符串，该字符串在多行中呈现，就像包含换行符一样。字符串文字也可以使用单引号 {}\u0027 \u0027{} 定义，如果前面加一个 {}@{} 符号的话。",
    "The above code will render the string over multiple lines as if there was a line break escape character included. A verbatim string literal is similar to previous GameMaker version string literals but they also use double or single quotes and must be prefixed by an {}@{} symbol, they can be broken over multiple lines in the code file and they DO NOT support escaped characters i.e. {}@\"Hello\\World\"{} will {}not{} try to escape the W on World and will be stored verbatim. Note though that when using string literals like this, you will need to break the string if you wish to include quotation marks as part of the string, ie:":"上面的代码将在多行上渲染字符串，就像有一个断行转义字符一样。逐字字符串与以前GameMaker版本的字符串字面意义相似，但它们也使用双引号或单引号，并且必须以{}@{}符号为前缀，它们可以在代码文件中分多行，并且不支持转义字符，即{}@\"Hello/World\"{}将{}不会{}尝试转义World上的W，而是逐字存储。但是请注意，当使用这样的字符串字面时，如果你想把引号作为字符串的一部分，你将需要断开字符串，即。",
    "The above line of code creates a string that reads \"Hello World!\" and assigns it to a variable called&nbsp;{}my_first_string{}.":"上面的代码行创建了一个字符串，其内容为 \"Hello World!\" 并将其赋给名为 {}my_first_string{} 的变量。",
    "The following list of functions are all for dealing with strings:":"下面的函数列表全部用于处理字符串:",
    "This can be done by using {}escape characters{}. These are characters that are preceded by a backslash&nbsp;{}\\{}&nbsp;symbol. For example, if you wanted to put quotation marks within a string you would have something like this:":"这可以通过使用{}转义字符{}来完成。这些字符前面有一个反斜杠 {}\\{} 符号。例如，如果您想要在字符串中加引号，则应该是这样的：",
    "To deal with Unicode characters, you can use a backslash&nbsp;{}\\{}&nbsp;to precede any Unicode literal - digits of hex preceded by a \"{}u{}\", for example \"{}{}\\u00e2{}{}\" for \"á\"- where the digits are the number of the Unicode character. When working with Unicode in this way, you need to be aware of the fact that {}GameMaker{} will interpret {}all{} digits following the \"{}u{}\", so if you wanted to write \"áa\" for example, you should use:":"要处理Unicode字符，您可以使用反斜杠{}\\{}在十六进制的任何Unicode文字数字之前加上\"{}u{}\"，例如，\"{}{}\\u00e2{}{}\"代表\"á\"，其中数字是Unicode字符的编号。在以这种方式使用Unicode时，您需要注意这样一个事实：{}GameMaker{}将解释\"{12}u{13}\"后面的{}所有{}数字，因此，如果您想要写\"áa\"，例如，您应该使用：",
    "Vertical Tab (0x0b)":"垂直制表符 (0x0b)",
    "When a reference to a struct or an instance of an object is passed as an argument to any of&nbsp;{}{}string{}{}&nbsp;/ {}{}string_ext{}{}&nbsp;/&nbsp;{}{}show_debug_message{}{}&nbsp;/ {}{}show_debug_message_ext{}{}, it will have its {}toString{} method called, if it has one set.":"当将对对象的结构或实例的引用作为参数传递给 {}{}string{}{}/{}{}string_ext{}{}/{}{}show_debug_message{}{}/{}{}show_debug_message_ext{}{} 中的任何一个时，将调用其 {}toString{} 方法 (如果设置了一个方法)。",
    "When you want to use text in your game, whether it\u0027s for dialogue, menus, or just debugging, use&nbsp;{}strings{}.":"如果您希望在游戏中使用文本，无论是用于对话、菜单还是仅用于调试，请使用{}字符串{}。",
    "You can also create verbatim {}string literals{} by preceding the whole string with the {}@{} character:":"您还可以通过在整个字符串前面加上{}@{}字符来逐字创建{}字符串文字{}:",
    "You can create multi-line string literals by preceding the whole string with the {}{}{}@{} character:":"您可以通过在整个字符串前面加上 {}{}{}@{} 字符来创建多行字符串文字：",
    "You can pass a struct reference to one of the above functions for its {}toString(){} method to be used, however for instances you must use {}self{} within its scope, as passing an instance ID will not call its {}toString(){} method.":"您可以将结构引用传递给上述函数之一以使用其 {}toString(){} 方法，但对于实例，您必须在其作用域内使用 {}self{}，因为传递实例 ID 不会调用其 {}toString(){} 方法。",
    "You\u0027re not required to convert a struct or instance to a string with {}{}string(){}{} if you want to draw it. Simply passing a valid reference to&nbsp;{}{}draw_text{}{}&nbsp;or {}any of the related {}draw_text_{} functions{} will automatically convert it to a string:&nbsp;":"如果要绘制结构或实例，则不需要使用 {}{}string(){}{} 将其转换为字符串。只需传递对 {}{}draw_text{}{} 或 {} 任何相关的 {}draw_text_{} 函数 {} 的有效引用即可自动将其转换为字符串：",
    "as just using \"{}\\u00e2a{}\" would actually result in the Unicode character \"{}ส{}\" (essentially becoming \"{}\\ue2a{}\").{}{}":"正如只使用“{} \\u00e2a {}”实际上会导致 Unicode字符“{}ส{}”(本质上变成“{} ue2a {}”){}{}",
    "or":"或",
    "toString() Method":"toString() 方法",
    "{}GameMaker{} also has full four byte wide Unicode character support, allowing you to decode and encode Unicode characters in the upper bounds of the standard (including - but not limited to - emoji).":"{}GameMaker{} 还支持完整的四字节宽 Unicode 字符，允许您解码和编码标准上限的 Unicode 字符 (包括但不限于表情符号)。",
    "{}GameMaker{} also has full four byte wide Unicode character support, allowing you to decode and encode Unicode characters in the upper bounds of the standard (including - but not limited to - emoji). To deal with Unicode characters, you can use the \"{}\\{}\" to precede any Unicode literal - digits of hex preceded a \"{}u{}\", for example \"{}{}\\u00e2{}{}\" for \"á\"- where the digits are the number of the Unicode character. When working with Unicode in this way, you need to be aware of the fact that {}GameMaker{} will interpret {}all{} digits following the \"{}u{}\", so if you wanted to write \"áa\" for example, you should use:":"{}GameMaker{}也有完整的四字节宽的Unicode字符支持，允许你解码和编码标准上限的Unicode字符(包括-但不限于-表情符号)。为了处理Unicode字符，你可以在任何Unicode字面十六进制数字前使用\"{}\\{}{}u{}\"，例如\"{}{}\\u00e2{}{}\"代表 \"á\"--其中的数字是Unicode字符的编号。当以这种方式处理Unicode时，你需要注意的是，{}GameMaker{}将解释{}所有{}\"{}u{}\"后面的数字，所以如果你想写 \"áa\"，你应该使用。",
    "{}GameMaker{} can also handle any hexadecimal literal - normally written as digits of hex following \"{}0x{}\", for example \"{}0xff{}\", where the digits are the number of the character to use. In {}GameMaker{} these are written using \"{}\\x{}\" and then the hex value. These and other predefined escape characters are listed in the table below:":"{} GameMaker {}还可以处理任何十六进制文字——通常写作“{}0x{}”后面的十六进制数字，例如“{}0xff {}”，其中这些数字是要使用的字符号。在{} GameMaker {}中，使用“{} x {}”和十六进制值编写。下表列出了这些和其他预定义转义字符:",
    "{}GameMaker{} can also handle any hexadecimal literal - normally written as digits of hex following \"{}0x{}\", for example \"{}0xff{}\", where the digits form the character code of the character to use. In {}GameMaker{}&nbsp;strings, these are written using \"{}\\x{}\" and then the hex value. These and other predefined escape characters are listed in the table below:":"{}GameMaker{} 还可以处理任何十六进制文字-通常写为 \"{}0x{}\" 后面的十六进制数字，例如 \"{}0xff{}\"，其中数字形成要使用的字符的字符代码。在 {}GameMaker{} 字符串中，这些字符串使用 \"{}\\x{}\"，然后是十六进制值。下表列出了这些字符和其他预定义的转义字符：",
    "{}GameMaker{} has a complete set of functions that permit you to manipulate&nbsp;{}strings{} in many ways, including the insertion of one string in another, the copying of strings and the ability to parse&nbsp;{}strings{} for the digits or the letters that they contain.":"{}GameMaker{} 有一套完整的函数，允许您以多种方式操作{}字符串{}，包括在另一个字符串中插入字符串、复制字符串以及分析{}字符串{}中包含的数字或字母。",
    "{}NOTE{}: Strings support form feed, vertical tab etc... but this does not mean to say that {}rendering{} does, and when drawing strings these characters may be ignored.":"{}注意{} : 字符串支持表单提要、垂直选项卡等..但这并不意味着{}呈现{}就是这样，而且在绘制字符串时可以忽略这些字符。",
    "{}Strings{}":"{}字符串{}",
    "{}{}IMPORTANT{}{}&nbsp;In&nbsp;{}GameMaker{},&nbsp;string positions start at 1 (meaning they are&nbsp;{}one-based{}), compared to other data types in {}GameMaker{}, which are all&nbsp;{}zero-based{}&nbsp;(starting at 0). So the first character in a string has a position of 1, the second character a position of 2, and so on. The last character is {}{}string_length{}(string){}.":"{}{}重要{}{} 与 {}GameMaker{} 中的其他数据类型都是{10}从 0{11} 开始的其他数据类型相比，{}GameMaker{} 中的字符串位置从 1 开始(表示它们从{6}从1{7}开始)。因此，字符串中的第一个字符的位置为 1，第二个字符的位置为 2，依此类推。最后一个字符是{}{}string_length{}(string){}。",
    "{}{}NOTE{}{}&nbsp;Single quote strings {}\u0027 \u0027{} are not accepted.":"{}{}注意{}{} 不接受单引号字符串 {}\u0027 \u0027{}。",
    "{}{}NOTE{}{}&nbsp;Strings support form feed, vertical tab etc... but this does not mean to say that {}rendering{} does, and when drawing strings these characters may be ignored.":"{}{}注意{}{} 字符串支持换页、垂直制表符等...。但这并不意味着可以{}呈现{}，在绘制字符串时，这些字符可能会被忽略。",
    "{}{}NOTE{}{}&nbsp;The Unicode character 9647 (\u25AF) is used to substitute any missing {}glyph{}s that you may have in your designated font when rendering it in the draw event. So if your font doesn\u0027t have, for example, the ° symbol, then writing 90° will actually produce 90\u25AF.":"{}{}注意{}{} 在绘制事件中呈现时，Unicode 字符 9647(\u25AF) 用于替换指定字体中可能缺少的任何 {} 字形 {}。例如，如果你的字体没有 ° 符号，那么写 90° 实际上会产生 90\u25AF。",
    "{}{}NOTE{}{}&nbsp;You cannot split a string over multiple lines in your code and expect {}GameMaker{} to render it as if the line breaks were newlines, however, you can do that by using a string literal&nbsp;identifier&nbsp;{}{}@{}{}&nbsp;before your string\u0027s starting quotation mark, as {}explained below{}.":"{}{}注意{}{} 您不能在代码中将一个字符串拆分为多行，并期望 {}GameMaker{} 将其呈现为换行符，但是，您可以通过使用字符串标识符 {}{}@{}{} 之前在您的字符串的开始引号来做到这一点，如下面的{}所述。",
    "{}{}TIP{}{} Arrays are automatically converted to a string representation when they are passed to one of the above functions, without needing to assign a custom function to the array.":"{}{}提示{}{} 当将数组传递给上述函数之一时，它们会自动转换为字符串表示形式，而不需要为数组分配自定义函数。"
}