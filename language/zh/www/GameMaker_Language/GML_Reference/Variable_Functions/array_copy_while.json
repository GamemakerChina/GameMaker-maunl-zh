{
    "Finally the result is stored in the variable {}array_up_to_stop{}, which should only contain {}\"9\"{}, {}\"8\"{} and {}\"7\"{}, in that order, as the array was traversed in reverse.":"最后，结果存储在变量 {}array_up_to_stop{} 中，该变量应该只包含按该顺序排列的 {}\"9\"{}、{}\"8\"{} 和 {}\"7\"{}，因为该数组是反向遍历的。",
    "The above code first creates an array {}array{}&nbsp;that stores strings containing the first 9 digits, with the string \"STOP\" in between.":"上面的代码首先创建一个数组 {}array{}，该数组存储包含前 9 位数字的字符串，其间带有字符串 \"STOP\"。",
    "The array to use":"要使用的数组",
    "The function stops execution as soon as the predicate function returns {}false{}. The first element for which the predicate function returns {}false{}&nbsp;and any elements that come after it are&nbsp;{}not{} added to the new array.":"只要判断函数返回 {}false{}，该函数就停止执行。判断函数为其返回 {}false{} 的第一个元素以及其后的所有元素都{}不会{}添加到新数组中。",
    "The offset parameter is set to -1 and the length to -{}infinity{}. This will start iterating over the values backwards starting at the last array index.":"偏移量参数设置为 -1，长度设置为 -{}infinity{}。这将从最后一个数组索引开始向后迭代这些值。",
    "The&nbsp;{}Predicate Function{}&nbsp;to run on each element":"对每个元素运行的{}判断函数{}",
    "Then the function&nbsp;{}{}array_copy_while{}{}&nbsp;is called on this array, with a predicate function that returns {}true{}&nbsp;if the element is {}not equal{} to the string \"STOP\".":"然后，函数 {}{}array_copy_while{}{} 是调用该数组，如果 {}element{} 不等于字符串 \"STOP\"，则使用判断函数返回 {}true{}。",
    "This function creates a {}new{} array and adds elements of the input array to it {}while{} (or {}as long as{}) the predicate function returns {}true{}.":"该函数创建了一个{}新的{}数组，并将输入数组的元素添加到其中，{}同时{}(或{}只要{})判断函数返回{}true{}。",
    "{}{}NOTE{}{}&nbsp;This function is identical to&nbsp;{}{}array_filter{}{}&nbsp;with the difference that this function stops execution after the first time the predicate function returns {}false{}. {}array_filter{}&nbsp;on the other hand continues to check elements, even after encountering an element for which the predicate function returns&nbsp;{}false{}.":"{}{}注意{}{} 此函数与 {}{}array_filter{}{} 相同，不同之处在于此函数在第一次判断函数返回 {}false{} 后停止执行。另一方面，{}array_filter{} 继续检查元素，即使在遇到判断函数返回 {}false{} 的元素之后也是如此。",
    "{}{}OPTIONAL{}{}&nbsp;The number of elements to traverse. A negative value will traverse the array backwards (i.e. in descending order of indices, e.g. 2, 1, 0 instead of 2, 3, 4). See:&nbsp;{}Offset And Length{}":"{}{}可选{}{} 要遍历的元素数。负值将向后遍历数组(即以索引的降序，例如2、1、0而不是2、3、4)。请参阅：{}偏移量和长度{}",
    "{}{}OPTIONAL{}{}&nbsp;The offset, or starting index, in the array. Setting a negative value will count from the end of the array. The starting index will then be {}array_length(array) + offset{}. See:&nbsp;{}Offset And Length{}":"{}{}可选{}{} 数组中的偏移量或起始索引。设置负值将从数组的末尾开始计数。然后，起始索引将是 {}array_length(array) + offset{}。请参阅：{}偏移量和长度{}"
}