{
    "First a simple&nbsp;{}vec3{} struct is defined, which stores an&nbsp;{}x{}, {}y{} and {}z{} variable, as well as two static methods&nbsp;{}add{} and {}dot{}. A new struct {}_v1{} is created from this. Next, both {}_v1{}\u0027s and its static struct\u0027s variable names are retrieved using&nbsp;{}{}struct_get_names{}{}. The two arrays are then concatenated using a call to&nbsp;{}{}array_concat{}{}. Finally, a debug message shows the contents of this new array, that contains {}all{}&nbsp;of the struct\u0027s variable names.":"首先定义一个简单的 {}vec3{} 结构，其中存储 {}x{}、{}y{} 和 {}z{} 变量，以及两个静态方法 {}add{} 和 {}dot{}。 由此创建一个新的结构体 {}_v1{}。 接下来，使用 {}{}struct_get_names{}{} 检索 {14}_v1{15} 及其静态结构的变量名称。 然后，通过调用 {}{}array_concat{}{} 连接两个数组。 最后，调试消息显示这个新数组的内容，其中包含结构体的 {} 所有 {} 变量名称。",
    "The above code first creates a temporary struct variable {}_my_struct{}&nbsp;with two variables in it: {}a{} and {}str{}.&nbsp;Next,&nbsp;{}{}struct_get_names{}{}&nbsp;is called to get an array with the variable names for the given struct. These are displayed. Finally, a for loop is used to loop through all the variable names in the array and to look up the corresponding value in the struct {}by name{} using {}{}struct_get{}{}. For each&nbsp;of these key-value pairs,&nbsp;a debug message is shown using {}{}show_debug_message{}{}.":"上面的代码首先创建一个临时结构变量 {}_my_struct{}，其中包含两个变量：{}a{} 和 {}str{}。 接下来，调用 {}{}struct_get_names{}{} 以获取包含给定结构的变量名称的数组。 这些都被显示出来。 最后，使用 for 循环循环遍历数组中的所有变量名称，并使用 {}{}struct_get{}{} 在结构体中{10}按名称{11}查找相应的值。 对于每个键值对，都会使用 {}{}show_debug_message{}{} 显示调试消息。",
    "The above code will retrieve an array of the variable names for the given struct and then display these along with their values in the debug output.":"上面的代码将检索给定结构的变量名数组，然后在调试输出中显示这些变量名及其值。",
    "The extended example above shows how to include static variable names by retrieving a struct\u0027s static struct and appending those variable names to the array&nbsp;of variable names.":"上面的扩展示例显示了如何通过检索结构的静态结构并将这些变量名追加到变量名数组来包含静态变量名。",
    "The struct reference to check.":"要检查的结构引用。",
    "This function returns an array with the variable names from a struct.":"此函数返回一个数组，其中包含结构中的变量名。",
    "With this function you can retrieve an array populated with the variable names from a struct. You pass in the struct reference to check, and each entry in the array will be a {}string{} of the variable names that the struct contains.":"使用此函数，您可以从结构中检索用变量名填充的数组。您传入struct引用以进行检查，并且数组中的每个条目都将是该struct包含的变量名称的{}字符串{}。",
    "You pass in the struct reference to check, and each entry in the array will be a&nbsp;{}{}String{}{}&nbsp;of the variable names that the struct contains.":"传入要检查的结构体引用，数组中的每个条目都将是该结构体包含的变量名的 {}{}String{}。",
    "{}{}Array{}{} (each entry is a {}{}String{}{})":"{}{}Array{}{}(每个条目都是{}{}字符串{}{})",
    "{}{}NOTE{}{}&nbsp;In case the struct gets static variables from a chain or hierarchy of static structs you\u0027ll need to traverse the chain&nbsp;of static structs to get the names of {}all{} static variables.":"{}{} 注意 {}{} 如果结构从静态结构的链或层次结构中获取静态变量，则需要遍历静态结构的链以获取 {} 所有 {} 静态变量的名称。",
    "{}{}NOTE{}{}&nbsp;The order of the variable names returned in the array is not guaranteed and may not match the order in which the struct variables were initialised. As such you should not rely on the order of the names returned.":"{}{}注意{}{}：数组中返回的变量名称的顺序是不保证的，可能与结构体变量初始化的顺序不匹配。因此，你不应依赖于返回名称的顺序。",
    "{}{}NOTE{}{}&nbsp;This function doesn\u0027t&nbsp;return the {}static{} variables&nbsp;of the struct. These belong to its&nbsp;{}Static Struct{}, that you can get using&nbsp;{}{}static_get{}{}.":"{}{} 注意 {}{} 此函数不返回结构的 {} 静态 {} 变量。 这些属于其 {} 静态结构 {}，您可以使用 {}{}static_get{}{} 获取。"
}