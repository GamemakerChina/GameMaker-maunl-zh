{
    "Accessing a variable through a hash allows for faster access when using a string, compared to using the {}struct[$ \"string\"]{} syntax.":"与使用 {}struct[$ \"string\"]{} 语法相比，通过哈希访问变量可以在使用字符串时实现更快的访问速度。",
    "Accessing a variable through a hash allows for faster access when using a string, compared to using the {}struct[? \"string\"]{} syntax.":"与使用 {}struct[? \"string\"]{} 相比，通过散列访问变量可以在使用字符串时更快地访问。",
    "The above code first creates a struct {}point{}&nbsp;with an {}x{} and {}y{} variable in it. Next, the hash for the variable name \"x\" is then retrieved using&nbsp;{}{}variable_get_hash{}{}. After that, a repeat loop is executed a total&nbsp;of 1000 times. Every iteration&nbsp;of the repeat loop&nbsp;assigns a new random value to the point\u0027s x coordinate. This is done using&nbsp;{}{}struct_set_from_hash{}{}&nbsp;to&nbsp;optimise this&nbsp;operation.":"上面的代码首先创建一个结构 {}point{} ，其中包含一个 {}x{} 和 {}y{} 变量。接下来，使用 {}{}variable_get_hash{}{} 检索变量名 \"x\" 的散列。在此之后，重复循环总共执行 1000 次。重复循环的每一次迭代都会为点的 x 坐标分配一个新的随机值。这是在此操作中完成的。 使用 {}{}struct_set_from_hash{}{} 可以进一步优化",
    "The hash&nbsp;of the variable to set (as returned by&nbsp;{}{}variable_get_hash{}{})":"要设置的变量的哈希(由 {}{}variable_get_hash{}{} 返回)",
    "The struct reference to set":"要设置的结构引用",
    "The value to assign to the struct variable":"要分配给结构变量的值",
    "This function sets the value of the&nbsp;struct member referred to by the given hash, returned by an earlier call to&nbsp;{}{}variable_get_hash{}{}.":"此函数用于设置给定散列引用的结构成员的值，该值由先前调用 {}{}variable_get_hash{}{} 返回。",
    "{}{}NOTE{}{}&nbsp;The compiler automatically replaces variable names that it detects cannot ever change while your game is running (i.e. they are {}constant at compile time{}) with their hash value. It can be useful to get the hash yourself if you only know the name of the variable that\u0027s accessed while your game is running (i.e. {}at runtime{}).&nbsp;See&nbsp;{}Compiler Optimisations{}.":"{}{}注意{}{}：编译器会自动将其检测到在游戏运行期间不会发生变化的变量名称（即，它们在编译时是 {}常量{}）替换为它们的哈希值。如果你只知道游戏运行时访问的变量的名称（即 {}运行时{}），获取哈希值可能会很有用。请参见 {}编译器优化{}。"
}