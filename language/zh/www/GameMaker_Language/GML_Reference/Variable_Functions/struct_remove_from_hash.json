{
    "First, an array of structs {}arr_party_stats{} is initialised. Each struct contains two variables:&nbsp;{}hp{} and {}mp{}. Then, the variable name to remove is chosen randomly at runtime with a call to&nbsp;{}{}choose{}{}. The compiler cannot replace the variable name with its corresponding hash value here, as it cannot know at compile time what the output of the&nbsp;{}{}choose{}{} function is going to be. This situation can still be optimised if you get the hash yourself at runtime with a call to&nbsp;{}{}variable_get_hash{}{}. The result of this function call is stored in a temporary variable&nbsp;{}_hash{}. Finally, the variable is removed from every struct in the array by calling&nbsp;{}{}struct_remove_from_hash{}{} in a repeat loop. The same hash value can be used with every call to the function, since the variable name is the same every time.":"首先，初始化一个结构体数组 {}arr_party_stats{}。每个结构体包含两个变量：{}hp{} 和 {}mp{}。然后，在运行时通过调用 {}{}choose{}{} 随机选择要删除的变量名称。编译器无法将变量名称替换为其对应的哈希值，因为它无法在编译时知道 {}{}choose{}{} 函数的输出是什么。即使如此，你仍然可以在运行时通过调用 {}{}variable_get_hash{}{} 自行获取哈希值来优化这种情况。此函数调用的结果存储在临时变量 {}_hash{} 中。最后，通过在重复循环中调用 {}{}struct_remove_from_hash{}{} 从数组中的每个结构体中删除该变量。由于每次的变量名称相同，因此可以在每次调用函数时使用相同的哈希值。",
    "The above code shows how to remove a variable from a struct using&nbsp;{}{}struct_remove_from_hash{}{}. First, the hash of the variable name is retrieved with a call to&nbsp;{}{}variable_get_hash{}{}&nbsp;and stored in a temporary variable {}_hash{}. Next, a struct is created that holds a variable with that name and another variable.&nbsp;{}{}struct_remove_from_hash{}{}&nbsp;is then called with the hash, which removes {}my_first_var{} from the struct. Finally, to check if the variable was removed, the struct\u0027s variable names are retrieved with a call to&nbsp;{}{}struct_get_names{}{}&nbsp;and each name is output in a debug message (using&nbsp;{}{}show_debug_message{}{}&nbsp;with {}{}array_foreach{}{}).":"上述代码演示了如何使用 {}{}struct_remove_from_hash{}{} 从结构体中删除一个变量。首先，通过调用 {}{}variable_get_hash{}{} 获取变量名称的哈希值，并将其存储在临时变量 {}_hash{} 中。接着，创建一个包含该名称变量和另一个变量的结构体。然后，调用 {}{}struct_remove_from_hash{}{}，传入哈希值，从结构体中删除 {}my_first_var{}。最后，为了检查变量是否已被删除，通过调用 {}{}struct_get_names{}{} 获取结构体的变量名称，并将每个名称输出到调试信息中（使用 {}{}show_debug_message{}{} 和 {}{}array_foreach{}{}）。",
    "The above code shows how to use&nbsp;{}{}variable_get_hash{}{}&nbsp;and&nbsp;{}{}struct_remove_from_hash{}{} in a situation where the compiler cannot optimise automatically by calculating the hash at compile time.":"上述代码展示了如何在编译器无法通过在编译时计算哈希值进行自动优化的情况下使用 {}{}variable_get_hash{}{} 和 {}{}struct_remove_from_hash{}{}。",
    "The hash value referring to the variable (as returned by&nbsp;{}{}variable_get_hash{}{})":"指向变量的哈希值（由 {}{}variable_get_hash{}{} 返回）",
    "The struct to remove the variable from":"要从中删除变量的结构体",
    "This function removes the variable, referred to by the given hash, from the struct.":"此函数从结构体中删除由给定哈希引用的变量。",
    "You can retrieve the hash of a variable using&nbsp;{}{}variable_get_hash{}{}.":"你可以使用 {}{}variable_get_hash{}{} 来检索变量的哈希值。"
}