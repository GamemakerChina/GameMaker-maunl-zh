{
    "It returns the number of elements written back to the array.":"它返回写回数组的元素数。",
    "The above code first creates an array {}values{} with a couple of values in it that occur twice. It then calls&nbsp;{}{}array_unique_ext{}{}&nbsp;on the array and assigns the number of valid array elements to a new variable {}valid_values{}.":"上面的代码首先创建一个数组{}values{}，其中有两个值出现两次。然后在数组上调用{}{}array_unique_ext{}{}，并将有效数组元素的数量分配给新变量{}valid_values{}。",
    "The above code first creates an array {}values{} with a set of values. It then calls&nbsp;{}{}array_unique_ext{}{}&nbsp;on the array and assigns the number of valid array elements to a new variable {}valid_values{}.":"上面的代码首先创建一个具有一组值的数组 {}values{}。然后，它对数组调用 {}{}array_unique_ext{}{}，并将有效数组元素的数量分配给新变量 {}valid_values{}。",
    "The array to use":"要使用的数组",
    "The function will modify the array, starting at the {}offset{}, writing only the unique values it finds in the array, and ignoring duplicates.":"该函数将修改数组，从 {}offset{} 开始，只写入它在数组中找到的唯一值，并忽略重复项。",
    "{}This function is similar to&nbsp;{}array_unique{}, but instead of returning a modified array, it modifies the original array that you passed into the function.{}":"{} 此函数类似于 {}array_unique{}，但它不是返回修改后的数组，而是修改您传递给该函数的原始数组。{}",
    "{}This function mutates (a range of) the input array resulting in an array without duplicates.{}":"{}此函数会改变输入数组 (的范围)，从而形成一个没有重复的数组。{}",
    "{}{}IMPORTANT{}{}&nbsp;This function {}mutates{}&nbsp;the input array, i.e. changes it directly. Existing array elements in the range given by the offset and length parameter might be overwritten. For performance reasons the array is {}not{} resized and the new number of {}valid{} elements is returned instead.":"{}{}重要{}{} 此函数对输入数组进行{}突变{}，即直接更改。偏移量和长度参数指定的范围内的现有数组元素可能会被覆盖。出于性能原因，数组{}未{}调整大小，而是返回{}新的{}有效元素数。",
    "{}{}IMPORTANT{}{}&nbsp;This function {}mutates{}&nbsp;the input array, i.e. changes it directly. Existing array elements in the range given by the offset and length parameter might be overwritten. For performance reasons the array is {}not{} resized and the new number of {}valid{} elements, starting at the offset position and in the direction given by the sign of the length parameter, is returned instead.":"{}{}重要{}{}此函数{}改变{}输入数组，即直接更改它。偏移量和长度参数指定的范围内的现有数组元素可能会被覆盖。由于性能原因，数组的大小{}不{}调整，而是返回新的{}有效{}元素，这些元素从偏移位置开始，方向由长度参数的符号给定。",
    "{}{}OPTIONAL{}{}&nbsp;The number of elements to traverse. A negative value will traverse the array backwards (i.e. in descending order of indices, e.g. 2 &gt; 1 &gt; 0 instead of 0 &gt; 1 &gt; 2).":"{}{}可选{}{}要遍历的元素数。负值将向后遍历数组(即，按索引的降序，例如21&gt；0而不是0&gt；1&gt；2).",
    "{}{}OPTIONAL{}{}&nbsp;The number of elements to traverse. A negative value will traverse the array backwards (i.e. in descending order of indices, e.g. 2 &gt; 1 &gt; 0 instead of 0 &gt; 1 &gt; 2). See:&nbsp;{}Offset And Length{}":"{}{}可选{}{} 要遍历的元素数。负值将向后遍历数组(即按索引的降序排列，例如 2>1>0 而不是 0>1>2)。请参阅： {}偏移量和长度{}",
    "{}{}OPTIONAL{}{}&nbsp;The offset, or the starting index, in the array. Setting a negative value will count from the end of the array. The starting index will then be {}array_length(array) + offset{}.":"{}{}可选{}{}数组中的偏移量或起始索引。设置负值将从数组的末尾开始计数。然后，起始索引将为 {}array_length(array) + offset{}.",
    "{}{}OPTIONAL{}{}&nbsp;The offset, or the starting index, in the array. Setting a negative value will count from the end of the array. The starting index will then be {}array_length(array) + offset{}. See:&nbsp;{}Offset And Length{}":"{}{}可选{}{} 数组中的偏移量或起始索引。设置负值将从数组的末尾开始计数。然后，起始索引将是 {}array_length(array)+offset{}。请参阅：{}偏移量和长度{}",
    "{}{}Real{}{}&nbsp;(the number of valid elements in the array)":"{}{}实数{}{}(数组中有效元素的数量)"
}