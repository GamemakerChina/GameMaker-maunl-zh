{
["The current array index"]={new="当前数组索引";old="The current array index"};
["The current array element"]={old="The current array element";new="当前数组元素"};
["The array to use"]={new="要使用的数组";old="The array to use"};
["{}{}OPTIONAL{}{}&nbsp;The offset, or the starting index, in the array. Setting a negative value will count from the end of the array. The starting index will then be {}array_length(array) + offset{}."]={old="{}{}OPTIONAL{}{}&nbsp;The offset, or the starting index, in the array. Setting a negative value will count from the end of the array. The starting index will then be {}array_length(array) + offset{}.";new="{}{}可选{}{}数组中的偏移量或起始索引。设置负值将从数组的末尾开始计数。然后，起始索引将为{}array_length(array) + offset{}."};
["{}{}OPTIONAL{}{}&nbsp;The number of elements to traverse. A negative value will traverse the array backwards (i.e. in descending order of indices, e.g. 2 &gt; 1 &gt; 0 instead of 0 &gt; 1 &gt; 2)."]={new="{}{}可选{}{}要遍历的元素数量。负值将向后遍历数组 (即按索引的降序排列，例如2 &gt; 1 &gt; 0而不是0 &gt; 1 &gt; 2)。";old="{}{}OPTIONAL{}{}&nbsp;The number of elements to traverse. A negative value will traverse the array backwards (i.e. in descending order of indices, e.g. 2 &gt; 1 &gt; 0 instead of 0 &gt; 1 &gt; 2)."};
['The above code first creates a function {}vowel_or_consonant{} that checks if the given element (which must be a valid letter) is a vowel. It does that by using&nbsp;{}{}array_any{}{}. If the letter is found, the function returns the string "vowel", if it is not it returns the string "consonant". It then creates an array {}letters{} with the first letters of the alphabet. Finally it calls&nbsp;{}{}array_map{}{}&nbsp;on the {}letters{} array with the {}vowel_or_consonant{} function and assigns the result to {}letter_type{}. This array will contain the text "vowel" or "consonant", depending on whether the element in the original array was a vowel or a consonant.']={new='上面的代码首先创建一个函数{}vowel_or_consonant{}，用于检查给定元素 (必须是有效字母) 是否是元音。它通过使用{}{}array_any{}{}来做到这一点。如果找到字母，则函数返回字符串 “vowel”，如果不是，则返回字符串 “consonant”。然后，它使用字母表的第一个字母创建一个数组{}letters{}。\n\n最后，它用{}{}vowel_or_consonant{}{}函数在{}letters{}数组上调用{}array_map{}，并将结果分配给{}letter_type{}。这个数组将包含 "元音 "或 "辅音 "的文字，取决于原始数组中的元素是元音还是辅音。\n\n\n此数组将包含文本 “vowel” 或 “consonant”，具体取决于原始数组中的元素是元音还是辅音。';old='The above code first creates a function {}vowel_or_consonant{} that checks if the given element (which must be a valid letter) is a vowel. It does that by using&nbsp;{}{}array_any{}{}. If the letter is found, the function returns the string "vowel", if it is not it returns the string "consonant". It then creates an array {}letters{} with the first letters of the alphabet. Finally it calls&nbsp;{}{}array_map{}{}&nbsp;on the {}letters{} array with the {}vowel_or_consonant{} function and assigns the result to {}letter_type{}. This array will contain the text "vowel" or "consonant", depending on whether the element in the original array was a vowel or a consonant.'};
["This function returns a {}new{} array with a modified version of the elements in the array or a range of it."]={new="此函数返回一个{}新{}数组，其中包含数组或数组范围中元素的修改版本。";old="This function returns a {}new{} array with a modified version of the elements in the array or a range of it."};
["The function to use for each element"]={old="The function to use for each element";new="用于每个元素的函数"};
["The new value to be used for every index is given by the predicate function."]={old="The new value to be used for every index is given by the predicate function.";new="用于每个索引的新值由谓词函数给出。"}
}