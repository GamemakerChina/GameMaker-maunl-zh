{
    "It creates a struct from the {}potion{} constructor. Using {}is_instanceof(){}, we can check that the new struct:":"它从 {}potion{} 构造函数创建一个结构。使用 {}is_instanceof(){}，我们可以检查新结构：",
    "The above code shows three constructors:&nbsp;{}item{}, {}potion{} which is a child of {}item{}, and {}enemy{}, which is a separate constructor.":"上面的代码显示了三个构造函数：{}item{}，{}potion{}，它是 {}item{} 的子类，以及 {}enemy{}，它是一个单独的构造函数。",
    "The constructor to check (is the struct an {}instance of{} this constructor?)":"要检查的构造函数(该结构是此构造函数的{}实例{}吗？)",
    "The struct to check (the \"instance\")":"要检查的结构(\"实例\")",
    "This function returns whether the given {}struct{}&nbsp;is an \"instance of\" the given {}constructor{}. You can use this function to check if the constructor used to create your struct was the same one as you supplied in the second argument, or if it\u0027s a child constructor of your given constructor.":"此函数返回给定的{}结构{}是否为给定的{}构造函数{}的\"实例\"。您可以使用此函数来检查用于创建结构的构造函数是否与您在第二个参数中提供的构造函数相同，或者它是否是给定构造函数的子构造函数。",
    "This function works by checking the&nbsp;{}Static Chain{}&nbsp;of your given struct to see if your given constructor is included anywhere in that chain. See:&nbsp;{}Static Struct{}":"此函数通过检查给定结构的{}静态链{}来查看给定构造函数是否包含在该链中的任何位置。请参阅：{}静态结构{}",
    "This means that if your struct was created from constructor {}B{}, and constructor {}B{} is a child of constructor {}A{}, calling {}is_instanceof(struct_of_B, A){} will return {}true{}.":"这意味着，如果您的结构是从构造函数 {}B{} 创建的，并且构造函数 {}B{} 是构造函数 {}A{} 的子级，则调用 {}is_instanceof(struct_of_B，A){} 将返回 {}true{}。",
    "This way you can check whether a struct \"is\" something, as {}a potion is an item{}, so it returns {}true{} for both constructors. However if wouldn\u0027t be true the other way around: {}an item is not a potion{}.":"通过这种方式，您可以检查结构是否\"是\"某物，因为 {}potion 是 item{}，因此它为两个构造函数返回 {}true{}。然而，如果不是真的，反过来：{}item 不是 potion{}。",
    "is a {}potion{}":"是一个 {}potion{}",
    "is an {}item{}":"是一个 {}item{}",
    "is not an {}enemy{}":"不是一个 {}enemy{}",
    "{}{}NOTE{}{}&nbsp;If you use&nbsp;{}{}static_set{}{}&nbsp;to replace the static chain of a struct, it will modify the behaviour of this function on that struct, as it checks the static chain to determine inheritance. Using&nbsp;{}{}static_set{}{}&nbsp;is not recommended aside from deserialisation cases where an anonymous struct is loaded back as part of a hierarchy.":"{}{}注意{}{} 如果使用 {}{}static_set{}{} 替换结构的静态链，它将修改该结构上此函数的行为，因为它会检查静态链以确定继承。除了将匿名结构作为层次结构的一部分重新加载的反序列化情况外，不建议使用 {}{}static_set{}{}。"
}