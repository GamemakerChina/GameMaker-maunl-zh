{
    "After the callback is executed for all elements, the modified array is returned. The original array is {}not changed{}; for that, see&nbsp;{}array_map_ext{}.":"对所有元素执行回调后，返回修改后的数组。原始数组为{}未更改{}有关这一点，请参阅 {}array_map_ext{}。",
    "It creates a function {}_double{} that takes the array element and index, and returns the element multiplied by 2.":"它创建了一个函数 {}_double{}，该函数接受数组元素和索引，并返回乘以 2 的元素。",
    "See information and examples on&nbsp;{}Predicate Function{}.":"请参阅有关{}判断函数{}的信息和示例。",
    "The above code creates an array {}_numbers{} with numbers from 1 to 5.":"上面的代码创建了一个数字介于 1 到 5 之间的数组 {}_numbers{}。",
    "The above code first creates a function {}vowel_or_consonant{} that checks if the given element (which must be a valid letter) is a vowel. It does that by using&nbsp;{}{}array_any{}{}. If the letter is found, the function returns the string \"vowel\", if it is not it returns the string \"consonant\". It then creates an array {}letters{} with the first letters of the alphabet. Finally it calls&nbsp;{}{}array_map{}{}&nbsp;on the {}letters{} array with the {}vowel_or_consonant{} function and assigns the result to {}letter_type{}. This array will contain the text \"vowel\" or \"consonant\", depending on whether the element in the original array was a vowel or a consonant.":"上面的代码首先创建一个函数{}vowel_or_consonant{}，用于检查给定元素 (必须是有效字母) 是否是元音。它通过使用{}{}array_any{}{}来做到这一点。如果找到字母，则函数返回字符串 “vowel”，如果不是，则返回字符串 “consonant”。然后，它使用字母表的第一个字母创建一个数组{}letters{}。最后，它用{}{}vowel_or_consonant{}{}函数在{}letters{}数组上调用{}array_map{}，并将结果分配给{}letter_type{}。这个数组将包含 \"元音 \"或 \"辅音 \"的文字，取决于原始数组中的元素是元音还是辅音。此数组将包含文本 “vowel” 或 “consonant”，具体取决于原始数组中的元素是元音还是辅音。",
    "The array to use":"要使用的数组",
    "The callback function you pass into this function should take the following arguments:":"传递到此函数的回调函数应采用以下参数：",
    "The callback function&nbsp;to run on each element":"要在每个元素上运行的回调函数",
    "The current array element":"当前数组元素",
    "The current array element\u0027s value":"当前数组元素的值",
    "The current array index":"当前数组索引",
    "The function to use for each element":"用于每个元素的函数",
    "The new value to be used for every index is given by the predicate function.":"用于每个索引的新值由判断函数给出。",
    "The predicate function should return a&nbsp;{}{}Boolean{}{}{}, which affects how the original function modifies or reads the array{}{}.{}":"判断函数应返回{}{}布尔值{}{}{}，这会影响原始函数修改或读取数组的方式{}{}。{}",
    "The&nbsp;{}Predicate Function{}&nbsp;to run on each element":"对每个元素运行的{}判断函数{}",
    "This callback function should return a value of&nbsp;{}{}Any{}{} type that will be applied back to the array element.":"此回调函数应返回一个{}{}任何{}{}将应用于数组元素的类型的值。",
    "This function is then used in an {}array_map{} call, which returns a modified version of the array with all numbers doubled: {}[2, 4, 6, 8, 10]{}.":"然后在一个 {}array_map{} 调用中使用该函数，该调用返回一个修改后的数组版本，所有数字都加倍：{}[2，4，6，8，10]{}。",
    "This function returns a modified version of the given array, based on a callback function.":"此函数基于回调函数返回给定数组的修改版本。",
    "This function returns a {}new{} array with a modified version of the elements in the array or a range of it.":"此函数返回一个{}新{}数组，其中包含数组或数组范围中元素的修改版本。",
    "This function takes a&nbsp;{}Predicate Function{}&nbsp;that operates on the given array. The predicate function is passed the following arguments:":"此函数接受在给定数组上操作的{}判断函数{}。向判断函数传递以下参数：",
    "You provide an array, and a callback function, which is called for each element in the given array. The callback function can return any value, which is applied to that index in a new copy of the array.":"您提供一个数组和一个回调函数，给定数组中的每个元素都会调用该函数。回调函数可以返回任何值，该值应用于数组的新副本中的索引。",
    "{}Callback Function{}{}Callback Function{}":"{}回调函数{}{}回调函数{}",
    "{}Predicate Function{}{}Predicate Function{}":"{}判断函数{}{}判断函数{}",
    "{}{}OPTIONAL{}{}&nbsp;The number of elements to traverse. A negative value will traverse the array backwards (i.e. in descending order of indices, e.g. 2 &gt; 1 &gt; 0 instead of 0 &gt; 1 &gt; 2).":"{}{}可选{}{}要遍历的元素数量。负值将向后遍历数组 (即按索引的降序排列，例如2 &gt; 1 &gt; 0而不是0 &gt; 1 &gt; 2)。",
    "{}{}OPTIONAL{}{}&nbsp;The number of elements to traverse. A negative value will traverse the array backwards (i.e. in descending order of indices, e.g. 2, 1, 0 instead of 2, 3, 4). See:&nbsp;{}Offset And Length{}":"{}{}可选{}{} 要遍历的元素数。负值将向后遍历数组(即以索引的降序，例如 2、1、0 而不是 2、3、4)。请参阅：{}偏移量和长度{}",
    "{}{}OPTIONAL{}{}&nbsp;The offset, or starting index, in the array. Setting a negative value will count from the end of the array. The starting index will then be {}array_length(array) + offset{}. See:&nbsp;{}Offset And Length{}":"{}{}可选{}{} 数组中的偏移量或起始索引。设置负值将从数组的末尾开始计数。然后，起始索引将是 {}array_length(array) + offset{}。请参阅：{}偏移量和长度{}",
    "{}{}OPTIONAL{}{}&nbsp;The offset, or the starting index, in the array. Setting a negative value will count from the end of the array. The starting index will then be {}array_length(array) + offset{}.":"{}{}可选{}{}数组中的偏移量或起始索引。设置负值将从数组的末尾开始计数。然后，起始索引将为{}array_length(array) + offset{}."
}