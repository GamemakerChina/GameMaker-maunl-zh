{
    "\"{}Input{}\" is what Rollback communicates between all players, not the state.":"\"{}输入{}\"回滚是指所有玩家之间进行的回滚，而不是状态。",
    "A different approach to multiplayer is \"state replication\", which continually synchronises the state of the game between clients, ensuring they are always doing the same thing.":"另一种多人游戏的方法是\"状态复制\"，它持续同步客户端之间的游戏状态，确保它们总是在做相同的事情。",
    "After following the&nbsp;{}Create a Multiplayer Game{}&nbsp;tutorial, you may have some questions about how the Rollback system works. This page aims to expand on it.":"学习完{}创建一个多人游戏{}教程后，您可能会对回滚系统的工作原理有一些疑问。本页面旨在对其进行扩展。",
    "As previously mentioned, Rollback {}only communicates input{} between players.":"如前所述，回滚{}只在玩家之间传递输入{}。",
    "Because input affects state, a wrong input prediction can result in a {}wrong state{}.":"因为输入影响状态，所以错误的输入预测可能导致{}错误的状态{}。",
    "Defining Inputs":"定义输入",
    "Determinism":"确定性",
    "Further Reading":"延伸阅读",
    "Here is an example:":"下面是一个例子：",
    "How does it work?":"它如何工作？",
    "However, because all game clients run the same logic on the received input (which is a requirement), {}they all result in the same state{}.":"然而，因为所有游戏客户端对接收到的输入运行相同的逻辑(这是必需的)，所以{}它们都导致相同的状态{}。",
    "However, sometimes the system realises its prediction was wrong. In that case, it {}rolls back{} to the last correct state, and continues the game from that point. This is why it\u0027s called \"{}Rollback multiplayer{}\".":"然而，有时系统会意识到它的预测是错误的。在这种情况下，它将{}回滚{}到最后正确的状态，并从该点继续游戏。这就是为什么它被称为{}回滚多人{}。",
    "If only input is synchronised, then what is&nbsp;{}state{} for?":"如果仅同步输入，则{}状态{}用于什么？",
    "It\u0027s easy to experience lag when playing online. If you\u0027re playing with someone remotely, it may take a fraction of a second for their input to reach you, but even that can be enough to ruin your game experience.":"在网上玩的时候很容易遇到滞后。如果你正在和某人远程玩游戏，他们的输入可能只需要几秒钟的时间就能到达你那里，但即使这样也足以毁了你的游戏体验。",
    "Player Preferences":"玩家首选项",
    "Read the following pages for more information on the Rollback system:":"有关回滚系统的更多信息，请阅读以下页面：",
    "Rollback Constraints":"回滚约束",
    "Rollback Events":"回滚事件",
    "Rollback System":"回滚系统",
    "Rollback does not do that -- it only ever sends inputs, but also keeps an eye on the state so it can be rolled back in case of a wrong prediction.":"回滚不会这样做 -- 它只发送输入，而且还会监视状态，以便在预测错误时可以回滚。",
    "Rollback is deterministic. It only shares inputs with other players, and expects all of them to run the same logic on the given input, giving the same results on all clients.":"回滚是确定性的。它只与其他参与者共享输入，并期望所有参与者对给定的输入运行相同的逻辑，在所有客户端上提供相同的结果。",
    "Rollback uses predictions to reduce the effect of lag. Based on previous inputs, it predicts what the other user is going to do next, and shows you the result of that prediction, which is instant.":"回滚使用预测来减少延迟的影响。根据之前的输入，它预测其他用户下一步要做什么，并向您显示预测的结果，这是即时的。",
    "So... what\u0027s the difference?":"所以...有什么关系呢？",
    "There are two main things that Rollback handles:":"回滚主要处理两件事：",
    "What is Rollback?":"什么是回滚？",
    "What is state, then?":"那么，什么是状态呢？",
    "When the prediction is correct, you don\u0027t experience lag, and your game feels much more responsive.":"当预测正确时，你不会经历滞后，你的游戏感觉更有响应性。",
    "{}Input{} changes&nbsp;{}state{}, which is the base concept of Rollback multiplayer.":"{}输入{}改变{}状态{}，这是回滚多人游戏的基本概念。",
    "{}Input{}: Each player\u0027s {}inputs{} are sent to other players. If Player 0 presses {}\"fire\"{} in their own client, Rollback will ensure that other clients also see Player 0 press {}\"fire\"{}. {} {} {}Predictions are only run on input.{} ":"{}输入{}：每个玩家的{}输入{}被发送给其他玩家。如果玩家0在自己的客户端按下{}\"fire\"{}，回滚将确保其他客户端也能看到玩家0按下{}\"fire\"{}。{}{}{}预测仅对输入运行。{}",
    "{}Input{}: Player 0 presses {}\"fire\"{}.":"{}输入{}：玩家0按下{}\"fire\"{}。",
    "{}State{}: Because Player 0 pressed fire, a projectile is created. That projectile eventually collides with a rock. This results in Player 0 getting a point. {} {} This is essentially your whole game, dependent entirely on input. ":"{}状态{}：因为玩家0按下了火，所以产生了一个弹丸。该抛射物最终会与一块岩石相撞。这会导致玩家0得到一分。{}{}这基本上是你的整个游戏，完全依赖输入。",
    "{}State{}: This includes all managed objects and their variables. These are NOT synchronised between players: changing one variable in one client will not automatically update it in another client. {} {} {}State is only managed for the purpose of being rolled back.{} ":"{}状态{}：包括所有托管对象及其变量。这些在玩家之间是不同步的：更改一个客户端中的一个变量不会自动更新另一个客户端中的变量。{}{}{}管理状态仅用于回滚。{}",
    "{}{}What is a client?{}{} {} {} A \"client\" is a player in your game, and refers to their copy of the game, running on their machine. ":"{}{}什么是客户端？{}{} {}{}客户端是您游戏中的玩家，指的是在他们的计算机上运行的游戏副本。"
}