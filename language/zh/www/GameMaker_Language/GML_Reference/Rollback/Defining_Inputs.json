{
    "By default you will get the following keys in the input struct:":"默认情况下，您将在输入结构中获得以下键：",
    "Calling&nbsp;{}{}rollback_get_input(){}{}&nbsp;now will only return the inputs defined here ({}fire{}, {}interact{}, etc.), along with {}*_pressed{} and {}*_released{} variants for each of them.":"现在调用 {}{}rollback_get_input(){}{} 将只返回此处定义的输入 ({}fire{}、{}interact{} 等)，以及每个输入的 {}*_pressed{} 和 {}*_released{} 变体。",
    "Constants":"常量",
    "Creating a Multiplayer Game":"创建一个多人游戏",
    "Custom Controls":"自定义控制",
    "Default Inputs":"默认输入",
    "Define a letter key by wrapping it in {}{}ord(){}{}.":"以 {}{}ord(){}{} 包装字母键来定义该字母键。",
    "Defining":"定义",
    "Defining Inputs":"定义输入",
    "Each keyboard input defined is read using {}{}keyboard_check(){}{}, which gets if the key is held or not. For mouse input it uses {}{}mouse_check_button(){}{}.":"定义的每个键盘输入都是使用 {}{}keyboary_check(){}{} 读取的，该函数获取是否按住该键。对于鼠标输入，它使用 {}{}mouse_check_button(){}{}。",
    "For GML Visual, use&nbsp;{}Define Input (Rollback){}.":"对于GML可视化，使用{}定义输入(回滚){}。",
    "For example, for the {}space{}&nbsp;input, you will get {}space_pressed{}&nbsp;and {}space_released{}&nbsp;as well.":"例如，对于输入的 {}space{}，您将获得 {}space_pressed{} 和 {}space_released{}。",
    "Further Reading":"延伸阅读",
    "In this example, {}fire{} will be triggered by both {}mb_left{} and the {}X{} key, {}interact{} will be triggered by {}vk_space{} and the {}C{} key, and so on.":"在本例中，{}fire{} 将由 {}mb_left{} 和 {}X{} 键触发，{}interact{} 将由 {}vk_space{} 和 {}C{} 键触发，依此类推。",
    "Input Variants":"输入变量",
    "Input is managed by the Rollback system, so it can properly be synchronised between players. Inputs for a player can be retrieved using {}{}rollback_get_input(){}{}, which returns a struct containing the inputs for the player.":"输入由回滚系统管理，因此可以在玩家之间适当地同步。可以使用 {}{}rollback_get_input(){}{} 检索玩家的输入，该函数返回一个包含玩家输入的结构。",
    "Mock Input":"模拟输入",
    "Multiple Controls":"多组控制",
    "Read the following pages for more information on the Rollback system:":"有关回滚系统的更多信息，请阅读以下页面：",
    "Rollback Constraints":"回滚约束",
    "Rollback Events":"回滚事件",
    "Rollback System":"回滚系统",
    "The X position of the mouse in the room (using&nbsp;{}{}mouse_x{}{}).":"房间中鼠标的 X 位置 (使用 {}{}mouse_x{}{})。",
    "The X position of the mouse on the GUI layer (using {}{}device_mouse_x_to_gui(){}{}).":"鼠标在图形用户界面层上的 X 位置 (使用 {}{}device_mouse_x_to_gui(){}{})。",
    "The Y position of the mouse in the room (using&nbsp;{}{}mouse_y{}{}).":"房间中鼠标的 Y 位置 (使用 {}{}mouse_y{}{})。",
    "The Y position of the mouse on the GUI layer (using {}{}device_mouse_y_to_gui(){}{}).":"鼠标在图形用户界面层上的 Y 位置 (使用 {}{}device_mouse_y_to_gui(){}{})。",
    "The directional inputs are mapped to the arrow keys.":"方向输入被映射到箭头键。",
    "This defines mock input for player 1 (the second player), keeping the same input names but assigning different inputs. This way two people could play the game locally on the same computer.":"这为玩家 1 (第二个玩家) 定义了模拟输入，保持相同的输入名称，但分配不同的输入。这样，两个人就可以在同一台电脑上本地玩这个游戏了。",
    "To define your own inputs, create a struct containing the input keys and assigned constants to use, and then pass that into {}{}rollback_define_input(){}{}. This will override the default controls mentioned at the top of this page.":"要定义您自己的输入，请创建一个包含要使用的输入键和指定常量的结构，然后将其传递给 {}{}rollback_define_input(){}{}。这将覆盖此页面顶部提到的默认控件。",
    "Use these constants to define gamepad inputs (buttons and axes). A list of such constants is {}given here{}.":"使用这些常量来定义游戏手柄输入(按钮和轴)。{}此处给出了{}此类常量的列表。",
    "Use these constants to define keyboard keys. A list of such constants is {}given here{}.":"使用这些常量来定义键盘键。{}此处给出了{}此类常量的列表。",
    "Use these constants to define mouse buttons. A list of such constants is {}given here{}.{} {} {}NOTE{}: {}mb_any{} and {}mb_none{} cannot be used. ":"使用这些常量来定义鼠标按钮。{}此处给出了{}此类常量的列表。{}{}{}注意{}：不能使用 {}mb_any{} 和 {}mb_none{}。",
    "When testing locally, you may want to define temporary inputs for remote players so you can test multiplayer gameplay offline.":"在本地测试时，您可能希望为远程玩家定义临时输入，以便可以离线测试多人游戏。",
    "With each defined input (default or custom), you also get variants that use {}{}keyboard_check_pressed(){}{} and {}{}keyboard_check_released(){}{}&nbsp;(and the equivalent functions for mouse input). These are added with the suffix \"{}_pressed{}\" and \"{}_released{}\" respectively.":"对于每个已定义的输入 (默认或自定义)，您还会获得使用 {}{}keyboard_check_pressed(){}{} 和 {}{}keyboard_check_released(){}{}( 以及用于鼠标输入的等效函数) 的变体。添加的后缀分别为 \"{}_pressed{}\" 和 \"{}_released{}\"。",
    "You can achieve that by defining mock input for a player using {}{}rollback_define_mock_input(){}{}. For example, after calling the code snippet above to define {}fire{}, {}interact{}, {}left{} and {}right{} inputs for all players, you can define a separate set of inputs for the second player specifically, which you can use during Sync Test.":"您可以通过使用 {}{}rollback_define_mock_input(){}{} 为玩家定义模拟输入来实现这一点。例如，在调用上面的代码片段为所有玩家定义了 {}fire{}、{}interact{}、{}left{} 和 {}right{} 输入之后，您可以专门为第二个玩家定义一组单独的输入，以便在同步测试期间使用。",
    "You can assign any of the following input values to the inputs in your struct:":"您可以将以下任何输入值分配给结构中的输入：",
    "You can assign multiple controls to each input, by listing input constants in an array:":"通过在数组中列出输入常量，可以为每个输入分配多个控件：",
    "You define your input names on the left-hand side (e.g. {}fire{}), and assign an input on the right-hand side (e.g. {}mb_left{}):":"您可以在左侧定义您的输入名称 (例如 {}fire{})，并在右侧分配一个输入 (例如 {}mb_left{})：",
    "{}1{} if the mouse wheel is being scrolled down, {}0{} otherwise":"如果鼠标滚轮正在向下滚动，则为{}1{}，否则为{}0{}",
    "{}1{} if the mouse wheel is being scrolled up, {}0{} otherwise":"如果鼠标滚轮正在向上滚动，则为{}1{}，否则为{}0{}",
    "{}Gamepad{}":"{}手柄{}",
    "{}Keyboard{}":"{}键盘{}",
    "{}Mouse{}":"{}鼠标{}",
    "{}NOTE{}&nbsp;You can\u0027t bind the same input constant to multiple inputs, e.g. a specific input value (say, {}mb_left{}&nbsp;or {}ord(\"A\"){}) can only be used {}once{} throughout your whole input struct.":"{}注意{} 您不能将同一个输入常量绑定到多个输入，例如，特定的输入值(例如，{}mb_left{} 或 {}ord(\"A\"){}) 在整个输入结构中只能使用{}一次{}。"
}