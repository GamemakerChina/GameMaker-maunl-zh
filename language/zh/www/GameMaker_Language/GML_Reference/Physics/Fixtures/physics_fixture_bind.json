{
    "Once we have defined our fixture it has to be bound to an instance. This means that its {}properties{} are transferred to the selected instance, {}not the actual fixture itself{}, so that one fixture can be bound to multiple instances if all are to have the same properties. You can specify an object index for the target and all instances present in the room at the time will receive that fixtures properties (but not any new instances of the object created later), or you can use the special keywords {}other{} and {}all{}. You can even specify a parent object and all children instances with that parent will also receive the fixture. Once the fixture has been bound to all the instances that you need, it can be deleted if no longer necessary and the instances with that fixtures properties will not be affected and maintain those properties.":"一旦我们定义了我们的装置，它必须绑定到一个实例。这意味着其{}属性{}将传输到选定的实例，而{}不是实际的装置本身{}，因此，如果一个装置都具有相同的属性，则可以将其绑定到多个实例。您可以为目标指定一个对象索引，当时房间中存在的所有实例都将收到装置属性(但不是以后创建的对象的任何新实例)，或者您可以使用特殊关键字 {}other{} 和 {}all{}。您甚至可以指定一个父对象，具有该父对象的所有子实例也将收到装置。将装置绑定到所需的所有实例后，如果不再需要，可以将其删除，并且具有该装置特性的实例将不会受到影响并保持这些特性。",
    "The code above will create a fixture and assign its index to the variable \"fix\". It then defines the shape and density of the fixture before binding it to the instance that was created with the index for the {}bound{} fixture stored in the variable \"my_fix\". Finally, the fixture is deleted to prevent memory leaks as it is no longer needed.":"上面的代码将创建一个装置并将其索引分配给变量 \"fix\"。然后定义装置的形状和密度，然后将其绑定到使用存储在变量 \"my_fix\" 中的{}限制{}装置的索引创建的实例。最后，装置被删除，以防止内存泄漏，因为它不再需要。",
    "The fixture that is to be bound":"要绑定的装置",
    "The fixture will be bound to the instance with the center of mass being positioned at the origin of the instance, and polygon fixtures are bound based on the position of the points {}relative{} to the origin. If you require your fixture to be bound to a point other than the origin then you should be using {}{}physics_fixture_bind_ext(){}{}.":"装置将绑定到实例，并且重心位于实例的原点，多边形装置将基于点{}相对于原点{}的位置进行绑定。如果需要将装置绑定到原点以外的点，则应使用 {}{}physics_fixture_bind_ext(){}{}。",
    "The target instance that is to receive the fixture (can be an instance id, an object id, {}other{}, or {}all{})":"要接收装置的目标实例(可以是实例 ID、对象 ID、{}other{} 或 {}all{})",
    "{}NOTE{}: Fixtures should be deleted when no longer needed as failure to do so may cause a memory leak which will slow down and eventually crash your game.":"{}注意{}：当不再需要时，应删除装置，因为不这样做可能会导致内存泄漏，这将使游戏运行缓慢并最终使游戏崩溃。",
    "{}The function will also return a unique \"id\" value for the {}bound{} fixture ({}not the fixture itself{}) which can then be used to remove (\"un-bind\") the physics properties from the instance using the function {}{}physics_remove_fixture(){}{}. This permits you to add and remove physical properties from an instance without destroying and re-creating objects.":"{}该函数还将为{}限制{}装置({}而不是装置本身{})返回唯一的 \"id\" 值，然后可以使用函数 {}{}physics_remove_fixture(){}{} 从实例中删除(\"解除绑定\")物理属性。这允许您在不销毁和重新创建对象的情况下添加和删除实例中的物理属性。"
}