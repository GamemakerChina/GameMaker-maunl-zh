{
    "The code above will apply a polygon shape to the fixture indexed in the variable \"fix_Ship\" and then defines three points to create a triangular shape.":"上面的代码将把一个多边形形状应用于变量 \"fix_Ship\" 中索引的装置，然后定义三个点以创建三角形形状。",
    "This function sets a polygon shape for your fixture, but you will need to use {}{}physics_fixture_add_point(){}{} to actually define the shape of this polygon relative to the origin of the fixture. The polygon is closed when the fixture is bound to an instance. You should note too that this function {}must{} be called before defining any points, and you must also have at least three points defined for your polygon before binding it to an instance or you will get an error.":"此函数为装置设置多边形形状，但您需要使用 {}{}physics_fixture_add_point(){}{} 来实际定义此多边形相对于装置原点的形状。将装置绑定到实例时，多边形将闭合。您也应该注意，在定义任何点之前{}必须{}调用此函数，并且在将多边形绑定到实例之前必须至少为其定义三个点，否则将出现错误。",
    "This function sets a polygon shape for your fixture, but you will need to use {}{}physics_fixture_add_point{}{}&nbsp;to actually define the shape of this polygon relative to the origin of the fixture. The polygon is closed when the fixture is bound to an instance. You should note too that this function {}must{} be called before defining any points, and you must also have at least three points defined for your polygon before binding it to an instance or you will get an error.":"此函数为您的夹具设置多边形形状，但您需要使用 {}{}physicals_fixture_add_point{}{} 来实际定义该多边形相对于夹具原点的形状。当夹具绑定到实例时，多边形将闭合。您还应该注意，在定义任何点之前 {} 必须 {} 调用此函数，并且在将多边形绑定到实例之前，您还必须至少为多边形定义三个点，否则您将收到错误消息。",
    "the index of the fixture":"装置的索引"
}