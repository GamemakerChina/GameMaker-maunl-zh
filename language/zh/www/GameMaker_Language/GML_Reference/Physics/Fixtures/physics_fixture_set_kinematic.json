{
    "The code above will indicate that the fixture indexed in \"fix_Cloud\" should be marked as kinematic.":"上面的代码将指示 \"fix_Cloud\" 中索引的装置应标记为运动。",
    "There will be certain instances in a physics based game which you want to move around but do not wish to be acted on by forces such as gravity, nor forces incurred by collisions with dynamic objects (think of moving platforms in a platform game, for\n    example). For such objects simply setting the density of a fixture to 0 will mean that the physics will assume that the object is intended to be static. However, should you set the {}{}phy_speed_x{}{},\n    {}{}phy_speed_y{}{} or {}{}phy_angular_velocity{}{} variables for an instance that has had such a fixture bound to it, it will be converted\n    into a kinematic object and begin movement. Change the instance from static to kinematic mid-simulation can be expensive in terms of processing (depending on the state of the instances in the physics world) and therefore it is recommended to set the\n    fixture to be kinematic using this function prior to binding it to an instance, so that it will be unaffected by collisions and forces (such as gravity) but may move with constant linear and/or angular velocity.":"在基于物理的游戏中，会有某些实例希望移动，但不希望受到重力等力的作用，也不希望受到与动态对象碰撞所产生的力 (例如，在平台游戏中移动平台)。对于这样的对象，简单地将装置的密度设置为 0 将意味着物理将假定该对象是静态的。但是，如果为绑定了此类装置的实例设置 {}{}phy_speed_x{}{}，{}{}phy_speed_y{}{} 或 {}{}phy_angular_velocity{}{} 变量，则它将转换为运动学对象并开始移动。将实例从静态模拟更改为运动学中间模拟在处理方面可能会很昂贵 (取决于物理世界中实例的状态)，因此建议在将装置绑定到实例之前使用此函数将装置设置为运动学，这样它将不会受到碰撞和力 (如重力) 的影响，但可能会以恒定的线性和 / 或角速度移动。",
    "the index of the fixture":"装置的索引"
}