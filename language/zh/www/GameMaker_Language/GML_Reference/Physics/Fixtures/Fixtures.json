{
    "A fixture must be given a shape or else it will not be detected by the physics world, and this shape can be defined by the following functions:":"一个装置必须被赋予一个形状，否则它将不会被物理世界检测到，这个形状可以由以下函数来定义：",
    "Before an instance in {}GameMaker{} can have physical properties it must have a fixture assigned to it. A fixture binds a shape or form to the instance and this adds material properties such as density, friction, and restitution. Fixtures can be boxes, circles, polygons or any other simple shape you wish as {}GameMaker{} provides functions that enable you to define your own shape point by point, and then once you have your shape you can go ahead and define its physical properties too. These properties are what govern the way the instance with the fixture assigned to it will react with other instance in the physics world and are listed below:":"{}GameMaker{} 中的实例必须具有指定给它的装置，才能具有物理属性。装置将形状或形状绑定到实例，这会添加材质属性，如密度、摩擦力和恢复力。装置可以是长方体、圆形、多边形或任何其他您希望的简单形状 {}GameMaker{} 提供的函数使您可以逐点定义自己的形状，然后，一旦获得形状，您就可以继续定义其物理属性。这些属性控制具有指定给它的装置的实例与物理世界中其他实例的反应方式，如下所示：",
    "Before an instance in {}GameMaker{} can have physical properties it must have a fixture assigned to it. A fixture binds a shape or form to the instance and this adds material properties such as density, friction, and restitution. Fixtures can be boxes, circles, polygons or any other simple shape you wish as {}GameMaker{} provides functions that enable you to define your own shape point by point, and then once you have your shape you can go ahead and define its physical properties too. These properties are what govern the way the instance with the fixture assigned to it will react with other instances in the physics world.":"在 {}GameMaker{} 中的实例拥有物理属性之前，必须为其分配固定装置。夹具将形状或形式绑定到实例，这增加了材料属性，例如密度、摩擦力和恢复力。固定装置可以是盒子、圆形、多边形或您想要的任何其他简单形状，因为 {}GameMaker{} 提供的功能使您能够逐点定义自己的形状，一旦获得形状，您就可以继续定义其物理形状属性也。这些属性控制分配有固定装置的实例与物理世界中其他实例的反应方式。",
    "Fixtures":"装置",
    "Function Reference":"功能参考",
    "General":"常规",
    "In order for your physics enabled instance to react properly to the world around it, the fixtures you use must have specific properties defined that will give the fixture bounce, friction, mass etc... The following functions are used to set these properties of the fixture:":"为了使启用了物理的实例能够正确地对周围的世界做出反应，您使用的装置必须具有定义的特定属性，以提供装置的反弹、摩擦、质量等，以下函数用于设置装置的这些属性：",
    "In order for your physics enabled instance to react properly to the world around it, the fixtures you use must have specific properties defined that will give the fixture bounce, friction, mass, etc. The following functions are used to set these properties of the fixture:":"为了使启用物理功能的实例能够对其周围的世界做出正确的反应，您使用的夹具必须定义特定的属性，这些属性将给出夹具的弹跳、摩擦、质量等。以下函数用于设置夹具的这些属性:",
    "Modifying Bound Fixtures":"修改绑定夹具",
    "Setting Properties":"设置属性",
    "Shapes":"形状",
    "So as you can see, with just a few simple functions, {}GameMaker{} can help you to create complex systems and interactions which will give your games an unprecedented sense of realism.":"正如您所看到的，{}GameMaker{} 只需几个简单的函数，就可以帮助您创建复杂的系统和交互，让您的游戏获得前所未有的真实感。",
    "The following functions are for creating, binding, setting collisions and then deleting fixtures:":"以下函数用于创建、绑定、设置碰撞，然后删除装置：",
    "Two physics instances&nbsp;are \"in contact\" when their bounding boxes overlap (i.e. the rectangular regions surrounding their actual shapes). In this case, calling one of the {}physics_set_*{} functions on a bound fixture&nbsp;{}will change{} the value of the property, but in order to force the physics engine to also {}take this new value into account{}, you\u0027ll need to deactivate and reactivate the physics instance using {}{}phy_active{}{}:&nbsp;":"当两个物理实例的边界框重叠 (即围绕其实际形状的矩形区域) 时，它们就 \" 接触\"。在这种情况下，在绑定固定装置上调用 {}physicals_set_*{} 函数之一 {} 将更改 {} 属性的值，但为了强制物理引擎也 {} 考虑此新值 {}}，您需要使用 {}{}phy_active{}{} 停用并重新激活物理实例：",
    "Updating Existing Contacts":"更新现有联系",
    "You can also set certain properties of the fixture {}after{} it has been bound to an instance. When binding the \"base\" fixture, you can choose to store the unique index for the bound physical properties in a variable. This can then be used in the following functions to change certain properties, or to get the current values for them:":"您还可以在将装置绑定到某个实例{}后{}设置该装置的某些属性。绑定\"基础\"装置时，可以选择在变量中存储绑定物理属性的唯一索引。然后，可以在以下函数中使用此选项来更改某些属性，或者获取这些属性的当前值：",
    "You can also set certain properties of the fixture {}after{} it has been bound to an instance. When binding the \"base\" fixture, you can choose to store the unique index for the bound physical properties in a variable. This can then be used in the following functions to change certain properties, or to get the current values for them:&nbsp;":"您还可以在将固定装置绑定到实例之后设置固定装置的某些属性。{} 绑定 \" 基础 \" 夹具时，您可以选择将绑定物理属性的唯一索引存储在变量中。然后可以在以下函数中使用它来更改某些属性，或获取它们的当前值：",
    "{}Angular Damping:{} As above, this is a generalised force that is applied to an object to stop it spinning eternally.":"{}角度阻尼：{}如上所述，这是施加在物体上的广义力，可以阻止物体永远旋转。",
    "{}Density:{} A material\u0027s density is defined as its mass per unit volume. It is, essentially, a measurement of how tightly matter is crammed together. If you wish your fixture to be {}static{} (ie: immovable) then the density should be set to 0, essentially making it infinitely dense. {}Kinematic{} objects that move with constant velocity and are not physically affected by collisions are also defined using a density of 0.":"{}密度：{}材质的密度定义为其每单位体积的质量。它本质上是一种测量物质被挤在一起的紧密程度的方法。如果希望装置为{}静态{}(即：不可移动)，则应将密度设置为 0，从而使其无限密集。以恒定速度运动且物理上不受碰撞影响的{}运动学{}对象也使用 0 密度进行定义。",
    "{}Friction:{} Friction is the force resisting the relative motion of solid surfaces, fluid layers, and material elements sliding against each other.":"{}摩擦力：{}摩擦力是阻止固体表面、流体层和材料元件相对运动的力。",
    "{}Linear Damping:{} This is the generalised force that causes a moving object to lose momentum. In the \"real world\" things don\u0027t generally happen forever. For example, A paper airplane will fly for a short while but eventually it will fall due to the air friction that acts upon it causing it to slow down. In the physics world that we create such things are difficult to model and so each fixture is given its own linear damping to simulate this type of \"generalised friction\".":"{}线性阻尼：{}这是导致运动物体失去动量的一般力。在\"现实世界\"中，事情通常不会永远发生。例如，纸飞机将飞行一小段时间，但最终会由于作用在纸飞机上的空气摩擦而坠落，从而导致纸飞机减速。在物理学世界中，我们创造这样的东西是很难建模的，所以每个装置都有自己的线性阻尼来模拟这种类型的\"广义摩擦\"。",
    "{}Restitution:{} In physics, restitution is defined as \"the return of an object or system to its original state after elastic deformation\", but as the fixtures in the {}GameMaker{} are really rigid bodies and cannot be deformed, think of this as basically how \"bouncy\" the fixture is.":"{}复原：{}在物理学中，复原被定义为\"物体或系统在弹性变形后恢复到其原始状态\"，但由于 {}GameMaker{} 中的装置确实是刚体并且不能变形，因此请将其视为装置的基本\"反弹\"状态。",
    "{}Restitution:{} In physics, restitution is defined as \"the return of an object or system to its original state after elastic deformation\", but as the fixtures in&nbsp;{}GameMaker{} are really rigid bodies and cannot be deformed, think of this as basically how \"bouncy\" the fixture is.":"{} 恢复：{} 在物理学中，恢复被定义为 \" 物体或系统在弹性变形后恢复到其原始状态\"，但由于 {}GameMaker{} 中的固定装置实际上是刚体，无法变形，因此可以认为这基本上就是装置的 \" 弹性 \" 程度。",
    "{}{}NOTE{} {}You can define one fixture and have it bound to multiple instances (think of a pool table, where all the balls have the same physical properties, yet each one is a discreet entity). You can also bind multiple fixtures to a single instance and combine the physical properties (for example, using two triangular polygon fixtures to create a star)":"{}{}注意{}{} 您可以定义一个装置并将其绑定到多个实例(想象一下池表，其中所有球具有相同的物理属性，但每个球都是一个独立的实体)。也可以将多个装置绑定到单个实例并合并物理属性(例如，使用两个三角形多边形装置创建星形)",
    "{}{}{}NOTE{}{}&nbsp;{}You can define one fixture and have it bound to multiple instances (think of a pool table, where all the balls have the same physical properties, yet each one is a discreet entity). You can also bind multiple fixtures to a single instance and combine the physical properties (for example, using two triangular polygon fixtures to create a star)":"{}{}{} 注意{}{}{} 您可以定义一个固定装置并将其绑定到多个实例 (想象一下台球桌，其中所有的球都具有相同的物理属性，但每个球都是一个离散的实体)。您还可以将多个夹具绑定到单个实例并组合物理属性 (例如，使用两个三角形多边形夹具创建一个星形)"
}