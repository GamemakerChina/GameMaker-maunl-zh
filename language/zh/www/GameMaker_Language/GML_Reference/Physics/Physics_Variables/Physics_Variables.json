{
    "As with the \"traditional\" collisions and movement system, the physics system also has a series of {}instance variables{} assigned to each instance of an object when it is created. Some of these properties can be defined by the user in GML, but many are read-only and still more are only applicable in the {}collision{} event.":"与\"传统\"碰撞和运动系统一样，物理系统也有一系列{}实例变量{}在创建对象时分配给对象的每个实例。其中一些属性可以由用户在 GML 中定义，但许多属性是只读的，而且更多属性仅适用于{}碰撞{}事件。",
    "Certain variables are {}read-only{} variables, which means that the information they contain cannot be changed through instance code or script funcions&nbsp;(but it {}can{} be changed internally by {}GameMaker{} which is why these are variables and not {}constants{}). The following list shows the {}read-only{} variables that exist in {}all{} physics enabled objects:":"某些变量为 {} 只读 {} 变量，这意味着它们包含的信息不能通过实例代码或脚本函数进行更改 (但 {}GameMaker{} {}可以{}在内部更改，这就是为什么这些变量是变量而不是 {} 常量 {})。以下列表显示了{}只读{}变量，这些变量存在于{}所有启用了{}物理的对象中：",
    "Finally, there are a number of temporary variables that exist in physics enabled objects and are created {}only in the collision event{}. These variables are like those listed above and are {}read-only{}:":"最后，在启用了物理的对象中存在许多临时变量，这些变量{}仅在碰撞事件{}中创建。{}这些变量类似于上面列出的变量，并且是只读的{}：",
    "The following variables exists in {}all{} physics enabled objects and they can be read from&nbsp;and written to (ie: changed) using code from instances and script functions:":"{}所有启用{}物理的对象中都存在以下变量，可以使用实例和脚本函数中的代码读取和写入这些变量(即已更改)："
}