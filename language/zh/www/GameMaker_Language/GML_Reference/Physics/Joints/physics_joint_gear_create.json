{
    "A previously defined revolute joint":"先前定义的旋转关节类型",
    "A previously defined revolute {}or{} prismatic joint":"先前定义的旋转{}或{}棱柱关节",
    "If you want to create a sophisticated mechanical contraption you might want to use gears. In principle you can create gears in {}GameMaker{} by using compounding instances to model gear teeth, but this is not very efficient and might be tedious to author! Thankfully there is a simpler method, and that is to use a {}gear joint{}. To make one you need to have previously defined your fixtures and created the two basic joints that are going to comprise your gear - these {}must{} be made up of one {}revolute joint{} and either a {}prismatic joint{} or another {}revolute joint{}. The image below shows how a gear would typically be created in a game:":"如果要创建复杂的机械装置，可能需要使用齿轮。原则上，您可以通过使用复合实例在 {}GameMaker{} 中创建齿轮来模拟齿轮齿，但这不是很有效，编写起来可能会很乏味！谢天谢地，有一个更简单的方法，那就是使用{}齿轮关节{}。要创建一个，您需要先定义您的固定装置并创建将组成您的齿轮的两个基本关节 - 这些{}必须{}由一个{}旋转关节{}和一个{}棱柱关节{}或另一个{}旋转关节{}组成。下图显示了通常在游戏中如何创建齿轮：",
    "Set the velocity ratio between the two joints":"设置两个关节之间的速度比率",
    "The above code creates and defines two fixture and then creates three instances, one \"obj_Ground\" and two others, \"obj_Cog\" and \"obj_Barrel\". The fixtures are then bound to these instances and two joints are created. A revolute joint between the ground and the cog, and a prismatic joint between the ground and the barrel. Finally a gear joint is created between the cog and barrel instances using the previously defined revolute and prismatic joints.":"上述代码创建和定义两个装置，然后创建三个实例，\"一个 obj_Ground\" 和另外两个 \"obj_Cog\" 和 \"obj_Barrel\"。然后将装置绑定到这些实例，并创建两个关节。地面和齿轮之间的旋转关节，以及地面和圆筒之间的棱柱形关节。最后，使用先前定义的旋转关节和棱柱关节在齿轮和圆柱体实例之间创建齿轮关节。",
    "The first instance to connect with the joint":"与关节连接的第一个实例",
    "The second instance to connect with the joint":"与关节连接的第二个实例",
    "{}NOTE{}: If you need to delete either of the two instances that are involved in the gear joint (or just delete their joints) then you {}must{} delete the gear joint first using {}{}{}physics_joint_delete(){}{}{} or else you will get an error!":"{}注意{}：如果需要删除齿轮关节中涉及的两个实例中的任何一个 (或只是删除它们的关节)，则必须{}首先使用{} {}{}{}physics_joint_delete(){}{}{} 删除齿轮关节，否则将出现错误！",
    "{}So what happens? Well, once the two joints are added into the gear, interaction with one will have an effect on the other, so in the example image above, if you rotate inst2, inst3 will move up and down, or if you move inst3 up and down then inst2 will rotate. You can also change the gear ratio, meaning that you need to move one instance more (or less) to get the desired effect. The code in the example at the bottom shows how something like the image above can be created.":"{} 发生了什么事？一旦将两个关节添加到齿轮中，与一个关节的相互作用将对另一个关节产生影响，因此在上面的示例图像中，如果在 inst2 中旋转，则 inst3 将上下移动，或者如果在 inst3 中上下移动，则 inst2 将旋转。也可以更改齿轮比率，这意味着需要多移动一个实例 (或少移动一个实例) 才能获得所需的效果。底部示例中的代码显示了如何创建类似上图的内容。",
    "{}{}NOTE{}{}&nbsp;If you need to delete either of the two instances that are involved in the gear joint (or just delete their joints) then you {}must{} delete the gear joint first using {}{}{}physics_joint_delete(){}{}{} or else you will get an error!":"{}{}注意{}{} 如果您需要删除齿轮联接中涉及的两个实例中的任何一个 (或仅删除它们的联接)，则{}必须{}使用 {6}{7}{8}physics_joint_delete(){9}{10}{11} 删除齿轮联接，否则将出现错误！"
}