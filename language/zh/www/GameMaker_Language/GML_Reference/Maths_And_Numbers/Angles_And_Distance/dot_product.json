{
    "If a and b are perpendicular (at 90 degrees to each other), the result of the dot product will be zero, because {}cos(ang){} will be zero":"如果 a 和 b 彼此垂直(90度) ，点乘的结果将为零，因为{} cos (ang){}将为零",
    "If the angle between a and b are greater than 90 degrees, the dot product will be negative (less than zero), as {}cos(ang){} will be negative":"如果 a 和 b 之间的夹角大于90度，则点乘为负(小于零) ，因为{} cos (ang){}为负",
    "If the angle between a and b are less than 90 degrees, the dot product will be positive (greater than zero), as {}cos(ang){} will be positive":"如果 a 和 b 之间的夹角小于90度，则点乘为正(大于零) ，因为{} cos (ang){}为正",
    "So what does this mean for those of us that make games? Well, this mathematical relationship can be used in quite a few circumstances, but the best way to see it is to build an actual scenario and see for yourself what is going on. One of the simplest ways to do this is to generate a simple \"line of sight\" check for an enemy in, say, a platform game so that the enemy will \"see\" the player if they are within 90° of either side of their vector {}normal{}.":"这对我们这些游戏开发者来说意味着什么呢?这种数学关系可以用在很多情况下，但最好的方法是建立一个实际的场景，自己看看发生了什么。最简单的方法之一是，在平台游戏中为敌人生成一个简单的“视线”检查，这样敌人就会“看到”玩家，如果他们在向量{}法线{}两边的90°内。",
    "So, in 2D the dot product of vectors {}a[x1,y1]{} and {}b[x2,2]{} is {}x1x2 + y1y2{}, meaning that the dot_product in {}GameMaker{} is calculated as:":"因此，在2D中，向量{}a[x1,y1]{}和{}b[x2,2]{}的点积是{}x1x2 + y1y2{}，这意味着{}GameMaker{}中的点积计算为:",
    "That is to say, the dot product of two vectors will be equal to the cosine of the angle between those vectors, multiplied by the lengths of each of them. Here is an image to illustrate:":"也就是说，两个向量的点积等于这两个向量夹角的余弦，乘以它们各自的长度。这里有一张图片来说明:",
    "The above code creates a vector using the instances image angle, and then gets the vector of the player object \"o_Player\" to itself. Finally it calculates the dot product of these two vectors and if it is greater than 0 it sets the variable \"seen\" to true, and if it is equal to or less than 0 it sets it to \"false\".":"上面的代码使用实例的图像角度创建一个向量，然后获取播放器对象“o_Player”的向量。最后，它计算这两个向量的点积，如果它大于0，它将变量“seen”设置为true，如果它等于或小于0，它将设置为“false”。",
    "The actual mathematical formula can be written like this:":"实际的数学公式可以写成这样:",
    "The curious thing about the dot product is the relationship it has to the angle formed by the input vectors which can be expressed as:":"点积的奇妙之处在于它与输入向量形成的角度之间的关系，可以表示为:",
    "The dot product is a value expressing the angular relationship between two vectors and is found by taking two vectors, multiplying them together and then adding the results. The name \"dot product\" is derived from the centered dot \"·\" that is often used to designate this operation (the alternative name \"scalar product\" emphasizes the scalar rather than vector nature of the result).":"点积是一个表示两个向量之间角度关系的值，它是通过取两个向量，将它们相乘，然后将结果相加得到的。“点积”这个名称来源于通常用于指定此操作的居中点“·”(另一个名称“标量积”强调结果的标量性质而不是向量性质)。",
    "The x coordinate of the first vector.":"第一个向量的 x 坐标。",
    "The x coordinate of the second vector.":"第二个向量的 x 坐标。",
    "The y coordinate of the first vector.":"第一个向量的 y 坐标。",
    "The y coordinate of the second vector.":"第二个向量的 y 坐标。",
    "There are a few things that we can now state from any two vectors in relation to the result of their dot product:":"我们现在可以从任意两个向量与它们点积的结果的关系中得出一些结论:",
    "{}Basically, we have to get the vector normal from the enemy (ie: comprised of a direction and sight distance) and then we need to get the vector of the player to the enemy. We will then get the dot_product of these vectors, and if the result is positive the player has been seen, and if it is negative he hasn\u0027t. The actual code to get this working is supplied in the example below.":"{}基本上，我们必须获得敌人的法向量(即包含方向和视线距离)，然后我们需要获得玩家到敌人的向量。然后我们将得到这些向量的点积，如果结果是正的，则表示玩家被看过，如果结果是负的，则表示他没有看过。下面的示例中提供了实现此函数的实际代码。",
    "{}NOTE{}: For more information on vectors, see {}here{}.":"{}注意{}:有关向量的更多信息，请参见{}这里的{}。"
}