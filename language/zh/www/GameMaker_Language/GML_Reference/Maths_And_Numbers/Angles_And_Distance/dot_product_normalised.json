{
    "The above code creates a vector using the instances image angle, and then gets the vector of the player object \"o_Player\" to itself. Finally it calculates the dot product of these two vectors and if it is greater than 0 it sets the variable \"seen\" to true, and if it is equal to or less than 0 it sets it to \"false\".":"上面的代码使用实例的图像角度创建一个向量，然后获取播放器对象“o_Player”的向量。最后，它计算这两个向量的点积，如果它大于0，它将变量“seen”设置为true，如果它等于或小于0，它将设置为“false”。",
    "The actual mathematical formula can be written like this:":"实际的数学公式可以写成这样:",
    "The dot product is a value expressing the angular relationship between two vectors and is found by taking two vectors, multiplying them together and then adding the results. The name \"dot product\" is derived from the centered dot \"·\" that is often used to designate this operation (the alternative name \"scalar product\" emphasizes the scalar rather than vector nature of the result).":"点积是一个表示两个向量之间角度关系的值，它是通过取两个向量，将它们相乘，然后将结果相加得到的。“点积”这个名称来源于通常用于指定此操作的居中点“·”(另一个名称“标量积”强调结果的标量性质而不是向量性质)。",
    "The x coordinate of the first vector.":"第一个向量的 x 坐标。",
    "The x coordinate of the second vector.":"第二个向量的 x 坐标。",
    "The y coordinate of the first vector.":"第一个向量的 y 坐标。",
    "The y coordinate of the second vector.":"第二个向量的 y 坐标。",
    "What about the {}normalised{} dot product? The normalised dot product has been corrected in such a way as to bring the return value into the range of -1 and 1 (see the section on&nbsp;{}Vectors{} for more detailed information), which is exceptionally useful in many circumstances, particularly when dealing with lighting and other 3D functions.":"那{}归一化{}点积呢?规范化的点积已经以这样一种方式进行了校正，使返回值进入到-1和1的范围内(更多详细信息请参阅{}向量{}部分)，这在许多情况下非常有用，特别是在处理照明和其他3D函数时。",
    "{}So, in 2D the dot product of vectors {}a[x1,y1]{} and {}b[x2,2]{} is {}x1x2 + y1y2{}, meaning that the dot_product in {}GameMaker{} is calculated as:":"{}因此，在2D中，向量{}a[x1,y1]{}和{}b[x2,2]{}的点积是{}x1x2 + y1y2{}，这意味着{}GameMaker{}中的点积计算为:"
}