{
    "Comparisons and Precision":"比较和精度",
    "Finally we a&nbsp;miscellaneous collection of important mathematical functions:":"最后，我们收集了一些重要的数学函数:",
    "Function Reference":"函数参考",
    "In the example above, if we have been setting the {}image_speed{} to 0.25 - for example - then after four steps you may assume that the {}image_index{} value would be 1, but it {}may{} be a value like 1.0000002 due to the way floating point maths works and so the evaluation will not be {}true{}. These types of errors can be quite hard to debug and so it is always good to be aware of them and to plan ahead and use other means of checking values or to use the appropriate flooring or rounding functions (listed below) to convert the number to check into an integer (for more information on floating point maths and why this is an issue, please {}see here{}). For example the above code could be written as:":"在上面的例子中，如果我们已经将{}image_speed{}设置为0.25—例如—那么经过四步之后，您可以假设{}image_index{}值将是1，但是由于浮点数学的工作方式，它{}可能{}是像1.0000002这样的值，因此计算将不是{}true{}。这些类型的错误很难进行调试，因此了解它们并提前计划并使用其他方法检查值或使用适当的基数或舍入函数(下面列出)将数字转换为整数是很好的(有关浮点数学的更多信息以及为什么这是一个问题，{}请参阅这里{})。例如，上面的代码可以写成:",
    "In the example above, if we have been setting the&nbsp;{}{}image_speed{}{} to 0.25 - for example - then after four steps you may assume that the&nbsp;{}{}image_index{}{} value would be 1, but it {}may{} be a value like 1.0000002 due to the way floating point maths works and so the evaluation will not be {}true{}. These types of errors can be quite hard to debug and so it is always good to be aware of them and to plan ahead and use other means of checking values or to use the appropriate flooring or rounding functions (listed below) to convert the number to check into an integer (for more information on floating point maths and why this is an issue, please {}see here{}). For example the above code could be written as:":"在上面的例子中，如果我们已经将 {}{}image_speed{}{} 设置为 0.25— 例如 — 那么经过四步之后，您可以假设 {}{}image_index{}{} 值将是 1，但是由于浮点数学的工作方式，它 {} 可能 {} 是像 1.0000002 这样的值，因此计算将不是 {}true{}。这些类型的错误很难进行调试，因此了解它们并提前计划并使用其他方法检查值或使用适当的基数或舍入函数 (下面列出) 将数字转换为整数是很好的 (有关浮点数学的更多信息以及为什么这是一个问题，{}请参阅这里{})。例如，上面的代码可以写成:",
    "It is also worth noting that when using the {}YoYo Compiler{} targets, all expressions and functions are {}evaluated from left to right{}, while on all other target platforms they are evaluated {}from right to left{}, meaning that this - for example - will give different results depending on the platform:":"同样值得注意的是，当使用{} YoYo Compiler {}目标时，所有的表达式和函数都是从左到右计算的{} ，而在所有其他目标平台上，它们是从右到左计算的{} ，这意味着，例如，根据不同的平台，这将给出不同的结果:",
    "Mathematical Functions":"数学函数",
    "Number&nbsp;Functions":"数字函数",
    "Random Numbers and Values":"随机数和值",
    "Real numbers in {}GameMaker{} are considered {}double-precision floating-point numbers{} - that is to say that they have a decimal point in them with no fixed number of digits either before or after the point - or {}integers{} - that is to say they are whole numbers with no decimal point value. 2, for example, is an integer but 2.01 is a floating point real.":"{}GameMaker{} 中的实数被视为{}双精度浮点数{} - 也就是说它们有一个小数点，小数点前后没有固定的数字位数 - 或 {} 整数{} - 也就是说它们是没有小数点值的整数。 例如，2 是一个整数，但 2.01 是一个浮点实数。",
    "Rounding and Truncating":"舍入和截断",
    "These are all functions that will round values in some way, or select a single value from various given values.":"这些函数都将以某种方式舍入值，或者从各种给定值中选择一个值。",
    "These are all functions that will round values in some way, or select a single value from various given values:":"这些函数都将以某种方式舍入值，或者从各种给定值中选择一个值:",
    "These functions all deal with using random numbers and values:":"这些函数都使用随机数和值:",
    "This distinction between integers and floats is very important when dealing with cross platform development as the precision of calculations made on a Windows PC is {}not{} the same as the precision of those same calculations when made on a mobile device. This means that you should pay particular attention when making comparisons, for example:":"在处理跨平台开发时，整数和浮点数之间的区别非常重要，因为在Windows PC上进行计算的精度与在移动设备上进行相同计算的精度是不一样的的。这意味着你在进行比较时应该特别注意，例如:",
    "You can also use a special function available in {}GameMaker{} to set the {}epsilon{} value for floating point maths. When a real number is rounded to the nearest floating point number, the epsilon (also know as \"machine epsilon\") forms an upper bound on the relative error, and you can get and set the epsilon value using the following functions:":"您还可以使用{}GameMaker{}中的一个特殊函数来设置浮点数学的{}epsilon(精度){}值。当一个实数四舍五入到最接近的浮点数时，(也称为“机器精度”)形成相对误差的上界，可以使用以下函数获取和设置:",
    "You can also use a special function available in {}GameMaker{} to set the {}{}{}epsilon{} value for floating point maths. When a real number is rounded to the nearest floating point number, the epsilon (also know as \"machine epsilon\") forms an upper bound on the relative error, and you can get and set the epsilon value using the following functions:":"您还可以使用{}GameMaker{}中的一个特殊函数来设置浮点数学的{}{}{}epsilon(精度){}值。当一个实数四舍五入到最接近的浮点数时，(也称为“机器精度”)形成相对误差的上界，可以使用以下函数获取和设置:",
    "{}NOTE{}: For more informaton, see the section on {}Evaluation Order{}.":"{}注{}:要了解更多信息，请参见{}运算顺序{}一节。",
    "{}NOTE{}: On the {}HTML5{} target, all real numbers are doubles.":"{}注意{} : 在 HTML5{}目标上，所有实数都是双精度浮点数。",
    "{}Number Functions{}":"{}数字函数{}",
    "{}{}NOTE{} {}When using the random functions, {}GameMaker{} maintains the same random seed every time you start the game. This makes debugging much easier as you are guaranteed that the random functions will always initially return the same value, however should you not wish this to happen, you must first set a new random seed at the very start of the game, either using {}{}{}randomise(){}{}{} or {}{}{}random_set_seed(){}{}{}.":"{}{}注意{}{}在使用随机函数时，{}GameMaker{}在每次游戏开始时都保持相同的随机种子。这使得调试更加容易，因为你可以保证随机函数最初总是返回相同的值，但是如果你不希望发生这种情况，你必须首先在游戏开始时设置一个新的随机种子，可以使用{}{}{}randomise(){}{}{}或{}{}{}random_set_seed(){}{}{}。",
    "{}{}NOTE{}{}&nbsp;For more information, see the section on {}Evaluation Order{}.":"{}{}注意{}{} 有关详细信息，请参阅{}评估顺序{}部分。",
    "{}{}NOTE{}{}&nbsp;On the {}HTML5{} target, all real numbers are doubles.":"{}{}注意{}{} 在 {}HTML5{} 目标上，所有实数都是双精度。",
    "{}{}{}NOTE{}{}&nbsp;{}When using the random functions, {}GameMaker{} maintains the same random seed every time you start the game. This makes debugging much easier as you are guaranteed that the random functions will always initially return the same value, however should you not wish this to happen, you must first set a new random seed at the very start of the game, either using {}{}{}randomise(){}{}{} or {}{}{}random_set_seed(){}{}{}.":"{}{}{}注意{}{} {}使用随机函数时，每次开始游戏时，{}GameMaker{}都会维护相同的随机种子。这使得调试变得容易得多，因为您可以保证随机函数最初总是返回相同的值，但是，如果您不希望发生这种情况，您必须首先在游戏开始时设置一个新的随机种子，使用 {}{}{}randomise(){}{}{} 或 {}{}{}random_set_seed(){}{}{}。",
    "{}{}{}NOTE{}{}&nbsp;{}When using the random functions, {}GameMaker{} maintains the same random seed every time you start the game. This makes debugging much easier as you are guaranteed that the random functions will always initially return the same value, however should you not wish this to happen, you must first set a new random seed at the very start of the game, either using&nbsp;{}{}randomise{}{}&nbsp;or {}{}random_set_seed{}{}.":"{}{}{}注意{}{} {}在使用随机函数时，{}GameMaker{}在每次游戏开始时都保持相同的随机种子。这使得调试更加容易，因为你可以保证随机函数最初总是返回相同的值，但是如果你不希望发生这种情况，你必须首先在游戏开始时设置一个新的随机种子，可以使用{}{}randomise{}{}或{}{}random_set_seed{}{}。"
}