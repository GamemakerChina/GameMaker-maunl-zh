{
    "Just as it says, {}round(){} takes a real number and rounds it up or down to the nearest integer. In the special case where the number supplied is exactly a half-integer (1.5, 17.5, -2.5, etc), the number will be rounded to the nearest {}even{} value, for example, 2.5 would be rounded to 2, while 3.5 will be rounded to 4. This type of rounding is called {}bankers rounding{} and over large numbers of iterations or when using floating point maths, it gives a statistically better rounding than the more traditional \"round up if over .5 and round down otherwise\" approach.":"正如它所说，{}round(){} 接受一个实数并将其向上或向下舍入到最接近的整数。 在提供的数字恰好是半整数(1.5、17.5、-2.5 等)的特殊情况下，数字将四舍五入为最接近的{}偶数{}值，例如，2.5 将四舍五入为 2， 而 3.5 将四舍五入为 4。这种类型的四舍五入称为{}银行家四舍五入{}，在大量迭代中，或者当使用浮点数学时，它给出的舍入在统计上优于更传统的“如果超过 .5 则向上舍入，否则向下舍入”方法。",
    "The above code will add a rounded integer onto the score value.":"上面的代码将在分值上添加一个四舍五入的整数。",
    "The number to round.":"要调整的数字。",
    "What this means is that if the fraction of a value is 0.5, then the rounded result is the {}even integer{} nearest to the input value. So, for example, 23.5 becomes 24, as does 24.5, while -23.5 becomes -24, as does -24.5. This method treats positive and negative values symmetrically, so is therefore free of sign bias, and, more importantly, for reasonable distributions of values, the expected (average) value of the rounded numbers is the same as that of the original numbers.":"这意味着如果值的小数部分为 0.5，则四舍五入的结果是最接近输入值的{}偶数整数{}。 因此，例如，23.5 和 24.5 一样变成 24，而 -23.5 和 -24.5 一样变成 -24。 这种方法对称地对待正值和负值，因此没有符号偏差，更重要的是，对于值的合理分布，四舍五入后的数字的预期(平均)值与原始数字的预期(平均)值相同。"
}