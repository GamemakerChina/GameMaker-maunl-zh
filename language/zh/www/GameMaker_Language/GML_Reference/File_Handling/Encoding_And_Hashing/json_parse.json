{
    "After parsing the JSON string above, if you know its structure, you can use various&nbsp;{}Variable Functions{}&nbsp;to check and read its contents:":"解析完上面的 JSON 字符串，如果你知道它的结构，你可以使用各种 {} 变量函数 {} 来检查和读取它的内容:",
    "Any runtime values serialised by&nbsp;{}{}json_stringify{}{}&nbsp;will be converted back to runtime values (e.g. {}handles{} and values like {}int64{}, {}NaN{} and {}infinity{}), however this conversion can be disabled by passing {}true{} into the optional&nbsp;{}{}inhibit_string_convert{} argument, meaning these will remain as strings.{}":"由 {}{}json_stringify{}{} 序列化的任何运行时值都将转换回运行时值 (例如 {}handles{} 以及 {}int64{}、{}NaN{} 和 {}infinity{} 等值)，不过，可以通过将 {}true{} 传递到可选的 {}{}inhibit_string_convert{} 参数来禁用此转换，这意味着这些转换将保留为字符串。{}",
    "Filter Function&nbsp;{}{}OPTIONAL{}{}":"过滤功能 {}{} 可选 {}{}",
    "If the supplied JSON string includes {}undefined{}&nbsp;as a value for any property, it will be converted to {}pointer_null{} upon being parsed.":"如果提供的 JSON 字符串包含 {}undefined{} 作为任何属性的值，它将在解析时转换为 {}pointer_null{}。",
    "It takes two arguments&nbsp;{}(key, value){} where {}key{} is the struct key name ({}{}String{}{}) or array index ({}{}Real{}{}), and {}value{} is what\u0027s stored in that key/index.":"它需要两个参数 {}(key, value){}，其中 {}key{} 是结构体键名称 ({}{}String{}{}) 或数组索引 ({}{}Real{}{})，{} 值 {} 是存储在该键 / 索引中的内容。",
    "Note how the filter function runs on the struct ({}myObj{}) and array ({}myArray{}) in the JSON and then also on each item inside the struct and array. It also runs on the root structure with the key set to an empty string (here, seen on the last line).":"请注意过滤器函数如何在 JSON 中的结构体 ({}myObj{}) 和数组 ({}myArray{}) 上运行，以及如何在结构体和数组内的每个项目上运行。它还在根结构上运行，并将键设置为空字符串 (此处，如最后一行所示)。",
    "See&nbsp;{}{}json_stringify{}{}&nbsp;for more information on how GameMaker interacts with the JSON format.":"请参阅 {}{}json_stringify{}{}，了解有关 GameMaker 如何与 JSON 格式交互的更多信息。",
    "The JSON string to parse":"要解析的 JSON 字符串",
    "The above code creates a new string containing a valid JSON object, and then calls {}json_parse(){} to convert that string into a GML struct. It then prints the result to the debug log.":"上面的代码创建了一个包含有效 JSON 对象的新字符串，然后调用 {}json_parse(){} 将该字符串转换为 GML 结构。然后将结果打印到调试日志。",
    "The above code creates a new string containing valid JSON, and then calls&nbsp;{}{}json_parse{}{} to convert that string into a GML struct. It then prints the result to the debug log.":"上面的代码创建一个包含有效 JSON 的新字符串，然后调用 {}{}json_parse{}{} 将该字符串转换为 GML 结构。然后它将结果打印到调试日志中。",
    "The above code takes a JSON string containing an array inside a struct. Then {}json_parse(){} is run with a filter function that multiplies each value with 1000, only when it\u0027s a {}{}Real{}{}. Otherwise it simply returns the value itself.":"上面的代码采用一个 JSON 字符串，其中包含一个结构体中的数组。然后，使用过滤器函数运行 {}json_parse(){}，该函数将每个值乘以 1000( 仅当每个值是 {}{}Real{}{} 时)。否则它只是返回值本身。",
    "The above code takes the same JSON string from the previous example, and converts it into a GML struct, however this time it uses a filter function.":"上面的代码采用与上一个示例相同的 JSON 字符串，并将其转换为 GML 结构，但是这次它使用了过滤器函数。",
    "The above code will parse the given&nbsp;JSON string, generating the following console output:":"上面的代码将解析给定的 JSON 字符串，生成以下控制台输出:",
    "The filter function can return a new value, which replaces the key\u0027s value in the final converted format returned by&nbsp;{}{}json_parse{}{}.":"过滤器函数可以返回一个新值，该值会替换 {}{}json_parse{}{} 返回的最终转换格式中的键值。",
    "The filter function prints the key and value of each item to the Output Log:":"过滤器函数将每个项目的键和值打印到输出日志中：",
    "The function optionally takes a&nbsp;{}{}Function{}{}, which runs once for each value in the structure, including all nested structs/arrays and all the values inside them.":"该函数可以选择采用 {}{}Function{}{}，该函数对结构中的每个值运行一次，包括所有嵌套结构 / 数组及其内部的所有值。",
    "The resulting structure looks like this:":"结果结构如下所示：",
    "This function can be used to parse a JSON string (either previously created using {}json_stringify{} or from any valid source), and convert it into a collection of arrays or structs, where an array is the equivalent of a JSON array and a struct is the equivalent of a JSON object. You supply the string to parse, and the function will return the top level array or struct which can then be used in your code. If you are not sure of the contents of the JSON, you can use the different {}Variable Functions{} (like {}{}typeof(){}{} and&nbsp;{}{}variable_struct_get_names(){}{}&nbsp;in case of a struct) to check the returned contents. Note that trying to parse an&nbsp;invalid value&nbsp;(i.e.: not a string) will throw an exception error.":"此函数可用于解析 JSON 字符串 (之前使用 {}json_stringify{} 创建或来自任何有效来源)，并将其转换为数组或结构的集合，其中数组等同于 JSON 数组和 结构 相当于一个 JSON 对象。 您提供要解析的字符串，该函数将返回顶级数组或结构，然后可以在您的代码中使用它们。 如果您不确定 JSON 的内容，您可以使用不同的 {} 变量函数 {}( 例如 {}{}typeof(){}{} 和 {}{}variable_struct_get_names(){}{} 如果是一个结构) 检查返回的内容。 请注意，尝试解析无效值 (即：不是字符串) 将引发异常错误。",
    "This function can be used to parse a JSON string (either previously created using&nbsp;{}{}json_stringify{}{}&nbsp;or from any valid source), and convert it into a collection of arrays or structs, where an array is the equivalent of a JSON array and a struct is the equivalent of a JSON object.":"此函数可用于解析 JSON 字符串 (之前使用 {}{}json_stringify{}{} 创建或来自任何有效源)，并将其转换为数组或结构的集合，其中数组相当于 JSON 数组和结构相当于 JSON 对象。",
    "This function only allows you to load JSON files with a maximum nesting limit of 128.":"此函数仅允许您加载最大嵌套限制为 128 的 JSON 文件。",
    "Trying to parse an&nbsp;invalid value&nbsp;(i.e.: not a string, or invalid JSON) will throw an exception error.":"尝试解析无效值 (即：不是字符串或无效 JSON) 将引发异常错误。",
    "When using this function there are some important things to note:":"在使用这个函数时，有一些重要的事情需要注意:",
    "You supply the string to parse, and the function will return the top level array or struct which can then be used in your code. If you are not sure of the contents of the JSON, you can use the different {}Variable Functions{} (like {}{}typeof(){}{} and&nbsp;{}{}variable_struct_get_names(){}{}&nbsp;in case of a struct) to check the returned contents.":"您提供要解析的字符串，该函数将返回顶级数组或结构，然后可以在代码中使用它们。如果您不确定 JSON 的内容，可以使用不同的 {} 变量函数 {}( 例如 {}{}typeof(){}{} 和 {}{}variable_struct_get_names(){}{})，以防万一结构体) 来检查返回的内容。",
    "{}NOTE{}&nbsp;You will notice that the JSON string contains&nbsp;a backslash ({}\\{}) before every double quote ({}\"{}) inside it:{} {} {}json = \"{&nbsp;{}\\\"&nbsp;{}myObj{}{} {} This is to ensure that the double quote is read as an actual character within the string, instead of being read as part of the code and closing the string prematurely. This way we are using a backslash to \"escape\" the double quote.{} {} If you are loading JSON from an external file however, there is no need to escape characters in that file and doing so may result in errors during parsing. ":"{}注意{} 你会注意到 JSON 字符串中每个双引号 ({}\"{}) 之前都包含一个反斜杠 ({2}\\{3}): {}{}{}json = \"{{}\\\" {}myObj{}{}{} 这是为了确保双引号作为字符串中的一个实际字符被读取，而不是作为代码的一部分被读取并过早地关闭字符串。在这种情况下，我们使用反斜杠来“转义”双引号。{}{} 但是，如果从外部文件加载 JSON，则不需要转义该文件中的字符，这样做可能会在解析过程中导致错误。",
    "{}NOTE{}&nbsp;You will notice that the JSON string contains&nbsp;a backslash ({}\\{}) before every double quote ({}\"{}) inside it:{} {} {}json = \"{&nbsp;{}\\\"&nbsp;{}myObj{}{} {} This is to ensure that the double quote is read as an actual character within the string, instead of being read as part of the code and closing the string prematurely. This way we are using a backslash to \"escape\" the double quote.{} {} If you are loading JSON from an external file however, there is no need to escape characters in that file. ":"{} 注意{} 您会注意到 JSON 字符串在其中的每个双引号 ({}\"{}) 之前都包含一个反斜杠 ({}\\{})：{}{}{}json = \"{{}\\\"{}myObj{}{}{} 这是为了确保双引号被读取为字符串中的实际字符，而不是被读取为代码的一部分并过早地关闭字符串。这样我们就可以使用反斜杠来 \" 转义 \" 双引号。{}{} 但是，如果您从外部文件加载 JSON，则无需转义该文件中的字符。",
    "{}null{} values are parsed as {}undefined{}.":"{}null{} 值被解析为 {} undefined {}。",
    "{}{}NOTE{}{}&nbsp;When overriding a key\u0027s value in the filter function (using {}return{}), make sure you check its type first, as the filter function runs for the root structure and any nested structures as well, meaning accidentally overriding them will result in a broken final structure. See&nbsp;{}Example 3{} at the bottom.":"{}{} 注意{}{} 在过滤器函数中覆盖键的值 (使用 {}return{}) 时，请确保首先检查其类型，因为过滤器函数也会针对根结构和任何嵌套结构运行，这意味着意外覆盖它们将导致最终结构损坏。请参阅底部的 {} 示例 3{}。",
    "{}{}OPTIONAL{}{}&nbsp;Filter function that processes each item. Syntax:&nbsp;{}function(key, value) -&gt; new_value{}":"{}{} 可选{}{} 处理每个项目的过滤器函数。语法：{} function(key, value) -&gt; new_value {}",
    "{}{}OPTIONAL{}{}&nbsp;Set this to {}true{} to disable converting strings into runtime references. Default value: {}false{}":"{}{} 可选{}{} 将此设置为 {}true{} 以禁止将字符串转换为运行时引用。默认值：{}false{}"
}