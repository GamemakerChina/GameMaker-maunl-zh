{
    "After parsing the JSON string above, if you know its structure, you can use various&nbsp;{}Variable Functions{}&nbsp;to check and read its contents:":"解析完上面的 JSON 字符串，如果你知道它的结构，你可以使用各种 {} 变量函数 {} 来检查和读取它的内容:",
    "If the supplied JSON string includes {}undefined{}&nbsp;as a value for any property, it will be converted to {}pointer_null{} upon being parsed.":"如果提供的 JSON 字符串包含 {}undefined{} 作为任何属性的值，它将在解析时转换为 {}pointer_null{}。",
    "The JSON string to parse":"要解析的 JSON 字符串",
    "The above code creates a new string containing a valid JSON object, and then calls {}json_parse(){} to convert that string into a GML struct. It then prints the result to the debug log.":"上面的代码创建了一个包含有效 JSON 对象的新字符串，然后调用 {}json_parse(){} 将该字符串转换为 GML 结构。然后将结果打印到调试日志。",
    "The above code will parse the given&nbsp;JSON string, generating the following console output:":"上面的代码将解析给定的 JSON 字符串，生成以下控制台输出:",
    "This function can be used to parse a JSON string (either previously created using {}json_stringify{} or from any valid source), and convert it into a collection of arrays or structs, where an array is the equivalent of a JSON array and a struct is the equivalent of a JSON object. You supply the string to parse, and the function will return the top level array or struct which can then be used in your code. If you are not sure of the contents of the JSON, you can use the different {}Variable Functions{} (like {}{}typeof(){}{} and&nbsp;{}{}variable_struct_get_names(){}{}&nbsp;in case of a struct) to check the returned contents. Note that trying to parse an&nbsp;invalid value&nbsp;(i.e.: not a string) will throw an exception error.":"此函数可用于解析 JSON 字符串 (之前使用 {}json_stringify{} 创建或来自任何有效来源)，并将其转换为数组或结构的集合，其中数组等同于 JSON 数组和 结构 相当于一个 JSON 对象。 您提供要解析的字符串，该函数将返回顶级数组或结构，然后可以在您的代码中使用它们。 如果您不确定 JSON 的内容，您可以使用不同的 {} 变量函数 {}( 例如 {}{}typeof(){}{} 和 {}{}variable_struct_get_names(){}{} 如果是一个结构) 检查返回的内容。 请注意，尝试解析无效值 (即：不是字符串) 将引发异常错误。",
    "This function only allows you to load JSON files with a maximum nesting limit of 128.":"此函数仅允许您加载最大嵌套限制为 128 的 JSON 文件。",
    "When using this function there are some important things to note:":"在使用这个函数时，有一些重要的事情需要注意:",
    "{}NOTE{}&nbsp;You will notice that the JSON string contains&nbsp;a backslash ({}\\{}) before every double quote ({}\"{}) inside it:{} {} {}json = \"{&nbsp;{}\\\"&nbsp;{}myObj{}{} {} This is to ensure that the double quote is read as an actual character within the string, instead of being read as part of the code and closing the string prematurely. This way we are using a backslash to \"escape\" the double quote.{} {} If you are loading JSON from an external file however, there is no need to escape characters in that file and doing so may result in errors during parsing. ":"{} 注释 {} 你会注意到 JSON 字符串中每个双引号 ({}\"{}) 之前都包含一个反斜杠 ({}\\{}):{}{}json = {}\" {}\\\" {}myObj{}{}{} 这是为了确保双引号作为字符串中的一个实际字符被读取，而不是作为代码的一部分被读取并过早地关闭字符串。在这种情况下，我们使用反斜杠来“转义”双引号。{} 但是，如果从外部文件加载 JSON，则不需要转义该文件中的字符，这样做可能会在解析过程中导致错误。"
}