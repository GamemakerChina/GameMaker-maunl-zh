{
    "\"{}PNGCrush{}\" - The \"PNGCrush\" pragma will use the {}PNGCrush{} program on each texture created. Note that this can add significantly to the time that it takes to compile the game, so you don\u0027t want it on all the time, although it can make significant savings on final file size. This option only applies to Texture Groups that use the PNG format (see {}Group Settings{}).":"\"{}PNGCush{}\"-\"PNGCush\"程序将在创建的每个纹理上使用{}PNGCush{}程序。请注意，这会显着增加编译游戏所需的时间，因此您不希望它一直开着，尽管它可以显着节省最终文件大小。此选项仅适用于使用PNG格式的纹理组(请参阅{}组设置{})。",
    "\"{}Texgroup.Scale{}\", \"{}[TextureGroupName]{}\", \"{}[Scale Divisor]{}\" - The \"Texgroup.Scale\" will scale the given texture group on compile. You need to give an additional two arguments here: the \"[TexGroupName]\", which is the name (a string) of the texture group to scale, and the \"[Scale Divisor]\" (also a string), which is the divisor you wish to use for the scaling, i.e:\n      {}{}gml_pragma{}({}\"Texgroup.Scale\"{}, {}\"level1\"{}, {}\"2\"{});{}\n      This will half all the textures in the \"level1\" texture group.\n    ":"\"{}Texgroup.Scale{}\",\"{}[纹理组名称]{}\",\"{}[比例除数]{}\"-\"Texgroup.Scale\"将在编译时缩放给定的纹理组。您需要在这里给出额外的两个参数：\"[纹理组名称]\"，这是要缩放的纹理组的名称(字符串)，以及\"[比例除数]\"(也是一个字符串)，这是您希望用于缩放的除数，即：\n      {}{}gml_pragma{}({}\"Texgroup.Scale\"{}, {}\"level1\"{}, {}\"2\"{});{}\n这将是\"级别1\"纹理组中所有纹理的一半。",
    "\"{}UnityBuild{}\", \"{}[enable/disable]{}\" - If you call the function with this pragma and set the enable/disable argument to {}true{} then on compile it will collapse all the .cpp files in the project into a single file which it then uses to build everything, for example:\n      {}{}gml_pragma{}({}\"UnityBuild\"{}, {}\"true\"{});{}\n      The benefit of doing a unity build is that builds are faster but the down side is that it does a {}full{} build each time so even if you change a single part of the code it will build everything again without using any cached files. This has been added specifically for the Xbox One export using the YYC although it can be called for other builds ({}YYC only{}). For more information on unity builds, please see {}here{}.\n    ":"\"{}UnityBuild{}\",\"{}[启用/禁用]{}\"-如果您使用此Pragma调用函数并将启用/禁用参数设置为{}true{}，那么在编译时，它将折叠项目中所有的cpp文件到一个文件中，然后它使用该文件来构建所有内容，例如：\n      {}{}gml_pragma{}({}\"UnityBuild\"{}, {}\"true\"{});{}\n进行统一构建的好处是构建速度更快，但缺点是它每次都会进行{}完整{}构建，因此即使您更改代码的单个部分，它也会在不使用任何缓存文件的情况下再次构建所有内容。这是专门为使用YYC的Xbox One导出添加的，尽管它可以用于其他版本({}仅限YYC{})。有关统一构建的更多信息，请参阅{}此处{}。",
    "\"{}forceinline{}\" - When the function is called with the \"forceinline\" pragma in a {}script function{}, the YYC will compile the project with the function inline, rather than referenced. This will give a further processing boost, but care must be taken when using it as it will also inflate the final executable file size, especially if the in-lined code is large and/or used in multiple different places, as well as greatly increase the compile time. Note that this pragma is {}only valid when building using the YYC{}.":"{}forceinline{}-在{}脚本函数{}中使用\"forceinline\"程序调用函数时，yyc将使用内嵌函数编译项目，而不是引用。这将进一步提高处理速度，但在使用时必须小心，因为它还会增加最终可执行文件的大小，特别是在内嵌代码较大和/或用于多个不同位置的情况下，以及大大增加编译时间。请注意，{}只有在使用yyc生成{}时，此命令才有效。",
    "\"{}global{}\", \"{}[gml code]{}\" - The \"global\" pragma permits you to call some GML code formatted as a string, at a {}global{} scope, at compile time, before the first room of the game executes. For example:\n      {}{}gml_pragma{}({}\"global\"{}, {}\"Init()\"{});{}\n      This will call the script function \"Init\" before the first room of the game is run. Note that the GML supplied as the second argument {}must be a compile time constant{}, and also note that you cannot use this pragma to create instances or perform any operations that require a room (or anything in a room) to function.\n    ":"\"{}global{}\",\"{}[GML代码]{}\"-\"global\"编译指示允许您在编译时，在游戏的第一个房间执行之前，在{}全局{}范围内调用一些格式化为字符串的GML代码。例如：\n      {}{}gml_pragma{}({}\"global\"{}, {}\"Init()\"{});{}\n这将在游戏的第一个房间运行之前调用脚本函数\"Init\"。请注意，作为第二个参数{}提供的GML必须是编译时常量{}，并且还请注意，您不能使用此命令来创建实例或执行任何需要房间(或房间中的任何内容)才能运行的操作。",
    "A string with one of the commands listed above.":"带有上面列出的命令之一的字符串。",
    "Some of the available commands require an optional argument or arguments. These are explained above for each command.":"一些可用的命令需要一个或多个可选参数。上面为每个命令解释了这些。",
    "The above example code will force the script function where it is used to be in-lined on compile.":"上面的示例代码将强制编译时使用内联的脚本函数。",
    "The {}gml_pragma{} function affects how the given target compiles your code and should be called with the different commands to further optimise the final compilation of your project. These commands are effectively {}pre-processed{} before the game is compiled and so the function can be placed anywhere in your project and it will still be processed before the game is fully compiled. The available commands are as follows:":"{}gml_pragma{}函数会影响给定目标编译代码的方式，应使用不同的命令调用该函数，以进一步优化项目的最终编译。这些命令在游戏编译之前得到了有效的{}预处理{}，因此该函数可以放置在您项目中的任何位置，并且在游戏完全编译之前仍然会得到处理。可用命令如下：",
    "{}NOTE{}: The first argument to the {}gml_pragma{} function {}must be a compile time string constant{} and not a variable.":"{}注意{}：{}gml_pragma{}函数的第一个参数{}必须{}是编译时字符串常量，而不是变量。"
}