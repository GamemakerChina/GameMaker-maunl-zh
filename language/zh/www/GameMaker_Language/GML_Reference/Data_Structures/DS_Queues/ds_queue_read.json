{
    "Note that if the specified DS string was written by the GameMaker: Studio 1.2.x runtime (or older),&nbsp;you should specify the optional argument \"legacy\", setting it to {}true{} as the string format changed after that.":"请注意，如果指定的Ds字符串是GameMaker编写的：Studio 1.2. x运行时(或更早版本)，您应该指定可选参数\"legacy\"，将其设置为{}true{}，作为之后更改的字符串格式。",
    "The above code creates a queue and stores the index in the variable \"queue\". It then opens an {}ini{} file and reads a string from that, checking to make sure that the string is not returned as empty first. This string is then read into the newly created DS queue.":"上述代码创建一个队列并将索引存储在变量\"队列\"中。然后打开{}ini{}文件并从中读取字符串，检查以确保字符串不会首先返回为空。然后将此字符串读入新创建的DS队列。",
    "The id of the data structure to read into.":"要读入的数据结构的ID。",
    "The string to read from.":"要从中读取的字符串。",
    "With this function you can recreate a saved DS queue&nbsp;(one that has previously been written as a string using {}{}ds_queue_write(){}{}). You must first create a new DS queue&nbsp;to read the string into, and if the DS queue&nbsp;already exists and has information stored in it, then this will be cleared before reading. This function is of vital importance when creating save/load mechanisms for your game.":"使用此函数，您可以重新创建一个已保存的DS队列(以前使用{}{}ds_queue_write(){}{}作为字符串写入的队列)。您必须首先创建一个新的DS队列以读取该字符串，如果DS队列已存在并且其中存储有信息，则在读取之前将清除该队列。为游戏创建保存/加载机制时，此函数至关重要。",
    "{}OPTIONAL{}&nbsp;Can be either {}true{} or {}false{} or omitted completely.":"{}可选{}可以为{}真{}或{}假{}，也可以完全省略。"
}