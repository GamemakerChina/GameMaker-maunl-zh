{
    "The above code will check the value of the built in global variable \"lives\" and if it is 0, it destroys the DS grid indexed in the variable \"Wall_Grid\" and then changes rooms.":"上述代码将检查内置全局变量\"life\"的值，如果该值为0，则会销毁变量\"Wall_Grid\"中索引的D网格，然后更改房间。",
    "This function will remove the given grid data-structure from memory, freeing up the resources it was using and removing all values that it contained. This function should always be used when you are finished using the DS grid to prevent memory leaks that can slow down and crash your game.":"此函数将从内存中删除给定的网格数据结构，从而释放它使用的资源并删除它包含的所有值。完成使用D网格时，应始终使用此函数，以防止内存泄漏，从而降低速度并导致游戏崩溃。",
    "This index of the grid to destroy.":"要销毁的网格的索引。",
    "{}IMPORTANT!{} When you create a data structure, the index value to identify it is an integer value starting at 0. This means that data structures of different types can have the {}same{} index value, so if in doubt you should be using the {}{}{}ds_exists(){}{}{} function before accessing them. Also note that indices are re-used, so a destroyed data structure index value may be used by a newly created one afterwards so we recommend always setting the variable that held the DS index to -1 after destroying.":"{}重要!{}创建数据结构时，用于标识它的索引值是一个从0开始的整数值。这意味着不同类型的数据结构可以具有{}相同的{}索引值，因此如果有疑问，您应该在访问之前使用{}{}{}ds_exists(){}{}{}函数。另请注意，索引将被重复使用，因此新创建的索引之后可能会使用已销毁的数据结构索引值，因此我们建议在销毁之后始终将保留D索引的变量设置为-1。"
}