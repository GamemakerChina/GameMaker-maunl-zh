{
    "A DS stack is a so called last-in-first-out (LIFO) data structure, similar to a {}DS queue{}. You can&nbsp;{}push{}&nbsp;values onto a stack and then remove them again by&nbsp;{}popping{}&nbsp;them from the stack, where the value that was pushed on the stack most recently is the first to be popped from it again (just think of a stack of coins, where each coin that you add has to be removed again first before you can get to the rest of the coins beneath). Stacks are often used when there are interrupts to handle, or when having recursive functions, or even when constructing a rudimentary AI for your games.":"Ds堆栈是所谓的\"先进先出\"(Lifo)数据结构，类似于{}个Ds队列{}。您可以将{}个值推送到堆栈上，然后从堆栈中弹出{}个值，再次删除这些值。在堆栈中，最近推送到堆栈上的值是第一个再次从中弹出的值(只需考虑一个硬币堆栈，其中您添加的每个硬币必须先再次删除，然后才能到达下面的其余硬币)。当存在需要处理的中断时，或者当具有递归函数时，甚至当为游戏构建基本的Ai时，通常会使用堆栈。",
    "The following functions exist that deal with DS stacks:":"存在以下处理Ds堆栈的函数：",
    "{}NOTE{}: As with all dynamic resources, data structures take up memory and so should {}always{} be destroyed when no longer needed to prevent memory leaks which will slow down and eventually crash your game.":"{}注意{}：与所有动态资源一样，数据结构占用内存，因此当不再需要防止内存泄漏时，应始终销毁{}个{}，这将降低速度并最终导致游戏崩溃。",
    "{}NOTE{}: If you need to check if a data structure exists, you can use the {}{}{}ds_exists(){}{}{} function.":"{}注意{}：如果需要检查是否存在数据结构，可以使用{}{}{}ds_exists(){}{}{}函数。"
}