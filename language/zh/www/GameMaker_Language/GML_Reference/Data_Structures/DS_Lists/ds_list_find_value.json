{
    "The above code checks the list indexed in the variable \"list\" at the last position in the list and stores the returned value in the variable \"val\".":"上述代码在列表的最后一个位置检查变量\"list\"中索引的列表，并将返回的值存储在变量\"val\"中。",
    "The id of the list to use.":"要使用的列表的ID。",
    "The position to look at, where 0 corresponds to the very beginning of the list and the final position is {}ds_list_size(id)-1{}.":"要查看的位置，其中0对应于列表的最初位置，最终位置为{}ds_list_size(id)-1{}。",
    "With this function you can check the given list position and the value held within the list for that position will be returned. Note that if you give a position that is outside of the given list size (i.e.: position 11 in a 10 value list) then the function may return {}undefined{} {}or{} 0. This is because when you create the list, internally the first few entries in the list are set to 0 to minimize performance issues when initially adding items to the list (although the {}{}ds_list_size(){}{} function will still return 0 on a newly created list). If you wish to ensure that the list is \"truly\" empty on create, then you should call {}{}ds_list_clear(){}{} after creating the list, which will then mean that any values returned for unpopulated list slots will be {}undefined{}, which you can then check consistently using the {}{}is_undefined(){}{} function.":"使用此函数，您可以检查给定的列表位置，列表中为该位置保留的值将被返回。请注意，如果给定的位置超出给定的列表大小(即10值列表中的位置11)，则函数可能会返回{}个未定义的{}{}或{}个0。这是因为创建列表时，在内部，列表中的前几个条目将设置为0，以便在最初向列表中添加项目时最大限度地减少性能问题(尽管{}{}ds_list_size(){}{}函数仍将在新创建的列表中返回0)。如果希望在创建时确保列表\"真正\"为空，则应在创建列表后调用{}{}ds_list_clear(){}{}，这意味着为未填充的列表动态内容返回的任何值都将是{}未定义的{}，然后可以使用{}{}is_undefined(){}{}函数进行一致性检查。"
}