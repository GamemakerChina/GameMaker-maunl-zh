{
    "It is also worth noting that if the position that has been marked changes within the list, the \"mark\" will move with it, so if you have marked position 3 in the list (for example) and then insert 2 more items below it so it moves up to position 5, it will {}still{} be marked as a map.":"另外值得注意的是，如果已标记的位置在列表中发生变化，则\"mark\"将随之移动，因此，如果您在列表中标记了位置3(例如)，然后在其下面再插入2个项目，使其向上移动到位置5，则仍将{}标记为地图。",
    "The ID of the list to mark.":"要标记的列表的 ID。",
    "The above code creates a DS map and then populates it with two keys, each containing an array of values. This map is then added into the given DS list , and the position \"marked\" as such so that it can be correctly encoded later.":"上述代码创建一个DS映射，然后使用两个密钥填充该映射，每个密钥都包含一个值数组。然后将该映射添加到给定的DS列表中，并将该位置\"标记为\"，以便以后可以对其进行正确编码。",
    "The above code creates a DS map and then populates it with two keys, each containing an array of values. This map is then added to the given DS list , and the position \"marked\" as such so that it can be correctly encoded later.":"上面的代码创建一个 DS 映射，然后用两个键填充它，每个键包含一个值数组。然后将该映射添加到给定的 DS 列表中，并 \" 标记 \" 该位置，以便稍后可以对其进行正确编码。",
    "The id of the list to mark.":"要标记的列表的ID。",
    "The position within the list to mark.":"列表中要标记的位置。",
    "This function will \"mark\" (or \"flag\") a given position within a previously created DS list as holding a {}DS map{}.":"此函数会将先前创建的 DS 列表中的给定位置 \" 标记 \"( 或 \" 标记 \") 为持有 {}DS 地图 {}。",
    "This function will \"mark\" (or \"flag\") a given position within a previously created DS list as holding a {}DS map{}. This functionality is required when encoding JSON strings (which you can create using {}{}json_encode(){}{}), but can also be useful when nesting data-structures, as items marked in this way will automatically be garbage collected (destroyed) when the parent DS list is destroyed. This means that you do not have to manually go through the list contents and destroy the marked data structures individually before destroying the \"parent\" list. However, if you delete the list position individually, the data structure it contained will {}not{} be garbage collected and you should call the appropriate DS map destroy function before deleting the parent list position. Also note that if you call the function {}{}ds_list_clear(){}{} on a list, any items flagged as maps will be destroyed as well when the list is cleared.":"此函数将在先前创建的DS列表中\"标记\"(或标记)给定的位置，以保存{}DS映射{}。在编码JSON字符串(您可以使用{}{}json_encode(){}{}创建)时需要此函数，但在嵌套数据结构时也很有用，因为在销毁父DS列表时，以此方式标记的项目将自动被垃圾收集(销毁)。这意味着，在销毁\"父\"列表之前，您不必手动浏览列表内容并单独销毁标记的数据结构。但是，如果单独删除列表位置，则其中包含的数据结构{}将不会{}被垃圾收集，您应该在删除父列表位置之前调用相应的DS映射销毁函数。另请注意，如果在列表中调用函数{}{}ds_list_clear(){}{}，则在清除列表时，任何标记为映射的项目也将被销毁。",
    "This functionality is required when encoding JSON strings (which you can create using {}{}json_encode{}{}), but can also be useful when nesting data structures, as items marked in this way will automatically be garbage collected (destroyed) when the parent DS list is destroyed. This means that you do not have to manually go through the list contents and destroy the marked data structures individually before destroying the \"parent\" list. However, if you delete the list position individually, the data structure it contained will {}not{} be garbage collected and you should call the appropriate DS map destroy function before deleting the parent list position. Also note that if you call the function&nbsp;{}{}ds_list_clear{}{} on a list, any items flagged as maps will be destroyed as well when the list is cleared.":"编码 JSON 字符串 (您可以使用 {}{}json_encode{}{} 创建) 时需要此功能，但在嵌套数据结构时也很有用，因为以这种方式标记的项目将在以下情况下自动被垃圾收集 (销毁)：父 DS 列表被破坏。这意味着在销毁 \" 父 \" 列表之前，您不必手动检查列表内容并单独销毁标记的数据结构。但是，如果您单独删除列表位置，则其包含的数据结构将 {} 不会 {} 被垃圾回收，并且您应该在删除父列表位置之前调用适当的 DS 映射销毁函数。另请注意，如果您在列表上调用函数 {}{}ds_list_clear{}{}，则当列表被清除时，所有标记为地图的项目也将被销毁。",
    "{}{}NOTE{}{}&nbsp;If the position that has been marked changes within the list, the \"mark\" will move with it, so if you have marked position 3 in the list (for example) and then insert 2 more items below it so it moves up to position 5, it will {}still{} be marked as a list.":"{}{} 注意{}{} 如果列表中已标记的位置发生变化，\"标记 \" 将随之移动，因此如果您在列表中标记了位置 3( 例如)，然后再插入 2 个项目因此它会移至位置 5，{} 仍然 {} 被标记为列表。"
}