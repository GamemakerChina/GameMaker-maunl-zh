{
    "This function creates a new list data structure and returns a {}{}Handle{}{}&nbsp;to it. This value should be stored in a variable and used in all further function calls relating to the list.":"此函数创建一个新的列表数据结构并向其返回一个 {}{} 句柄 {}{}。该值应存储在变量中，并在与列表相关的所有进一步函数调用中使用。",
    "This function will create a new list data-structure and return the index value. This value should be stored in a variable and used in all further function calls relating to the list. Note that if you try and access a value in the list {}before{} it has been populated - i.e. the list is \"empty\" - then the return value may be 0 since internally the first few entries in the list are set when created to minimize performance issues when initially adding items to the list (although the {}{}ds_list_size(){}{} function will still return 0 on a newly created list). If you wish to ensure that the list is \"truly\" empty on create, then you should call {}{}ds_list_clear(){}{} after creating the list, which will then mean that any values returned for unpopulated list slots will be {}undefined{}.":"此函数将创建一个新的列表数据结构并返回索引值。此值应存储在变量中，并用于与列表相关的所有进一步函数调用。请注意，如果您在{}之前尝试访问列表{}中的某个值，该值已被填充，即列表为\"空\"，则返回值可能为0，因为在内部，创建列表时会将列表中的前几个条目设置为最小化最初向列表中添加项时的性能问题(尽管{}{}ds_list_size(){}{}函数仍会在新创建的列表中返回0)。如果希望在创建时确保列表\"真正\"为空，则应在创建列表后调用{}{}ds_list_clear(){}{}，这意味着为未填充的列表动态内容返回的任何值都将{}未定义{}。",
    "This will create a new list and assign its index id to the instance variable \"list\".":"这将创建一个新列表，并将其索引ID分配给实例变量\"list\"。",
    "This will create a new list and assign its index id to the instance variable {}list{}.":"这将创建一个新列表并将其索引 ID 分配给实例变量 {}list{}。",
    "{}IMPORTANT!{} When you create a data structure, the index value to identify it is an integer value starting at 0. This means that data structures of different types can have the {}same{} index value, so if in doubt you should be using the {}{}{}ds_exists(){}{}{} function before accessing them. Also note that indexes are re-used, so a destroyed data structure index value may be used by a newly created one afterwards.":"{}重要!{}创建数据结构时，用于标识它的索引值是一个从0开始的整数值。这意味着不同类型的数据结构可以具有{}相同的{}索引值，因此如果有疑问，您应该在访问之前使用{}{}{}ds_exists(){}{}{}函数。另请注意，索引是重复使用的，因此销毁的数据结构索引值之后可能会被新创建的索引值使用。",
    "{}{}NOTE{}{}&nbsp;If you try and access a value in the list {}before{} it has been populated - i.e. the list is \"empty\" - then the return value may be 0 since internally the first few entries in the list are set when created to minimize performance issues when initially adding items to the list (although the&nbsp;{}{}ds_list_size{}{} function will still return 0 on a newly created list). If you wish to ensure that the list is \"truly\" empty on create, then you should call&nbsp;{}{}ds_list_clear{}{} after creating the list, which will then mean that any values returned for unpopulated list slots will be {}undefined{}.":"{}{} 注意{}{} 如果您在填充列表 {} 之前 {} 尝试访问列表中的值 (即列表为 \" 空 \")，则返回值可能为 0，因为在内部是前几个条目列表中的内容在创建时进行设置，以最大程度地减少最初向列表添加项目时的性能问题 (尽管 {}{}ds_list_size{}{} 函数在新创建的列表上仍将返回 0)。如果您希望确保列表在创建时 \" 真正 \" 为空，那么您应该在创建列表后调用 {}{}ds_list_clear{}{}，这意味着为未填充的列表槽位返回的任何值都将为 {} 不明确的 {}。"
}