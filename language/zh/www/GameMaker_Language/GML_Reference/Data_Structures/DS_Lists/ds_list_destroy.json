{
    "The above code will check the value of the built in global variable \"lives\" and if it is 0, it destroys the DS list indexed in the variable \"AI_list\" and then changes rooms.":"上述代码将检查内置全局变量\"life\"的值，如果为0，则会销毁变量\"AI_list\"中索引的Ds列表，然后更换房间。",
    "The id of the data structure to remove.":"要删除的数据结构的ID。",
    "This function will remove the given list data-structure from memory, freeing up the resources it was using and removing all values that it contained. This function should always be used when you are finished using the ds_list to prevent memory leaks that can slow down and crash your game. Note that destroying a list will de-reference any data structures stored in it giving a memory leak, so you would need to go through the list and destroy all data structure items manually before destroying it to prevent this. The only time this is not required is when you have flagged any items in the list as another {}DS list{} or as a {}DS map{}, in which case these items will be destroyed and their memory cleaned up automatically as well.":"此函数将从内存中删除给定的列表数据结构，从而释放它正在使用的资源并删除它包含的所有值。完成使用ds_list时，应始终使用此功能，以防止内存泄漏，从而降低游戏速度并导致游戏崩溃。请注意，销毁列表将取消引用存储在其中的任何数据结构，从而导致内存泄漏，因此您需要在销毁列表之前手动查看并销毁所有数据结构项，以防止出现这种情况。唯一不需要执行此操作的时间是将列表中的任何项目标记为另一个{}个D列表{}或{}个D映射{}时，在这种情况下，这些项目将被销毁，并自动清理其内存。",
    "{}IMPORTANT!{} When you create a data structure, the index value to identify it is an integer value starting at 0. This means that data structures of different types can have the {}same{} index value, so if in doubt you should be using the {}{}{}ds_exists(){}{}{} function before accessing them. Also note that indices are re-used, so a destroyed data structure index value may be used by a newly created one afterwards so we recommend always setting the variable that held the DS index to -1 after destroying.":"{}重要信息!{}创建数据结构时，用于标识它的索引值是一个从0开始的整数值。这意味着不同类型的数据结构可以具有{}相同的{}索引值，因此如果有疑问，您应该在访问之前使用{}{}{}ds_exists(){}{}{}函数。另请注意，索引将被重复使用，因此新创建的索引之后可能会使用已销毁的数据结构索引值，因此我们建议在销毁之后始终将保留D索引的变量设置为-1。"
}