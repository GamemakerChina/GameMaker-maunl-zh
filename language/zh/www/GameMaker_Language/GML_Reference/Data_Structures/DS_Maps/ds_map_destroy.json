{
    "DS maps take up space in memory, which is allocated to them when they are created. This means that you also need to free this memory when the DS map is not needed to prevent errors, memory leaks and loss of performance when running your game. This function does just that. Note that destroying a map will de-reference any data structures stored in the map giving a memory leak, so you would need to go through the map and destroy all data structure items manually before destroying it to prevent this. The only time this is not required is when you have flagged any items in the map as a {}DS list{} or as another {}DS map{}, in which case these items will be destroyed and their memory cleaned up automatically as well.":"D贴图占用内存空间，内存空间在创建D贴图时分配给它们。这意味着，当不需要DS映射来防止运行游戏时出现错误、内存泄漏和性能损失时，您还需要释放此内存。此函数就是这样。请注意，销毁映射将取消引用映射中存储的任何数据结构，从而导致内存泄漏，因此您需要在销毁映射之前手动完成映射并销毁所有数据结构项，以防止出现这种情况。的只有当您已将映射中的任何项目标记为{}个DS列表{}或另一个{}个DS映射{}时，才不需要这样做，在这种情况下，这些项目将被销毁并清理其内存也会自动。",
    "The above code will destroy the DS map&nbsp;with the id indexed in the variable \"inventory\".":"上述代码将销毁ID在变量\"清单\"中索引的DS映射。",
    "The id of the map to destroy.":"要销毁的映射的ID。",
    "{}IMPORTANT!{} When you create a data structure, the index value to identify it is an integer value starting at 0. This means that data structures of different types can have the {}same{} index value, so if in doubt you should be using the {}{}{}ds_exists(){}{}{} function before accessing them. Also note that indices are re-used, so a destroyed data structure index value may be used by a newly created one afterwards so we recommend always setting the variable that held the DS index to -1 after destroying.":"{}重要!{}创建数据结构时，用于标识它的索引值是一个从0开始的整数值。这意味着不同类型的数据结构可以具有{}相同的{}索引值，因此如果有疑问，应使用{}{}{}在访问ds_exists(){}{}{}函数之前。另请注意，索引是重复使用的，因此销毁的数据结构索引值可能会被新创建的索引值使用，因此我们建议总是将破坏后保持Ds索引的变量设置为-1。"
}