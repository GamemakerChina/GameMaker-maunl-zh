{
    "Create a WebSocket using TCP. ({}{}NOTE{}: Use {}Async{} functions for connecting through WebSockets{})":"使用Tcp创建网络套接字。({}{}注{}:使用{}异步{}函数通过网络套接字进行连接{})",
    "Create a secure WebSocket using TCP.":"使用Tcp创建安全的WebSocket。",
    "Create a socket using TCP.":"使用Tcp创建套接字。",
    "Create a socket using UDP.":"使用Udp创建套接字。",
    "Socket Type Constant":"套接字类型常量",
    "The above code will check whether the game is running in a browser or not and create a new TCP or Web socket before attempting to connect through that to the given IP address on the given port.":"上述代码将检查游戏是否在浏览器中运行，并在尝试通过Tcp或Web套接字连接到给定端口上的给定Ip地址之前创建新的Tcp或Web套接字。",
    "The type of socket connection to create (see the constants listed above).":"要创建的套接字连接的类型(请参阅上面列出的常量)。",
    "This function is used to create a new client socket for your game to communicate over the network. You must define the socket type (see the list of constants below) and the function will return a unique {}id{} for that socket, which should be used in all further function calls for that socket, or a value of less than 0 if the connection fails.":"此函数用于为游戏创建新的客户端套接字，以便通过网络进行通信。您必须定义套接字类型(请参阅下面的常量列表)，函数将为该套接字返回唯一的{}id{}，该值应用于该套接字的所有进一步函数调用;如果连接失败，则返回小于0的值。",
    "{}NOTE 1{}&nbsp;It is also possible to secure your simple&nbsp;WebSocket&nbsp;({}network_socket_ws{}) by using the&nbsp;{}wss://{}&nbsp;protocol in your URLs.":"{}注意1{}还可以使用URL中的{}wss://{}协议来保护简单网络套接字({}network_socket_ws{})。",
    "{}NOTE 2{}&nbsp;* Secure WebSockets will not work on UWP and Xbox One when using the legacy XDK platform, however they will work on those targets when using GDK.":"{}注2{}*使用传统Xdk平台时，安全网络套接字在Uwp和Xbox One上不起作用，但在使用Gdk时，它们将在这些目标上起作用。",
    "{}TIP{} You can use the IP \"127.0.0.1\" to connect back to the same device that is running the game.":"{}提示{}您可以使用Ip\"127.0.0.1\"连接回运行游戏的同一设备。",
    "{}{}IMPORTANT{}{}&nbsp;iOS 14 and later require that you request the multicast entitlement ({}com.apple.developer.networking.multicast{}) and enable it in order to {}send and receive{}&nbsp;multicasts and broadcasts.{} Moreover, iOS 14 does not show the consent modal dialog to the user until a packet is first sent. So the alert will not be shown if the UDP socket only receives.{} A way to work around this is to send an empty \"dummy\" packet so that the consent modal is triggered.":"{}{}重要{}{}iOS 14和更高版本要求您请求多播授权({}com.apple.developer.networking.multicast{})并启用它，以便{}发送和接收{}多播和广播。{}此外，在首次发送数据包之前，iOS 14不向用户显示同意模式对话框。因此，如果Udp套接字仅接收，则不会显示警报。{}解决此问题的一种方法是发送一个空的\"虚拟\"数据包，以便触发同意模式。"
}