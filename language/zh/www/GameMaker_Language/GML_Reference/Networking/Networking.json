{
    "Basically, a socket is an object which can send, receive, connect and listen to {}ports{} on the network. These functions deal with just TCP/IP connections, which is what the internet is based on (IPv4 to be more precise). In essence this lets you connect one socket using an IP address (let\u0027s say 192.168.1.10) to another socket on another IP address (say 192.168.1.11). Once connected, these two sockets can send data back and forth using the {}network_send_*{} functions (like {}{}network_send_packet(){}{}) and the dedicated asynchronous event that is triggered by them. This async event will generate a {}DS map{} containing the data received as well as other details, and you can find the complete details in the section on the {}Network Async Event{}.":"基本上，套接字是可以发送、接收、连接和监听网络上{}端口{}的对象。这些功能只处理TCP/IP连接，这是互联网的基础(更准确的说是IPv4)。本质上，这允许您使用IP地址(比如说192.168.1.10)将一个套接字连接到另一个IP地址(如192.168.1.11)上的另一个套接字。一旦连接，这两个套接字可以使用{}network_send_*{}函数(如{}{}network_send_packet(){}{})和由它们触发的专用异步事件来回发送数据。此异步事件将生成包含接收数据和其他详细信息的{}DS map{}，您可以在{}网络异步事件{}部分中找到完整详细信息。",
    "Instead of programs having to read and deal with every bit of network traffic coming into a machine, IP addresses also deal with ports, which are numbered from 0 to 65535. This allows each program to get only the packets of data that it\u0027s interested in, and not everything that has been sent by every program. This also saves considerable CPU time, as it seriously cuts down on data processing, so with {}GameMaker{} you can also “listen” to ports. So, a server will create a socket, and then bind it to a specific port to listen to. It will then get notified of connections, disconnections and data transfers from that socket.":"与程序必须读取和处理进入计算机的每一位网络流量不同，Ip地址还处理从0到65535的端口。这允许每个程序只获得它感兴趣的数据包，而不是每个程序发送的所有数据。这还节省了大量Cpu时间，因为它严重减少了数据处理，因此使用{}GameMaker{}，您还可以\"侦听\"端口。因此，服务器将创建一个套接字，然后将其绑定到要侦听的特定端口。然后，它将收到来自该套接字的连接、断开连接和数据传输的通知。",
    "It is worth noting that if you are creating a project for the HTML5 target, then you will not be able to use the server create functions due to browser restrictions and will have to write your own server for this platform using something like {}Electron {}or {}NodeJS{}. Also note that if your game is cross platform and you anticipate connecting to an HTML5 instance of the game from a server running on a mobile or desktop device, then your server can only communicate to the HTML5 instance using the Web Socket protocol (this is done using the constant {}network_socket_ws{}&nbsp;or&nbsp;{}network_socket_wss{} - see {}{}network_create_server(){}{} for more information). This means that your server may have to create two sockets on different ports, one to connect to non HTML5 targets (Android, Windows, etc...) and one to connect to the HTML5 target.":"值得注意的是，如果您正在为HTML5目标创建项目，则由于浏览器限制，您将无法使用服务器创建函数，并且必须使用类似{}Electron{}或{}NodeJS{}的内容为此平台编写自己的服务器。另请注意，如果您的游戏是跨平台的，并且您希望从运行在移动设备或桌面设备上的服务器连接到游戏的HTML5实例，则您的服务器只能使用Web套接字协议与HTML5实例通信(这是使用常量{}network_socket_ws{}或{}network_socket_wss{}-有关详细信息，请参阅 {}{}network_create_server(){}{}这意味着您的服务器可能必须在不同的端口上创建两个插槽，一个用于连接到非HTML5目标(Android、Windows等)，另一个用于连接到HTML5目标。",
    "The data \"packets\" themselves are made up of binary data taken from a buffer. This buffer can be created and manipulated using the {}GameMaker{} {}Buffer functions{}.":"数据\"packets\"本身由从缓冲器获取的二进制数据组成。可以使用{}GameMaker{}{}Buffer{}系列函数创建和操作此缓冲区。",
    "The following functions exist for you to use for networking:":"您可以使用以下函数进行联网：",
    "The {}GameMaker{} networking functions are based on {}sockets{}, which is an industry standard on all platforms. With sockets, you have the ability to create both clients and servers using simple GML which allows you to create even a single player game using the client/server model (something which will allow multiplayer to be added easily later).":"{}GameMaker{}网络功能基于{}套接字{}，这是所有平台上的行业标准。使用套接字，您可以使用简单的 GML 创建客户端和服务器，这允许您使用客户端/服务器模型创建单个玩家游戏(这将允许稍后轻松添加多人游戏)。"
}