{
    "If there are multiple packets being returned to your game, the callback \"status\" key will return 1, in which case the DS map will have the following additional keys:":"如果有多个数据包返回到您的游戏，回调“status”键将返回 1，在这种情况下，DS 地图将具有以下附加键：",
    "In computing, a {}post{} request is used when the client needs to send data to the server as part of the retrieval request, such as when uploading a file or submitting a completed form, and the same is true of this function in {}GameMaker{}. In contrast to the {}{}http_get(){}{} request method where only a URL is sent to the server, {}http_post_string(){} also includes a string that is sent to the server and may result in the creation of a new resource or the update of an existing resource or both. It should be noted that HTTP request parameters (the bits sometimes \"tacked on\" to the end of a URL when you submit a form on a web page) are perfectly acceptable when using this function too.":"在计算中，当客户端需要将数据作为检索请求的一部分发送到服务器时，例如上传文件或提交完成的表单时，使用{}post{}请求，{}GameMaker{}中的此函数也是如此。与{}{}http_get(){}{}请求方法不同的是，{}http_post_string(){}还包括一个发送到服务器的字符串，该字符串可能会导致创建新资源或更新现有资源，或者两者都有。需要注意的是，在使用此函数时，HTTP请求参数(当您在网页上提交表单时，有时会“附加”到URL末尾的位)也是完全可以接受的。",
    "The above code sends a retrieval request to the specified URL with the given parameters as well as sending the additional data (player name and score in URL-encoded form) stored in the variable str. This will trigger all defined asynchronous {}Http Events{} if a callback is received, and you can check the \"id\" returned against that stored in the variable {}post{} to make sure that you run the correct code should you have used various {}http_post_string(){} functions. The following example code shows how this would be done:":"上面的代码使用给定的参数向指定的 URL 发送检索请求，并发送存储在变量 str 中的附加数据(URL 编码形式的玩家名称和分数)。 如果收到回调，这将触发所有定义的 {}异步 Http 事件{}，并且您可以检查返回的“id”与存储在变量 {}post{} 中的“id”，以确保运行正确的代码(如果您有) 使用了各种 {}http_post_string(){} 函数。 以下示例代码显示了如何完成此操作：",
    "The above code will first check the id of the DS map that has been created, then check the status of the callback. If the value is equal to 0 (signalling success) the result from the callback will then be stored in a variable for future use, otherwise the variable will simply hold a default value (in this case \"null\").":"上面的代码会先检查已经创建的DS地图的id，然后检查回调的状态。 如果该值等于 0(表示成功)，则回调的结果将存储在一个变量中以备将来使用，否则该变量将只保存一个默认值(在本例中为“null”)。",
    "The string you wish to send to the specified URL":"要发送到指定 URL 的字符串",
    "The web address of the server that you wish to get information from":"您希望从中获取信息的服务器的 Web 地址",
    "The {}http_post_string(){} function can be called from any event, and since it is asynchronous the callback can be almost instantaneous or could take several seconds. Calling the function is simple and would look something like this:":"{}http_post_string(){} 函数可以从任何事件调用，并且由于它是异步的，因此回调几乎可以是即时的，也可能需要几秒钟。 调用函数很简单，看起来像这样：",
    "This event will generate a \"call back\" which is picked up by any {}HTTP Events{}, in which case it will generate a {}DS Map{} (more commonly known as a \"dictionary\") that is exclusive to this event and is stored in the special variable {}{}async_load{}{}. This DS map&nbsp; will contain different values depending on whether there is data being returned or not. For example, if you have requested a file, the event will trigger multiple times as each packet of data is received so that you can show a progress bar, for example. The general structure for the DS map will be as follows:":"该事件将生成一个“回调”，该回调将被任何{}HTTP事件{}接收，在这种情况下，它将生成一个{}DS Map{}(通常称为“字典”)，它是该事件独有的，并存储在特殊变量{}{}async_load{}{}中。这个DS Map将包含不同的值，取决于是否返回数据。例如，如果您请求了一个文件，那么当接收到每个数据包时，事件将多次触发，以便您可以显示一个进度条。DS Map的一般结构如下:",
    "{}\"contentLength\": {}This is the size of file that the web server has said you should expect to receive (may be -1 if the server does not return this data).":"{}\"contentLength\"：{}这是网络服务器表示您应该预期收到的文件大小(如果服务器不返回此数据，则可能为 -1)。",
    "{}\"sizeDownloaded\": {}The size of the data that has already been downloaded.":"{}\"sizeDownload\": {}已下载的数据的大小。",
    "{}http_status: {}The raw http status code (if available). This returns the standard web status code for most browsers, eg: 304 for \"Not Modified\" or 204 for \"No Content\", etc...":"{}http_status：{}原始 http 状态代码(如果可用)。 这将返回大多数浏览器的标准 Web 状态代码，例如：304 未修改(Not Modified) ，204无内容(No Content),等等...",
    "{}id: {}The ID which was returned from the command. If you fire off a series of {}http_{} requests then you need to know which one you are getting the reply to, and so you would use this value to compare to the value you stored when you originally sent the request to find the right one.":"{}id: {}从命令返回的 ID。 如果您发出一系列 {}http_{} 请求，那么您需要知道您收到的是哪个请求的回复，因此您将使用此值与您最初发送请求时存储的值进行比较，以找到 正确的那一个。",
    "{}result: {}The data received (string only).":"{}result 结果: {}收到的数据(仅字符串)。",
    "{}status: {}Returns a value of less than 0 for an error, 0 for complete and 1 for receiving packets (see below for more details).":"{}status 状态：{}返回小于 0 的值表示错误，0 表示完成，1 表示接收数据包(详情请见下文)。",
    "{}url: {}The complete URL you requested.":"{}url：{}您请求的完整 URL。",
    "{}{}NOTE{} {}You should be aware that due to XSS protection in browsers, requests to and attempts to load resources from across domains are blocked and may appear to return blank results. Please see the part on {}Cross Domain Issues{} for further details.":"{}{}注意{}{}您应该注意，由于浏览器中的XSS保护，从跨域加载资源的请求和尝试被阻止，可能会返回空白结果。请参阅{}跨域问题{}部分了解更多细节。",
    "{}{}NOTE{} {}You should be aware that due to XSS protection in browsers, requests to and attempts to load resources from across domains are blocked and may appear to return blank results. Please see&nbsp;{}Cross Domain Issues{}&nbsp;for further details.":"{}{}注意{}{} 您应该知道，由于浏览器中的 XSS 保护，跨域加载资源的请求和尝试都会被阻止，并且可能会返回空白结果。有关详细信息，请参阅 {} 跨域问题 {} 。"
}