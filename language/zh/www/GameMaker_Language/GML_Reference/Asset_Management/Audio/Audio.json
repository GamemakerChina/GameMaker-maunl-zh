{
    "Advanced Audio":"高级音频",
    "All sound assets, except for streamed audio, belong to a single {}audio group{}. Sounds in an audio group can be loaded and unloaded at the same time.":"除流式音频外，所有声音资产都属于单个{}音频组{}。音频组中的声音可以同时加载和卸载。",
    "Another way to play sounds is using&nbsp;{}{}audio_play_sound_ext{}{}. This function is identical to {}{}audio_play_sound{}{}&nbsp;but allows you to pass various audio parameters in a struct. Using this function, you only need to provide a&nbsp;{}{}Sound Asset{}{}&nbsp;through the \"sound\" key of the struct:&nbsp;":"播放声音的另一种方法是使用 {}{}audio_play_sound_ext{}{}。此函数与 {}{}audio_play_sound{}{} 相同，但允许您在结构中传递各种音频参数。使用此函数，您只需通过的 \" 声音 \" 键提供 {}{} 声音资源 {}{}",
    "Asset Info":"资源信息",
    "At a minimum you have to provide the {}{}Sound Asset{}{}, a priority for the new sound instance and whether the sound should loop.":"您至少必须提供{}{}声音资源{}{}、新声音实例的优先级以及声音是否应该循环。",
    "Audio":"音频",
    "Audio Buffers":"音频缓冲区",
    "Audio Effects":"音效",
    "Audio Emitters":"音频发射器",
    "Audio Emitters and Listeners":"音频发射器和监听器",
    "Audio Groups":"音频组",
    "Audio Listeners":"音频监听器",
    "Audio Properties":"音频特性",
    "Audio Streams":"音频串流",
    "Audio Synchronisation":"音频同步",
    "Audio effects are created using&nbsp;{}{}audio_effect_create{}{} and then assigned to one of the effects slots of an audio bus. The audio bus that you can always assign effects to is the main audio bus&nbsp;{}{}audio_bus_main{}{}.":"使用 {}{}audio_effect_create{}{} 创建音效，然后将其分配给音频总线的一个效果槽。您始终可以为其分配效果的音频总线是主音频总线 {}{}audio_bus_main{}{}。",
    "Audio groups have their own gain factor (see&nbsp;{}{}audio_group_set_gain{}{}&nbsp;/&nbsp;{}{}audio_group_get_gain{}{})":"音频组有自己的增益因子(请参阅 {}{}audio_group_set_gain{}{} / {}{}audio_group_get_gain{}{})",
    "Configuration":"配置",
    "Contents":"目录",
    "Debugging":"调试",
    "Every sound has basic properties that are applied on different \"levels\". Depending on the property, it either acts as a multiplier, or overrides the value set at a previous level.":"每种声音都有应用于不同\"级别\"的基本属性。根据属性的不同，它要么充当乘数，要么覆盖在上一级别设置的值。",
    "Finally you can add effects to the audio that you play, such as reverb, echo, delay, etc.":"最后，您可以为播放的音频添加效果，如混响、回声、延迟等。",
    "For an overview of all audio properties, levels and how their values are calculated, see {}Audio Properties Overview{}.":"有关所有音频属性、级别及其值的计算方式的概述，请参阅{}音频属性概述{}。",
    "For audio that should play perfectly in sync&nbsp;on a per sample level,&nbsp;{}GameMaker{}&nbsp;has sync groups. See&nbsp;{}Audio Synchronisation{}&nbsp;for more information on this.":"对于应该在每个样本级别上完美同步播放的音频，{}GameMaker{} 具有同步组。有关这方面的详细信息，请参阅 {} 音频同步 {}。",
    "For more information please see the section:&nbsp;":"有关更多信息，请参阅小节：",
    "For things more complex than basic sound effects, or playing a single piece of music, you can refer to the advanced audio functions which let you modify how a sound is played. There is also a selection of more specialised functions dedicated to streaming audio, positioning audio (to give 3D sound), grouping audio,&nbsp;synchronised audio and audio effects.":"对于比基本音效或播放一首音乐更复杂的事情，您可以参考高级音频功能，这些功能允许您修改声音的播放方式。此外，还有一系列更专业的功能，可用于流媒体音频、定位音频 (提供 3D 声音)、音频分组、同步音频和音频效果。",
    "Function Reference":"函数参考",
    "Further advanced functionality, like effects, listeners, recording, or synchronising multiple audio tracks over time can all be found from the sub-sections listed below:":"更多高级函数，如效果、侦听器、录制或随时间同步多个音轨，都可以从以下小节中找到：",
    "If you need positional audio or audio that should play in a three-dimensional environment, you can use&nbsp;{}Audio Emitters{}&nbsp;and&nbsp;{}Audio Listeners{}.":"如果您需要位置音频或应该在三维环境中播放的音频，您可以使用{}音频发射器{}和{}音频监听器{}。",
    "In case you pass a sound {}asset{} ID to the functions, the audio property at the {}asset{} level will be set to the given value.":"如果您将声音{}资源{} ID 传递给函数，则在{}资源{}级别的音频属性将设置为给定值。",
    "Playing Sounds":"播放音频",
    "See:&nbsp;{}Audio Effects{}":"请参阅：{}Audio Effects{}",
    "Sound Instances (Voices)":"声音实例(语音)",
    "Sync Groups":"同步组",
    "The Asynchronous System Event":"异步系统事件",
    "The following functions are designed to give more control over how the audio engine works, and how the sounds played through it will be \"heard\" by the listener. As such it is recommended that you have a good working knowledge of how the rest of the&nbsp;{}GameMaker{}&nbsp;audio engine works before using any of the following functions:":"以下函数旨在更好地控制音频引擎的工作方式，以及收听者如何\"听到\"通过它播放的声音。因此，建议您在使用以下任何函数之前，了解{}GameMaker{}音频引擎的其余部分是如何工作的：",
    "The following functions are for dealing with audio in the most straightforward and simple way possible, avoiding the use of emitters and permitting the user to generate sounds and play music easily as these sounds are always generated at the {}listener position{} (see the section linked below for more details on the {}listener{}) and so are generally not affected by any changes to the {}listener{}:":"下列函数用于以最直接、最简单的方式处理音频，避免使用发射器，并允许用户轻松生成声音和播放音乐，因为这些声音总是在{}收听者位置产生{}(有关{}收听者{}的更多详细信息，请参见以下链接部分)，因此通常不受{}收听者{}的任何更改影响：",
    "The functions&nbsp;{}{}audio_play_sound{}{}&nbsp;and&nbsp;{}{}audio_play_sound_ext{}{}&nbsp;create a new&nbsp;{}instance{} of a sound (also called a \"voice\") and return its ID:&nbsp;":"这些函数 {}{}audio_play_sound{}{} 和 {}{}audio_play_sound_ext{}{} 创建声音(也称为\"语音\")的新{}实例{}并返回其 ID：",
    "The most straightforward way to play a sound is using&nbsp;{}{}audio_play_sound{}{}:&nbsp;":"播放声音最直接的方法是使用 {}{}audio_play_sound{}{}：",
    "These audio properties are:&nbsp;":"这些音频属性是： ",
    "To check if audio can be played using Web Audio, you can use&nbsp;{}{}audio_sound_is_playable{}{}.":"要检查是否可以使用网络音频播放音频，可以使用 {}{}audio_sound_is_playable{}{}。",
    "To help with this issue, {}GameMaker{} has two separate ways to detect the change in Web Audio context status, either using the following function:":"为了帮助解决这个问题，{}GameMaker{}有两种不同的方法来检测Web音频上下文状态的变化，使用以下函数：",
    "Using Audio":"使用音频",
    "Web Audio":"Web 音频",
    "When creating games for the HTML5 target platform, the audio engine requires {}Web Audio{} support, and this in turn means that sometimes your audio won\u0027t play when or how you expect it. This is because the Web Audio context may not be running or may stop running when your game is being played. What causes this varies greatly between browsers, and even between different versions of the same browser, and so detecting when the web audio context status changes is very important, e.g.: to detect when the context changes and pause/start looping audio like background music.":"在为 HTML5 目标平台创建游戏时，音频引擎需要{}Web 音频{}支持，这反过来意味着有时您的音频不会在您期望的时间或方式播放。这是因为在玩游戏时，Web 音频上下文可能未运行或停止运行。导致这种情况的原因在浏览器之间，甚至在同一浏览器的不同版本之间差异很大，因此检测网络音频上下文状态何时改变是非常重要的，例如：检测上下文何时改变，并暂停/开始循环音频，如背景音乐。",
    "You can use this sound&nbsp;{}instance{} ID in functions to change the audio properties at the {}instance{} level (or pass them directly as optional arguments). This will only change the properties for that particular sound instance.":"您可以在函数中使用此声音 {}实例{} ID 来更改{}实例{}级别的音频属性(或直接将它们作为可选参数传递)。这只会更改该特定声音实例的属性。",
    "You may also use the {}Asynchronous System Event{}, which will be triggered whenever the Web Audio status changes. In this event you will get the built in {}{}async_load{}{}{}&nbsp;DS map{} populated with the key \"{}event_type{}\" which in turn will hold the string \"{}audio_system_status{}\" if it is an audio event. When this key exists, there will also be a further \"{}status{}\" key which will be either \"{}available{}\" or \"{}unavailable{}\". Note that this event will be triggered on {}all{} platforms, but on everything except HTML5 it will only be triggered once on Game Start when the audio engine is first initialised. For more information please see the section:":"您也可以使用{}异步系统事件{}，只要 Web 音频状态更改，就会触发该事件。在此事件中，您将获得内置的{}{}async_load{}{}{}DS map{}，其中填充了键\"{}event_type{}\"，如果是音频事件，则该映射将保存字符串\"{}audio_system_status{}\"。当此键值存在时，还会有另一个\"{}status{}\"键值，该键值为\"{}available{}\"或\"{}unavailable{}\"。 请注意，此事件将在{}所有{}平台上触发，但在除HTML5以外的所有平台上，当音频引擎首次初始化时，该事件仅在GameStart上触发一次。有关更多信息，请参见以下部分：",
    "or using the {}Asynchronous System Event{}, which will be triggered whenever the Web Audio status changes. In this event you will get the built in&nbsp;{}{}async_load{}{}&nbsp;{}DS map{} populated with the key \"{}event_type{}\" which in turn will hold the string \"{}audio_system_status{}\" if it is an audio event. When this key exists, there will also be a further \"{}status{}\" key which will be either \"{}available{}\" or \"{}unavailable{}\".":"或者使用 {} 异步系统事件 {}，该事件将在网络音频状态发生变化时触发。在此事件中，您将获得内置 {}{}async_load{}{}{}DS 映射 {}，其中填充了关键字 \"{}event_type{}\"，如果是音频事件，则该映射将包含字符串 \"{}audio_system_status{}\"。当此密钥存在时，还会有另一个 \"{} 状态 {}\" 键，该键将是 \"{} 可用 {}\" 或 \"{} 不可用 {}\"。",
    "{}Audio{}":"{}音频{}",
    "{}GameMaker{} has a complete audio engine that is based on the {}*.ogg{}, {}*.mp3{} and {}*.wav{} sound formats.":"{}GameMaker{} 拥有一个完整的音频引擎，该引擎基于 {}*.ogg{}、{}*.mp3{} 和 {}*.wav{} 声音格式。",
    "{}GameMaker{} has a complete audio engine that is based on the {}*.ogg{}, {}*.mp3{} and {}*.wav{} sound formats. Sounds of these types added to the IDE can then be used in your game using the basic audio functions shown below. For things more complex than basic sound effects or playing a single piece of music you can refer to the advanced audio functions which let you modify how a sound is played. There are also a selection of more specialised functions dedicated to streaming audio, positioning audio - to give 3D sound - and grouping audio.":"{}GameMaker{}拥有基于{}*.ogg{} 的完整音频引擎，{}*. mp3{}和{}*. wav{}声音格式。这些类型的声音添加到IDE中，然后可以使用下面显示的基本音频函数在游戏中使用。对于比基本音效或播放单曲更复杂的内容，您可以参考高级音频函数，通过这些函数可以修改声音的播放方式。还有一些更专业的函数，专门用于流式音频、定位音频以提供3D声音和分组音频。",
    "{}GameMaker{}&nbsp;supports loading streamed audio directly from .ogg files. For this you can use&nbsp;{}{}audio_create_stream{}{}&nbsp;and&nbsp;{}{}audio_destroy_stream{}{}.":"{}GameMaker{} 支持直接从 .ogg 文件加载流音频。为此，您可以使用 {}{}audio_create_stream{}{} 和 {}{}audio_destroy_stream{}{}.",
    "{}Here the priority will default to 0 and the sound will not be looped. You can supply {}additional keys{} in the struct to change the properties of the sound.{}":"{}此处，优先级将默认为 0，并且声音不会循环。您可以在结构中提供{}个附加键{}以更改声音的属性。{}",
    "{}IMPORTANT!{} When using audio on the HTML5 target, you should be aware that not all browsers support Web Audio and so may not play any sound for your project when run. You can get a general idea of Web Audio support from the following link: {}Can I Use Web Audio?{}.":"{}重要{}在 HTML5 目标上使用音频时，您应该知道并非所有浏览器都支持 Web 音频，因此在运行时可能不会为项目播放任何声音。您可以通过以下链接了解 Web 音频支持的一般情况：{}我能使用网络音频吗?{}。",
    "{}The Sound Editor{} of these types added to the IDE can then be used in your game using the audio functions shown below.":"添加到 IDE 中的这些类型的{}声音编辑器{}然后可以通过如下所示的音频功能在游戏中使用。",
    "{}{}Gain{}{}: This is a multiplier for the volume. The default value for gain on the asset level is the value of the \"Volume\" slider in the {}Sound Editor{}. The default value on all other levels is 1. Gain can also be added using&nbsp;{}Audio Effects{}.":"{}{}增益{}{}：这是体积的乘数。资源级别上的增益的默认值是{}声音编辑器{}中的\"音量\"滑块的值。所有其他级别的默认值为 1。也可以使用{}音效{}添加增益。",
    "{}{}Listener Mask{}{}: This is a bitmask value that determines the listeners that audio is heard on. The default value is 1 (or {}0x01{}), which stands for the default listener.":"{}{}监听器掩码{}{}：这是一个位掩码值，用于确定收听音频的监听器。默认值为 1( 或 {}0x01{})，表示默认监听程序。",
    "{}{}NOTE{}{}&nbsp;All sounds are by default added to an audio group&nbsp;{}{}audiogroup_default{}{}.":"{}{}注意{}{} 默认情况下，所有声音都添加到音频组 {}{}audiogroup_default{}{}。",
    "{}{}NOTE{}{}&nbsp;This event will be triggered on {}all{} platforms, but on everything except HTML5 it will only be triggered once on Game Start when the audio engine is first initialised.":"{}{}注意{}{} 此事件将在{}所有{}平台上触发，但在除 HTML5 之外的所有平台上，它只会在游戏开始时音频引擎首次初始化时触发一次。",
    "{}{}NOTE{}{}&nbsp;{}Audio Emitters{}&nbsp;introduce another level for the gain, pitch and listener mask parameters.":"{}{}注意{}{} {}音频发射器{}为增益、音调和收听者掩码参数引入另一个级别。",
    "{}{}NOTE{}{}&nbsp;{}{}audio_play_sound_at{}{}&nbsp;and&nbsp;{}{}audio_play_sound_on{}{}&nbsp;work in the same way and also return the ID of the sound instance they create.":"{}{}注意{}{} {}{}audio_play_sound_at{}{} 和 {}{}audio_play_sound_on{}{} 以相同的方式工作，并返回它们创建的声音实例的ID。",
    "{}{}Offset/Track Position{}{}: This is the offset from the start of the audio track where it starts playing. If this value is set at the instance level, it overrides the value set at the asset level. By default this is 0 (i.e. no offset).":"{}{}偏移/曲目位置{}{}：这是从开始播放的音频曲目开始的偏移量。如果在实例级别设置此值，它将覆盖在资源级别设置的值。默认情况下，该值为 0 (即无偏移)。",
    "{}{}Pitch{}{}: This is a multiplier for the sound\u0027s pitch. The default value for pitch on all levels is set to 1.":"{}{}音调{}{}：这是声音音调的倍增。所有级别上的间距的默认值都设置为 1。",
    "{}{}TIP{}{}&nbsp;The maximum number of sound instances/voices is&nbsp;{}128{} by default. This can be changed using the function&nbsp;{}{}audio_channel_num{}{}.":"{}{}提示{}{} 默认最大声音实例数为 {}128{}。可以使用函数 {}{}audio_channel_num{}{} 更改此设置。",
    "{}{}{}IMPORTANT{}{}{} When using audio on the HTML5 target, you should be aware that not all browsers support Web Audio and so may not play any sound for your project when run. You can get a general idea of Web Audio support from the following link: {}Can I Use Web Audio?{}.":"{}{}{}重要{}{}{} 在 HTML5 目标上使用音频时，您应该知道并非所有浏览器都支持 Web 音频，因此在运行时可能不会为项目播放任何声音。您可以通过以下链接了解 Web 音频支持的一般情况：{}我能使用网络音频吗?{}。"
}