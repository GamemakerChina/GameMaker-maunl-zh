{
    "A struct containing all the animation frames. Each tile number has a key in the struct, each entry is an array of the frames to use (each array should be {}frame_count{} long).":"包含所有动画帧的结构。每个图块编号在结构中都有一个键，每个条目都是要使用的帧的数组 (每个数组的长度应该是 {}frame_count{})。",
    "The above code calls&nbsp;{}{}tileset_get_info{}{}&nbsp;to get information about an existing tile set {}ts_Forest{}&nbsp;and stores the result in a temporary variable {}_info{}. The info is then shown in a debug message.":"上面的代码调用 {}{}tileset_get_info{}{} 以获取有关现有图块集 {}ts_Forest{} 的信息，并将结果存储在临时变量 {}_info{} 中。然后，该信息将显示在调试消息中。",
    "The above code finds the coordinates of the top-left corner of the given tile index. First the index of the tile is defined and stored in a temporary variable {}_tnumber{}. Then&nbsp;{}{}tileset_get_info{}{}&nbsp;is called on an existing tile set {}ts_Forest{}&nbsp;and the returned struct is stored in {}_ts_info{}. Next an if statement checks if the variable contains a valid struct (accessing the variables in the next steps will throw errors otherwise).{} If it does, some variables are calculated. {}_twidth{} and {}_theight{}&nbsp;are the total width and height of a tile on the tile set, including the border on both sides ({}_ts_info.tile_horizontal_separator{} and&nbsp;{}_ts_info.tile_vertical_separator{}) {}_tile_x{} is the remainder of the tile index divided by the number of columns and {}_tile_y{}&nbsp;is the number of times {}_ts_info.tile_columns{} fits into the tile index. After this, a debug message is shown with the top-left coordinates (the separator offsets not yet included).{} If the case an invalid tile set was provided to the function a different debug message is shown.":"面的代码查找给定图块索引的左上角的坐标。首先，图块的索引被定义并存储在临时变量 {}_tnumber{} 中。然后 {}{}tileset_get_info{}{} 在现有磁贴集 {}ts_Forest{} 上调用并且返回的结构存储在 {}_ts_info{} 中。接下来，if 语句检查变量是否包含有效的结构(否则在接下来的步骤中访问变量将抛出错误){} 如果包含，则会计算一些变量。{}_twidth{} 和 {}_theight{} 是图块集上的图块的总宽度和高度，包括两侧的边框({}_ts_info.tile_horizontal_separator{} 和 {}_ts_info.tile_vertical_separator{}<br>{}_tile_x{} 是图块索引的剩余部分除以列数和 {}_tile_y{} 是 {}_ts_info.tile_columns{} 适应图块索引的次数。之后，将显示带有左上角坐标的调试消息(尚未包括分隔符偏移){} 如果向函数提供了无效的图块集，则会显示不同的调试消息。",
    "The above code finds the coordinates of the top-left corner of the given tile index. First the index of the tile is defined and stored in a temporary variable {}_tnumber{}. Then&nbsp;{}{}tileset_get_info{}{}&nbsp;is called on an existing tile set {}ts_Forest{}&nbsp;and the returned struct is stored in {}_ts_info{}. Next an if statement checks if the variable contains a valid struct (accessing the variables in the next steps will throw errors otherwise){} If it does, some variables are calculated. {}_twidth{} and {}_theight{}&nbsp;are the total width and height of a tile on the tile set, including the border on both sides ({}_ts_info.tile_horizontal_separator{} and&nbsp;{}_ts_info.tile_vertical_separator{}) {}_tile_x{} is the remainder of the tile index divided by the number of columns and {}_tile_y{}&nbsp;is the number of times {}_ts_info.tile_columns{} fits into the tile index. After this, a debug message is shown with the top-left coordinates (the separator offsets not yet included){} If the case an invalid tile set was provided to the function a different debug message is shown.":"上面的代码查找给定图块索引的左上角的坐标。首先，图块的索引被定义并存储在临时变量 {}_tnumber{} 中。然后 {}{}tileset_get_info{}{} 在现有磁贴集 {}ts_Forest{} 上调用并且返回的结构存储在 {}_ts_info{} 中。接下来，if 语句检查变量是否包含有效的结构(否则在接下来的步骤中访问变量将抛出错误){} 如果包含，则会计算一些变量。{}_twidth{} 和 {}_theight{} 是图块集上的图块的总宽度和高度，包括两侧的边框({}_ts_info.tile_horizontal_separator{} 和 {}_ts_info.tile_vertical_separator{}<br>{}_tile_x{} 是图块索引的剩余部分除以列数和 {}_tile_y{} 是 {}_ts_info.tile_columns{} 适应图块索引的次数。之后，将显示带有左上角坐标的调试消息(尚未包括分隔符偏移){} 如果向函数提供了无效的图块集，则会显示不同的调试消息。",
    "The height of a single tile (in pixels)":"单个图块的高度(以像素为单位)",
    "The number of frames of animation per animation":"每个动画的动画帧数",
    "The number of pixels horizontally on each side of each tile (making the space between two tiles {}2 * tile_horizontal_separator{})":"每个图块每一面的水平像素数 (使两个图块之间的间距为 {}2 * tile_horizontal_separator{})",
    "The number of pixels vertically&nbsp;on each side of each tile&nbsp;(making the space between two tiles&nbsp;{}2 * tile_vertical_separator{})":"每个图块每一面的垂直像素数 (使两个图块之间的间距为 {}2 * tile_vertical_separator{})",
    "The returned struct contains the following variables:&nbsp;":"返回的结构包含以下变量： ",
    "The texture ID":"纹理 ID",
    "The tile set to get the info from":"要从中获取信息的图块集",
    "The width of a single tile (in pixels)":"单个图块的宽度(以像素为单位)",
    "The width of the whole tile set texture (in pixels)":"整个图块集纹理的宽度(像素)",
    "The&nbsp;height of the whole tile set texture&nbsp;(in pixels)":"整个图块集纹理的高度(像素)",
    "The&nbsp;number of columns on each row of the tile set":"图块集每行上的列数",
    "The&nbsp;number of milliseconds for frame animation":"帧动画的毫秒数",
    "The&nbsp;number of tiles":"图块数量",
    "This function returns a {}struct{} containing information on a tile set.":"此函数返回一个包含有关图块集信息的{}结构{}。",
    "Tile Set Info Struct":"图块集信息结构",
    "{}{}Tile Set Info Struct{}{}&nbsp;(in case of a valid&nbsp;{}{}Tile Set Asset{}{}) or&nbsp;{}{}undefined{}{}&nbsp;(no valid tile set given)":"{}{}图块集信息结构{}{} (如果是有效的{}{}图块集资源{}{}) 或 {}{}undefined{}{} (未指定有效的图块集)"
}