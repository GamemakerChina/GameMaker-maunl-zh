{
    "Note that this variable will become {}false{} after the controlling sequence has ended,&nbsp;even if its sequence element still exists, and will become {}true{} if that sequence element is {}played again{}.":"请注意，在控制序列结束后，即使其序列元素仍然存在，该变量也将变为 {}false{}; 如果 {4} 再次播放 {5} 该序列元素，该变量将变为 {}true{}。",
    "Note that this variable will become&nbsp;{}false{} after the controlling Sequence has ended,&nbsp;even if its Sequence Element still exists, and will become {}true{} if that Sequence element is {}played again{}.":"请注意，即使该变量的序列元素仍然存在，该变量在控制序列结束后将变为{}false{}，如果再次{}播放序列元素{}，该变量将变为{}true{}。",
    "The above code checks the {}in_sequence{} variable, and if it is {}false{} (meaning the instance is not being controlled by&nbsp;a sequence) then it adds {}move_x{} and {}move_y{} to the instance\u0027s position, making sure that it only moves when it\u0027s not in a Sequence.":"上面的代码检查{}in_sequence{}变量，如果它为{}false{}(表示实例不受序列控制)，则它将{}move_x{}和{}move_y{}添加到实例的位置，确保它仅在不在序列中时才移动。",
    "The above code checks the&nbsp;{}{}in_sequence{}{}&nbsp;variable, and if it is {}false{} (meaning the instance is not being controlled by&nbsp;a sequence) then it adds {}move_x{} and {}move_y{} to the instance\u0027s position, making sure that it only moves when it\u0027s not in a sequence.":"上述代码检查 {}{}in_sequence{}{} 变量，如果该变量为 {}false{}( 表示实例不受序列控制)，则会添加 {}move_x{} 和 {}move_y{} 到实例的位置，确保它仅在不在序列中时才移动。",
    "This is a&nbsp;{}built-in variable{}&nbsp;that is part of the {}instance variables{} created for every object instance in your game. If the instance is being controlled by a sequence, this variable will return {}true{}, otherwise it will return {}false{}.&nbsp;This is a&nbsp;{}read-only{}&nbsp;variable and cannot be changed.":"这是一个{}内置变量{}，它是为游戏中每个对象实例创建的{}实例变量{}的一部分。如果实例由序列控制，此变量将返回{}true{}，否则将返回{}false{}。 这是{}只读{}变量，无法更改。",
    "This is a&nbsp;{}built-in variable{}&nbsp;that is part of the&nbsp;{}Instance Variables{} created for every object instance in your game. If the instance is being controlled by a sequence, this variable will return {}true{}, otherwise it will return {}false{}.&nbsp;This is a&nbsp;{}read-only{}&nbsp;variable and cannot be changed.":"这是一个 {} 内置变量 {}，是为游戏中的每个对象实例创建的 {} 实例变量 {} 的一部分。如果实例由序列控制，则此变量将返回 {}true{}，否则将返回 {}false{}。这是一个 {} 只读 {} 变量，无法更改。",
    "You can use this variable in your player (or CPU) controlled objects to make sure that they\u0027re only moved by code when they\u0027re not in a Sequence. This can prove useful for cutscenes, when you need to use the same instances in a Sequence (using the {}{}sequence_instance_override_object(){}{} function) and you need to make sure that they can\u0027t be moved by their usual code while that cutscene is active.":"您可以在播放器(或CPU)控制的对象中使用此变量，以确保它们仅在不在序列中时由代码移动。当需要在序列中使用相同的实例(使用{}{}sequence_instance_override_object(){}{}函数)，并且您需要确保在剪切场景处于活动状态时，它们不能被其常用代码移动。",
    "You can use this variable in your player (or CPU) controlled objects to make sure that they\u0027re only moved by code when they\u0027re not in a sequence. This can prove useful for cutscenes, when you need to use the same instances in a sequence (using the&nbsp;{}{}sequence_instance_override_object{}{} function) and you need to make sure that they can\u0027t be moved by their usual code while that cutscene is active.":"您可以在播放器 (或 CPU) 控制的对象中使用此变量，以确保它们仅在不在序列中时通过代码移动。当您需要在序列中使用相同的实例 (使用 {}{}sequence_instance_override_object{}{} 函数) 并且需要确保它们不能被常用代码移动时，这对于过场动画非常有用。过场动画处于活动状态。"
}