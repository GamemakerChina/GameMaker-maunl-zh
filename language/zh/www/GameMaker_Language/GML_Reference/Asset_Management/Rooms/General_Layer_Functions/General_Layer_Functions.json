{
    "Activate/Deactivate Instances on Layers":"激活 / 停用层上的实例",
    "Any assets that you add to rooms are placed on a layer. These assets can be tile maps (using tile sets), backgrounds, sprites or sequences, particle systems and instances. You can add and modify a room\u0027s layers in&nbsp;{}The Room Editor{}&nbsp;or at runtime through code.":"您添加到房间的任何资源都放置在图层上。这些资源可以是图块地图 (使用图块集)、背景、精灵或序列、粒子系统和实例。您可以在 {} 房间编辑器 {} 中或在运行时通过代码添加和修改房间的图层。",
    "Each asset that you add to a layer is considered an {}element{} of that layer.":"您添加到层的每个资源都被视为该层的一个 {} 元素 {}。",
    "Exclusively for use with {}instances{} on layers (although the layer itself can have other elements, they will not be affected by the following functions) you have a couple of functions that can be used to deactivate or reactivate all instances:":"专门用于层上的 {} 实例{}( 虽然层本身可以有其他元素，但它们不会受到以下函数的影响)，您有几个函数可用于停用或重新激活所有实例：",
    "Finally, and this is exclusively for use with {}instances{} on layers (although the layer itself can have other elements, they will not be affected by the following functions), you have a couple of functions that can be used to deactivate or reactivate all instances:":"最后，这是专门用于图层上的{}实例{}(尽管该图层本身可以具有其他元素，但它们不会受到以下函数的影响)，但有几个函数可用于取消激活或重新激活所有实例：",
    "Function Reference":"功能参考",
    "General":"常规",
    "General Layer Functions":"常规图层函数",
    "Layer Elements":"图层元素",
    "Layers are useful for a few reasons:":"图层很有用，原因如下：",
    "Particle Systems":"粒子系统",
    "Targeting Layers in a Different Room":"定位不同房间中的图层",
    "The {}GameMaker{} {}Room Editor{} permits you to add {}layers{} of different assets to your room. These can be tile maps (using tile sets), backgrounds, sprites or sequences, and instances, but note that unlike the room editor, you are {}not{} limited to a single asset type per layer, and can add multiple asset types to the same layer - for example you can have a background and a tile map all on the same layer. Note that each asset that is added to a layer is considered an {}element{}&nbsp;of that layer.":"{}GameMaker{}{}房间编辑器{}允许您将{}层{}不同资源添加到您的房间。这些可以是图块贴图(使用图块集)、背景、精灵或序列和实例，但请注意，与房间编辑器不同，您{}不限于每个层的单个资源类型，并且可以向同一层添加多个资源类型。例如，您可以在同一层上拥有背景和图块贴图。请注意，添加到层的每个资源都被视为该层的{}元素{}。",
    "The {}GameMaker{} {}Room Editor{} permits you to add {}layers{} of different assets to your room. These can be tile maps (using tile sets), backgrounds, sprites or sequences, particle systems and instances, but note that unlike the room editor, you are {}not{} limited to a single asset type per layer, and can add multiple asset types to the same layer - for example you can have a background and a tile map all on the same layer.":"{}GameMaker{}{}房间编辑器{}允许您将{}层{}不同资源添加到您的房间。这些可以是图块贴图(使用图块集)、背景、精灵或序列和实例，但请注意，与房间编辑器不同，您{}不限{}于每个层的单个资源类型，并且可以向同一层添加多个资源类型。例如，您可以在同一层上拥有背景和图块贴图。",
    "There are no functions to get access to particle systems on a layer, but you can create them on a specific layer using the function:&nbsp;":"没有函数可以访问图层上的粒子系统，但您可以使用以下函数在特定图层上创建它们：",
    "This section outlines the general functions used when working with room layers, as well as a few functions specific to working with {}{}instance layer{}&nbsp;{}elements:":"本节概述了在处理房间图层时使用的一般函数，以及一些特定于使用{}{}实例层{}{}元素的函数：",
    "To get all elements on a layer you can use the function&nbsp;{}{}layer_get_all_elements{}{}.":"要获取图层上的所有元素，您可以使用函数 {}{}layer_get_all_elements{}{}。",
    "To get the underlying asset type of an element, you can use the function&nbsp;{}{}layer_get_element_type{}{}.":"要获取元素的基础资源类型，您可以使用函数 {}{}layer_get_element_type{}{}。",
    "We also have a couple of extra functions relating to targeting layers in a different room. It may be that you want to change something in a room that is not the current room, or maybe you want to generate rooms procedurally, or any number of things. To enable this we use the following functions:":"我们还有几个与不同房间中的目标层相关的额外函数。您可能想要更改不是当前房间的房间中的某些内容，或者您可能想要按程序生成房间，或者任何数量的内容。为此，我们使用以下函数：",
    "What you do here is set the target room using the appropriate function and then call the layer functions are normal. These layer functions will now apply {}only{} to the target room and not the current one. When you are finished you\u0027d call the reset function to return the code scope back to the current room again.":"您在这里所做的是使用适当的函数设置目标房间，然后调用层函数是正常的。这些图层函数现在将{}仅{}应用于目标房间，而不应用于当前房间。完成后，您可以调用重置函数将代码范围重新返回到当前房间。",
    "When you use&nbsp;{}The Room Editor{}&nbsp;to add assets to a room, a new element is added to that layer every time you drag an asset onto the editor canvas. There are two exceptions to this: in case of tiles the element that\u0027s added is a {}tile map{}, rather than the individual tiles that you place and also, no element is added for {}Paths{}.":"当您使用 {} 房间编辑器 {} 将资产添加到房间时，每次您将资产拖到编辑器画布上时，都会向该层添加一个新元素。有两个例外：对于图块，添加的元素是 {} 图块地图 {}，而不是您放置的各个图块，而且不会为 {} 路径 {} 添加任何元素。",
    "You can get all layers in the current room using&nbsp;{}{}layer_get_all{}{}&nbsp;or a single layer based on the name you gave it in the Room Editor using {}{}layer_get_id{}{}.":"您可以使用 {}{}layer_get_all{}{} 获取当前房间中的所有图层，也可以使用 {}{}layer_get_id{}{} 根据您在房间编辑器中指定的名称获取单个图层。",
    "they affect how these assets on the layer are drawn: {} {}at an offset (x, y) and moving with a certain speed.{} {}at a certain depth, the&nbsp;{}{}layer_depth{}{}.{} {}using custom code ({}{}layer_script_begin{}{}&nbsp;and {}{}layer_script_end{}{}) and shader ({}{}layer_shader{}{}).{} {} ":"它们会影响图层上这些资源的绘制方式：{}{} 以偏移量 (x, y) 并以一定速度移动。{}\n\n{} 在某个深度，{}{}layer_depth{}{}。\n\n{}{} 使用自定义代码 ({}{}layer_script_begin{}{} 和 {}{}layer_script_end{}{}) 和着色器 ({}{}layer_shader{}{})。{}{}",
    "they logically group assets.":"他们对资产进行逻辑分组。",
    "{}General Layer Functions{}":"{}常规图层函数{}",
    "{}Layers{}":"{} 层 {}",
    "{}WARNING!{} While targeting another room, you can use all the regular layer functions {}except{} you cannot create instances using {}{}{}instance_create_layer(){}{}{} or {}{}{}instance_create_depth(){}{}{}, nor will the layer function {}{}{}layer_add_instance(){}{}{}&nbsp;be available.":"{}警告!{} 将另一个房间作为目标时，您可以使用除此{}之外的所有常规图层函数{}，不能使用 {}{}{}instance_create_layer(){}{}{} 或 {}{}{}instance_create_depth(){}{}{} 创建实例，也不能使用图层函数 {}{}{}layer_add_instance(){}{}{}。",
    "{}{}NOTE{}{}&nbsp;Each asset that is added to a layer is considered an {}element{}&nbsp;of that layer.":"{}{}注意{}{} 添加到层的每个资源都被视为该层的{}元素{}。",
    "{}{}NOTE{}{}&nbsp;Unlike the Room Editor, you are {}not{} limited to only certain asset types per layer, and can add assets of different types to the same layer - for example you can have a background, a tile map and an instance all on the same layer.":"{}{} 注意{}{} 与房间编辑器不同，您 {} 不 {} 限于每层仅某些资产类型，并且可以将不同类型的资产添加到同一层 - 例如，您可以有背景、瓦片地图和实例都在同一层上。",
    "{}{}WARNING{}{}&nbsp;While targeting another room, you can use all the regular layer functions {}except{} you cannot create instances using {}{}{}instance_create_layer(){}{}{} or {}{}{}instance_create_depth(){}{}{}, nor will the layer function {}{}{}layer_add_instance(){}{}{}&nbsp;be available.":"{}{}警告!{}{} 将另一个房间作为目标时，您可以使用除此{}之外的所有常规图层函数{}，不能使用 {}{}{}instance_create_layer(){}{}{} 或 {}{}{}instance_create_depth(){}{}{} 创建实例，也不能使用图层函数 {}{}{}layer_add_instance(){}{}{}。",
    "{}{}WARNING{}{}&nbsp;While targeting another room, you can use all the regular layer functions,&nbsp;{}except{} you cannot create instances using&nbsp;{}{}instance_create_layer{}{} or {}{}instance_create_depth{}{}, nor will the layer function&nbsp;{}{}layer_add_instance{}{} be available.":"{}{} 警告{}{} 当定位另一个房间时，您可以使用所有常规层函数，{} 但 {} 您无法使用 {}{}instance_create_layer{}{} 或 {}{}instance_create_depth{}{} 创建实例 ，层函数 {}{}layer_add_instance{}{} 也不可用。"
}