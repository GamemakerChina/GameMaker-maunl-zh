{
    "The above code will check to see if there is another room after the current one and if so it will go to that room.":"上面的代码将检查当前房间之后是否有另一个房间，如果有，它将转到该房间。",
    "With this function you can make your game go to the next one as listed in the {}Room Manager{}&nbsp;at the time the game was compiled. If this room does not exist, an error will be thrown and the game will be forced to close. Note that the room will not change until the end of the event where the function was called, so any code after this has been called will still run if in the same event.":"使用此函数，您可以在游戏编译时进入{}房间管理器{}中列出的下一个游戏。如果此房间不存在，将抛出错误并迫使游戏关闭。请注意，在调用函数的事件结束之前，房间不会改变，因此，如果在相同事件中，调用后的任何代码仍将运行。",
    "{}NOTE{}&nbsp;You will not be able to create new instances in the same event after this function has been called.":"{}注意{}调用此函数后，您将无法在同一事件中创建新实例。",
    "{}NOTE{}&nbsp;You will not be able to {}create new instances{} of objects in the same event after this function is called. There is one exception: if the object you\u0027re creating an instance of is already {}marked persistent{}, or its {}{}persistent{}{} variable is set to {}true{} in the {}variable struct{} passed into the {}instance_create_*(){} function, it will be created.{} {} In the latter case (making the new instance persistent through the variable struct), the {}Variable Definitions{} for that instance will not be executed. ":"{}注意{} 调用此函数后，您将无法在同一事件中{}创建对象的新实例{}。\n\n有一个例外：如果您正在创建实例的对象已经{}标记为持久{}，\n\n或其 {}{}persistent{}{} 变量在传递到 {}instance_create_*(){} 函数的 {}variable struct{} 中设置为 {}true{}，则将创建。{} {}\n\n在后一种情况下（通过变量结构使新实例持久化），该实例的{}变量定义{}将不会被执行。"
}