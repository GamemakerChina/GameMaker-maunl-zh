{
    "A special constant that is for \"and\"-ing with the tile data blob to extract the tile index.":"用于\"和\"的专用常量，与块数据块一起提取块索引。",
    "An easy way to get the initial index mask value is to take the number of tiles in the tile set and subtract 1, so a 16x16 tile set has 256 tiles and a mask value of 255 (or $ff in hexadecimal), and if the tile set has a number of tiles that are not a power of two, then round up to the nearest power of two to get the mask, for example a tile set that is 20x20 has 400 tiles, which you would round up to 512, and so get a mask index value of 511 ($1ff in hexadecimal). Apart from the index mask, normally you would want to preserve the flip, rotate and mirror values that are assigned to a tile too, so to help with that there are a few {}constants{} that can be used. These can be \"or\"-ed together with the index mask value to preserve those bits of data. The following constants can be used (see the example code below for usage):":"获得初始索引掩码值的简单方法是取图块集中的图块数并减去1，因此，16x16的图块集有256个图块，掩码值为255(或$ ff，十六进制)，如果图块集的图块数不是2的幂，则向上四舍五入到最接近的2次方以获得掩码，例如，20x20的图块集有400个图块，这四舍五入到512，因此得到掩码索引值511(十六进制为$ 1ff)。除了索引掩码之外，通常您还希望保留分配给图块的翻转、旋转和镜像值，以便帮助使用一些{}常数{}。这些可以与索引掩码值一起\"或\"化，以保留这些数据位。可以使用以下常量(有关用法，请参见下面的示例代码)：",
    "In the Create event the bit mask is set to be the 8 lowest bits plus the mirror, flip and rotate bits. A random integer value from 0 to 255 is then written to bit 8 to 15 of each tile. This is done as follows: the bits of {}_random_value{} are first shifted {}left{} by 8 bits, for example a value of&nbsp;{}0b0000000011001111{}&nbsp;({}207{}) becomes {}0b1100111100000000{}&nbsp;({}52992{}). This result is stored in {}_random_value_shifted{}. This value is then bitwise \"or\"-ed {}|{}&nbsp;with the tile data, which will result in a 1 bit whenever a bit is set in either the tile data or in the random value. The tile data is then written back to the same tile map call using {}{}tilemap_set{}{}.":"在创建事件中，位掩码设置为 8 个最低位加上镜像、翻转和旋转位。然后将 0 到 255 之间的随机整数值写入每个图块的位 8 到 15。具体操作如下：{}_random_value{} 的位首先 {} 左 {} 移位 8 位，例如，值 {}0b0000000011001111{}({}207{}) 变为 {}0b1100111100000000{}({}52992{})。此结果存储在 {}_random_value_shifted{} 中。然后，该值与图块数据进行按位 \" 或 \" 运算 {}|{}，只要在图块数据或随机值中设置了一位，就会得到 1 位。然后，使用 {}{}tilemap_set{}{} 将图块数据写回同一图块地图调用。",
    "In the Create event the bit mask is set to be the 8 lowest bits plus the mirror, flip and rotate bits. A random integer value from 0 to 255 is then written to bit 8 to 15 of each tile. This is done as follows: the bits of {}_random_value{} are first shifted {}left{} by 8 bits, for example a value of&nbsp;{}0b0000000011001111{}&nbsp;({}207{}) becomes {}0b1111111100000000{}&nbsp;({}52992{}). This result is stored in {}_random_value_shifted{}. This value is then bitwise \"or\"-ed {}|{}&nbsp;with the tile data, which will result in a 1 bit whenever a bit is set in either the tile data or in the random value. The tile data is then written back to the same tile map call using {}{}tilemap_set{}{}.":"在创建事件中，位掩码设置为 8 个最低位加上镜像、翻转和旋转位。然后将 0 到 255 之间的随机整数值写入每个图块的位 8 到 15。具体操作如下：{}_random_value{} 的位首先 {} 左 {} 移位 8 位，例如，值 {}0b0000000011001111{}({}207{}) 变为 {}0b1111111100000000{}({}52992{})。此结果存储在 {}_random_value_shifted{} 中。然后，该值与图块数据进行按位 \" 或 \" 运算 {}|{}，只要在图块数据或随机值中设置了一位，就会得到 1 位。然后，使用 {}{}tilemap_set{}{} 将图块数据写回同一图块地图调用。",
    "In the Step event the tile data under the mouse is looked up using&nbsp;{}{}tilemap_get_at_pixel{}{}. To get the random value back out, the bits are first shifted {}right{}&nbsp;by 8 bits, which moves the 8 bits of the random value back to bit positions 0 to 7 (the index bits are also shifted right and so are lost at this point). This new value is then bitwise \"and\"-ed {}&amp;{}&nbsp;with 255 to only keep the lower 8 bits that hold the random value (any of the mirror, flip or rotate bits may be set which, without \"and\"-ing would give a much higher value). The result is assigned to {}random_value_under_cursor{}.":"在 Step 事件中，使用 {}{}tilemap_get_at_pixel{}{} 查找鼠标下方的图块数据。为了取回随机值，首先将这些位 {} 右移 {}8 位，这会将随机值的 8 位移回位位置 0 到 7( 索引位也会右移，因此会丢失) 在此刻)。然后，这个新值按位 \" 与 \"-ed{}&amp;{} 为 255，以仅保留保存随机值的低 8 位 (可以设置任何镜像、翻转或旋转位，无需 \" 与\" -ing 会给出更高的值)。结果分配给 {}random_value_under_cursor{}。",
    "The above code gets the tile map ID from the given layer and then sets the tile map bit mask to 8bits (a value of {}255{} or&nbsp;{}0b11111111{}), preserving the flip, mirror, and rotate values for each tile in the map.":"上述代码从给定图层获取图块地图 ID，然后将图块地图位掩码设置为 8 位 (值为 {}255{} 或 {}0b11111111{})，保留每个图块的翻转、镜像和旋转值平铺在地图上。",
    "The above code gets the tile map ID from the given layer and then sets the tile map bit mask to 8bits, preserving the flip, mirror, and rotate values for each tile in the map.":"上述代码从给定层获取图块映射ID，然后将图块映射位掩码设置为8位，保留映射中每个图块的翻转、镜像和旋转值。",
    "The above code sets the tile bit mask to the value needed for&nbsp;{}GameMaker{}&nbsp;to draw tiles correctly by combining all tile mask constants using bitwise OR. The full&nbsp;{}19{}&nbsp;bits are used for the tile index and the mirror, flip and rotate bits are preserved.":"上面的代码通过使用按位或组合所有图块掩码常量，将图块位掩码设置为 {}GameMaker{} 正确绘制图块所需的值。完整的 {}19{} 位用于图块索引，并保留镜像、翻转和旋转位。",
    "The above code shows how to store some custom data in the cells of a tile map and read them back.":"上面的代码显示了如何在图块地图的单元格中存储一些自定义数据并读取它们。",
    "The mask value":"掩码值",
    "The random value stored in the tile under the mouse position is displayed in the Draw GUI event.":"鼠标位置下的图块中存储的随机值显示在 Draw GUI 事件中。",
    "The unique ID value of the tile map element to set the mask of":"要设置掩码的图块贴图元素的唯一ID值",
    "This function can be used to set the {}tile bit mask{} for a single tile map. You give the tile map element ID (which you get when you create a tile map element using {}{}layer_tilemap_create(){}{} or when you use the function {}{}layer_tilemap_get_id(){}{}), and then the mask value. The idea is that if you have, for example, a pretty small tile set of 16 x 16 tiles then you have a total of 256 different tiles in your tile set, which only uses up 8 bits of your index in the tile data \"blob\" (from an available 19 bits of data). These bits can be \"masked\" and then the rest of the tile data can be used to store additional values.":"此函数可用于设置单个图块贴图的{}块位掩码{}。为贴图元素 ID(当使用{}{}layer_tilemap_create(){}{}或使用函数{}{}layer_tilemap_get_id(){}{}创建图块贴图元素时获得的 ID)，然后给出掩码值。其思想是，例如，如果您有一个相当小的16 x 16块的图块集，那么您的图块集中总共有256个不同的图块，这在图块数据\"blob\"(从可用的19位数据)中仅使用8位索引。这些位可以被\"屏蔽\"，然后其余的图块数据可用于存储附加值。",
    "This function sets the&nbsp;{}Tile Map Bit Mask{}&nbsp;for a single tile map.":"此函数为单个图块地图设置 {} 图块地图位掩码 {}。",
    "Tile Mask Constant":"图块遮罩常数",
    "Tile map bit masking is an advanced feature and allows you to use bits of the tile data \"blob\" for your own use. For example, the user could reserve a bit to mean \"solid\" in the tile-data structure and then this can be checked for fast collisions. Basically, the bit mask is \"and\"-ed against the tile data when the tile map is {}drawn{} (so it doesn\u0027t affect any of the other functionality), meaning that bits which aren\u0027t in the mask are ignored, but can still be read and written to by the user for their own purposes. Note that there are two different masks – a global one and one per tile map - and these are \"and\"-ed together internally by {}GameMaker{} before being used for drawing.":"图块贴图位掩码是一项高级函数，允许您使用图块数据的位\"blob\"供您自己使用。例如，用户可以在图块数据结构中保留一个表示\"实心\"的位，然后可以检查快速冲突。基本上，当绘制图块映射{}时，位掩码相对于图块数据\"和\"ed{}(因此不影响任何其他函数)，意味着不在掩码中的位被忽略，但用户仍可以出于自己的目的读取和写入。请注意，有两种不同的蒙版 – 全局蒙版和每块贴图一个，它们在用于绘制之前由{}GameMaker{}内部组合在一起。",
    "Tile map bit masking is an advanced feature and allows you to use bits of the tile data \"blob\" for your own use. For example, you could reserve a bit to mean \"solid\" in the tile data&nbsp;that can then be checked for fast collisions. Basically, the bit mask is \"and\"-ed against the tile data when the tile map is {}drawn{} (so it doesn\u0027t affect any of the other functionality), meaning that bits which aren\u0027t in the mask are ignored, but can still be read and written to by the user for their own purposes.":"图块地图位掩码是一项高级功能，允许您将图块数据 \"blob\" 的位供您自己使用。例如，您可以在图块数据中保留一些表示 \" 实体 \" 的位，然后可以检查快速碰撞。基本上，当 {} 绘制 {} 图块地图时，位掩码会针对图块数据进行 \" 与 \" 运算 (因此不会影响任何其他功能)，这意味着不在掩码中的位被忽略，但用户仍可以出于自己的目的进行读取和写入。",
    "Used to set/get the flip bit of a tile data blob.":"用于设置/获取图块数据块的翻转位。",
    "Used to set/get the mirror bit of a tile data blob.":"用于设置/获取图块数据块的镜像位。",
    "Used to set/get the rotate bit of a tile data blob.":"用于设置/获取图块数据块的旋转位。",
    "You give the tile map element ID (which you get when you create a tile map element using&nbsp;{}{}layer_tilemap_create{}{} or when you use the function {}{}layer_tilemap_get_id{}{}), and then the mask value. If you have, for example, a pretty small tile set of 16 x 16 tiles then you have a total of 256 different tiles in your tile set. You only need 8 bits of the&nbsp;{} {} to index these tiles (from an available&nbsp;{}19{} bits of data). These bits can be \"masked\" and then the rest of the tile data can be used to store additional values. See&nbsp;{}Calculating the Mask Bits{}.":"您提供图块地图元素 ID(在使用 {}{}layer_tilemap_create{}{} 创建图块地图元素或使用函数 {}{}layer_tilemap_get_id{}{} 时获得)，然后提供掩码值。例如，如果您有一个非常小的 16 x 16 个图块集，那么您的图块集中总共有 256 个不同的图块。您只需要 {}{} 的 8 位即可为这些图块建立索引 (来自可用的 {}19{} 位数据)。这些位可以被 \" 屏蔽\"，然后瓦片数据的其余部分可以用于存储附加值。请参阅 {} 计算掩码位 {}。"
}