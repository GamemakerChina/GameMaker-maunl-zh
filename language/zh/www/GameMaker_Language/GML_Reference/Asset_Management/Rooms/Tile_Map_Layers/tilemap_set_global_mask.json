{
    "A special constant that is for \"and\"-ing with the tile data blob to extract the tile index.":"用于\"和\"的专用常量，与块数据块一起提取块索引。",
    "An easy way to get the initial index mask value is to take the number of tiles in the tile set and subtract 1, so a 16x16 tile set has 256 tiles and a mask value of 255 (or $ff in hexadecimal), and if the tile set has a number of tiles that are {}not{} a power of two, then round up to the nearest power of two to get the mask, for example a tile set that is 20x20 has 400 tiles, which you would round up to 512, and so get a mask index value of 511 ($1ff in hexadecimal). Apart from the index mask, normally you would want to preserve the flip, rotate and mirror values that are assigned to a tile too, so to help with that there are a few {}constants{} that can be used. These can be \"or\"-ed together with the index mask value to preserve those bits of data. The following constants can be used (see the example code below for usage):":"获得初始索引掩码值的简单方法是取图块集中的图块数并减去1，因此，16x16的图块集有256个图块，掩码值为255(或十六进制中的$ ff)，如果图块集的图块数{}不是{}的2次幂，则向上舍入到最接近的2次方以获得掩码，例如，20x20的图块集具有400个图块，这四舍五入到512，因此得到掩码索引值511(十六进制为$ 1ff)。除了索引掩码之外，通常您还希望保留分配给图块的翻转、旋转和镜像值，以便帮助使用一些{}常数{}。这些可以与索引掩码值一起\"或\"化，以保留这些数据位。可以使用以下常量(有关用法，请参见下面的示例代码)：",
    "The above code sets the global tile map bit mask to 8bits (binary {}0b11111111{}, i.e. the value {}255{}), while also preserving the flip, mirror, and rotate values.":"上述代码将全局图块地图位掩码设置为 8 位 (二进制 {}0b11111111{}，即值 {}255{})，同时还保留翻转、镜像和旋转值。",
    "The above code sets the global tile map bit mask to 8bits, preserving the flip, mirror, and rotate values for each tile in the map.":"上述代码将全局块映射位掩码设置为8位，保留映射中每个块的翻转、镜像和旋转值。",
    "The above code sets the global tile map bit mask using&nbsp;{}{}tilemap_set_global_mask{}{}.&nbsp;8 bits can be used for the tile index and the mirror, flip and rotate bits are&nbsp;preserved. For the tile map at a layer named \"Tiles_sky\" a custom mask is set that allows only 4 bits for the tile index. The transform bits are, however, also preserved.":"上面的代码使用 {}{}tilemap_set_global_mask{}{} 设置全局图块地图位掩码。 8 位可用于平铺索引，并且保留镜像、翻转和旋转位。对于名为 \"Tiles_sky\" 的图层上的图块地图，设置了一个自定义掩码，仅允许 4 位用于图块索引。然而，变换位也被保留。",
    "The idea is that if you have, for example, pretty small tile sets of 16 x 16 tiles then you\u0027ll have a total of 256 different tiles in each tile set, which only uses up 8 bits of your index in the&nbsp;{} {} (from an available&nbsp;{}19{} bits of data). These bits can be \"masked\" and then the rest of the tile data can be used to store additional values.&nbsp;See&nbsp;{}Calculating the Mask Bits{}.":"这个想法是，例如，如果您有 16 x 16 个图块的非常小的图块集，那么每个图块集中总共将有 256 个不同的图块，这仅占用 {}{ }( 来自可用的 {}19{} 位数据)。这些位可以被 \" 屏蔽\"，然后瓦片数据的其余部分可以用于存储附加值。请参阅 {} 计算掩码位 {}。",
    "The mask value to use":"要使用的掩码值",
    "This function can be used to set the {}tile bit mask{} for a all tile maps in the game. The idea is that if you have, for example, pretty small tile sets of 16 x 16 tiles will have a total of 256 different tiles in each tile set, which only uses up 8 bits of your index in the tile data \"blob\" (from an available 19 bits of data). These bits can be \"masked\" and then the rest of the tile data can be used to store additional values.":"此函数可用于设置游戏中所有图块贴图的{}图块位掩码{}。其思想是，例如，如果您有相当小的16 x 16块的图块集，则每个图块集中总共将有256个不同的图块，这仅使用图块数据\"blob\"(从可用的19位数据中)中的8位索引。这些位可以被\"屏蔽\"，然后其余的图块数据可用于存储附加值。",
    "This function sets the&nbsp;{}Tile Map Bit Mask{} for all tile maps in the game.":"此函数为游戏中的所有图块地图设置 {} 图块地图位掩码 {}。",
    "Tile map bit masking is an advanced feature and allows you to use bits of the tile data \"blob\" for your own use. For example, the user could reserve a bit to mean \"solid\" in the tile-data structure and then this can be checked for fast collisions. Basically, the bit mask is \"and\"-ed against the tile data when the tile map is {}drawn{} (so it doesn\u0027t affect any of the other functionality), meaning that bits which aren\u0027t in the mask are ignored, but can still be read and written to by the user for their own purposes.":"图块地图位掩码是一项高级功能，允许您将图块数据 \"blob\" 的位供您自己使用。例如，用户可以在图块数据结构中保留一个位来表示 \" 实体\"，然后可以检查它是否存在快速冲突。基本上，当 {} 绘制 {} 图块地图时，位掩码会针对图块数据进行 \" 与 \" 运算 (因此不会影响任何其他功能)，这意味着不在掩码中的位被忽略，但用户仍可以出于自己的目的进行读取和写入。",
    "Tile map bit masking is an advanced feature and allows you to use bits of the tile data \"blob\" for your own use. For example, the user could reserve a bit to mean \"solid\" in the tile-data structure and then this can be checked for fast collisions. Basically, the bit mask is \"and\"-ed against the tile data when the tile map is {}drawn{} (so it doesn\u0027t affect any of the other functionality), meaning that bits which aren\u0027t in the mask are ignored, but can still be read and written to by the user for their own purposes. Note that there are two different masks – a global one and one per tile map - and these are \"and\"-ed together internally by {}GameMaker{} before being used for drawing.":"图块贴图位掩码是一项高级函数，允许您使用图块数据的位\"blob\"供您自己使用。例如，用户可以在图块数据结构中保留一个表示\"实心\"的位，然后可以检查快速冲突。基本上，当绘制图块映射{}时，位掩码相对于图块数据\"和\"ed{}(因此不影响任何其他函数)，意味着不在掩码中的位被忽略，但用户仍可以出于自己的目的读取和写入。请注意，有两种不同的蒙版 – 全局蒙版和每块贴图一个，它们在用于绘制之前由{}GameMaker{}内部组合在一起。",
    "Used to set/get the flip bit of a tile data blob.":"用于设置/获取图块数据块的翻转位。",
    "Used to set/get the mirror bit of a tile data blob.":"用于设置/获取图块数据块的镜像位。",
    "Used to set/get the rotate bit of a tile data blob.":"用于设置/获取图块数据块的旋转位。",
    "{}{}IMPORTANT{}{}&nbsp;You should make sure to always have at least the same bits set in the global mask to make the per tile map masks ({}{}tilemap_set_mask{}{}) work the way you\u0027d expect. For example, a global mask of {}0b0000111111111101{}&nbsp;will force bit 1 to 0 in any tile map mask because of the \"and\"-ing of the two masks, no matter if the bit is set there or not.":"{}{} 重要{}{} 您应该确保在全局掩码中始终至少设置相同的位，以使每个图块地图掩码 ({}{}tilemap_set_mask{}{}) 按照您的方式工作预计。例如，全局掩码 {}0b0000111111111101{} 将强制任何图块地图掩码中的位 1 为 0，因为这两个掩码之间存在 \" 与 \" 关系，无论该位是否已设置。"
}