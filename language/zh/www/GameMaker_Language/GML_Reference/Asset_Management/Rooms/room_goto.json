{
    "The above code will check a global variable and change room based on the value that it holds.":"上面的代码将检查一个全局变量，并根据其保存的值更改空间。",
    "The index of the room to go to.":"要转到的房间的索引。",
    "This function permits you to go to any room in your game project, whether created using code or in the Asset Browser. You supply the room index (stored in the variable for the room name, or as a variable returned from the function {}{}room_add(){}{}). Note that the room will not change until the end of the event where the function was called, so any code after this has been called will still run if in the same event.&nbsp;This function will also trigger the {}Room End{} event.":"此函数允许您进入游戏项目中的任何房间，无论是使用代码创建还是在资源浏览器中创建。提供房间索引(存储在用于房间名称的变量中，或作为从函数{}{}room_add(){}{}返回的变量)。 请注意，在调用函数的事件结束之前，房间不会改变，因此，如果在相同事件中，调用后的任何代码仍将运行。此函数还将触发{}房间结束{}事件。",
    "{}NOTE{} Room IDs are not based on their order in the Asset Browser or the Room Manager, and so you should avoid supplying a number value directly. Instead, use the room&nbsp;{}constant{}&nbsp;for the asset you want to reference (which is simply its name) or retrieve it through a function.":"{}注意{}房间ID不是基于它们在资源浏览器或房间管理器中的顺序，因此您应避免直接提供数值。相反，对于要引用的资源(只是其名称)，请使用房间{}常量{}或通过函数检索它。",
    "{}NOTE{}&nbsp;You will not be able to create new instances in the same event after this function has been called.":"{}注意{}调用此函数后，将无法在同一事件中创建新实例。",
    "{}NOTE{}&nbsp;You will not be able to {}create new instances{} of objects in the same event after this function is called. There is one exception: if the object you\u0027re creating an instance of is already {}marked persistent{}, or its {}{}persistent{}{} variable is set to {}true{} in the {}variable struct{} passed into the {}instance_create_*(){} function, it will be created.{} {} In the latter case (making the new instance persistent through the variable struct), the {}Variable Definitions{} for that instance will not be executed. ":"{}注意{} 调用此函数后，您将无法在同一事件中{}创建对象的新实例{}。\n\n有一个例外：如果您正在创建实例的对象已经{}标记为持久{}，\n\n或其 {}{}persistent{}{} 变量在传递到 {}instance_create_*(){} 函数的 {}variable struct{} 中设置为 {}true{}，则将创建。{} {}\n\n在后一种情况下（通过变量结构使新实例持久化），该实例的{}变量定义{}将不会被执行。\n"
}