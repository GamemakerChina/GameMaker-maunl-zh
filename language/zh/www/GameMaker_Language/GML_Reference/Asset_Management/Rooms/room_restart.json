{
    "The above code checks to see if the variable \"lives\" is less than 1 and if it is it will restart the room.":"上面的代码检查变量\" lives \"是否小于1，如果小于1，它将重新启动房间。",
    "This function will restart the current room, as if it had just been entered. Note that the room will not restart until the end of the event where the function was called, so any code after this has been called will still run if in the same event. This function will also trigger the {}Room End{} event.":"此函数将重新启动当前房间，就像刚刚进入一样。请注意，在调用函数的事件结束之前，房间不会重新启动，因此，如果在同一事件中，调用此函数之后的任何代码仍将运行。此函数还将触发{}房间结束{}事件。",
    "{}NOTE{}&nbsp;You will not be able to create new instances in the same event after this function has been called.":"{}注意{}调用此函数后，您将无法在同一事件中创建新的实例。",
    "{}NOTE{}&nbsp;You will not be able to {}create new instances{} of objects in the same event after this function is called. There is one exception: if the object you\u0027re creating an instance of is already {}marked persistent{}, or its {}{}persistent{}{} variable is set to {}true{} in the {}variable struct{} passed into the {}instance_create_*(){} function, it will be created.{} {} In the latter case (making the new instance persistent through the variable struct), the {}Variable Definitions{} for that instance will not be executed. ":"{}注意{} 调用此函数后，您将无法在同一事件中{}创建对象的新实例{}。\n\n有一个例外：如果您正在创建实例的对象已经{}标记为持久{}，\n\n或其 {}{}persistent{}{} 变量在传递到 {}instance_create_*(){} 函数的 {}variable struct{} 中设置为 {}true{}，则将创建。{} {}\n\n在后一种情况下（通过变量结构使新实例持久化），该实例的{}变量定义{}将不会被执行。"
}