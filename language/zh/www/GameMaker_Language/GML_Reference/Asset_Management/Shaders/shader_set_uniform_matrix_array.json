{
    "A previously initialised array of floating point values.":"先前初始化的浮点值数组。",
    "A previously initialised array of floating point values. Its length should be a multiple of 16, i.e. {}number_of_matrices * 16{}.":"先前初始化的浮点值数组。其长度应为 16 的倍数，即 {}number_of_matrices * 16{}。",
    "Every group of 16 floats in the array becomes directly accessible as an element of the uniform array, i.e. the first 16 array elements correspond to {}u_mTransforms[0]{}, the next 16 elements to {}u_mTransforms[1]{}, etc.":"数组中每组 16 个浮点都可以作为统一数组的元素直接访问，即前 16 个数组元素对应于 {}u_mTransforms[0]{}，接下来的 16 个元素对应于 {}u_mTransforms[1]{}， ETC。",
    "First the maximum number of transforms is defined and an array is created to hold that number of transforms. An identity matrix is then copied to the array to initialise each individual matrix. A shader {}sh_dynamic_batch{}&nbsp;that defines a {}mat4{} array uniform named \"u_mTransforms\" is then set as the current shader and the handle to the uniform is retrieved with {}{}shader_get_uniform{}{}.&nbsp;{}{}shader_set_uniform_matrix_array{}{}&nbsp;is then called to&nbsp;set the value of that uniform to the given array. Finally, a vertex buffer stored in the variable {}vb_batch{}&nbsp;is then submitted.":"首先定义最大变换数，并创建一个数组来保存该变换数。然后将单位矩阵复制到数组中以初始化每个单独的矩阵。然后，定义名为 \"u_mTransforms\" 的 {}mat4{} 数组制服的着色器 {}sh_dynamic_batch{} 将被设置为当前着色器，并使用 {}{}shader_get_uniform{}{} 检索制服的句柄。然后调用 {}{}shader_set_uniform_matrix_array{}{} 将该统一值设置为给定数组。最后，提交存储在变量 {}vb_batch{} 中的顶点缓冲区。",
    "In the shader you\u0027d define the uniform as follows:&nbsp;":"在着色器中，您可以按如下方式定义制服：",
    "The above code example shows how to initialise an array of matrices and send it to a shader.":"上面的代码示例展示了如何初始化矩阵数组并将其发送到着色器。",
    "The above code will get the handle of the shader constant \"cMatrixArray\" then set that constant to the given array.":"上面的代码将获取着色器常量\"cMatrixArray\"的句柄，然后将该常数设置为给定的数组。",
    "The handle of the shader constant to set.":"要设置的着色器常量的句柄。",
    "This function sets a shader constant to hold an array of matrix values.":"该函数设置一个着色器常量来保存矩阵值数组。",
    "With this function you can set a shader constant to hold an array of matrix values. You must previously have gotten the \"handle\" of the constant using the function {}{}shader_get_uniform(){}{}, and you will have to have previously initialised the array as an array of floating point values, where each successive group of 16 floats is a 4x4 matrix.":"使用此函数，可以设置着色器常量以保存矩阵值数组。您必须之前使用函数{}{}shader_get_uniform(){}{}获得常量的\"句柄\"，并且您必须事先将数组初始化为浮点值数组，其中每一组连续的16个浮点是4x4矩阵。",
    "You must previously have gotten the \"handle\" of the constant using the function {}{}shader_get_uniform{}{}, and you will have to have previously initialised the array as an array of floating point values, where each successive group of 16 floats holds the contents of a 4x4 matrix.":"您之前必须使用函数 {}{}shader_get_uniform{}{} 获取常量的 \" 句柄\"，并且之前必须将数组初始化为浮点值数组，其中每个连续的 16 个浮点组保存 4x4 矩阵的内容。",
    "{}NOTE{}: All uniforms must be set {}after{} calling the function {}{}{}shader_set(){}{}{}, and before calling {}{}{}shader_reset(){}{}{}.":"{}注意{}：在调用函数 {}{}{}shader_set(){}{}{}{2} 之后 {3}，在调用 {}{}{}shader_reset(){}{}{} 之前，必须设置所有 uniform 。",
    "{}{}NOTE{}{}&nbsp;All uniforms must be set {}after{} calling the function {}{}shader_set{}{}&nbsp;and {}before{} calling {}{}shader_reset{}{}.":"{}{} 注意{}{} 必须在调用函数 {}{}shader_set{}{}{4} 之后 {5} 和调用 {}{}shader_reset{}{}{10} 之前 {11} 设置所有 uniforms 。"
}