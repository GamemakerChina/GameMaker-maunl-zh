{
    "If you want to assign some variables&nbsp;{}before{}&nbsp;the Create event runs, see the example below.":"如果您想在创建事件运行之前{}分配一些变量{}，请参阅下面的示例。",
    "Note that this function will actually create a room layer for the instance, since all instances {}must{} be on a layer in the room, but since this is a {}managed{} layer (i.e.: not one that you have created through code or in the room, but one that {}GameMaker{} has created automatically). You cannot access that layer, and the {}{}layer{}{} instance variable will return -1.":"请注意，此函数实际上将为实例创建房间层，因为所有实例{}必须{}位于房间的某个层上，但因为这是{}托管的{}层(即：不是您通过代码或在房间中创建的层，而是{}GameMaker{}已自动创建的层)。您无法访问该层，{}{}层{}{}实例变量将返回-1。",
    "Optional Struct":"可选结构",
    "That struct has variables for the speed and direction. It pulls its values from the calling instance, without the need to use {}other{}.":"该结构具有速度和方向变量。它从调用实例提取其值，而无需使用{}other{}。",
    "The above code creates a new instance of the object {}obj_bullet{}&nbsp;at {}-100{} depth, and stores the instance ID in a variable. This variable is then used to assign {}speed{} and {}direction{} to the new instance.":"上面的代码在{}-100{}深度处创建对象{}obj_bullet{}的新实例，并将实例ID存储在变量中。然后，此变量用于为新实例指定{}速度{}和{}方向{}。",
    "The above code creates an instance of {}obj_bullet{}, and passes in a struct as the last argument.":"上面的代码创建{}obj_bullet{}的实例，并作为最后一个参数传入一个结构。",
    "The depth to assign the created instance to":"要将创建的实例分配给的深度",
    "The last argument, {}var_struct{}, is optional and takes a struct containing additional variables for the new instance.":"最后一个参数{}var_struct{}是可选的，它采用一个包含新实例的其他变量的结构。",
    "The object index of the object to create an instance of":"要创建实例的对象的对象索引",
    "The x position the object will be created at":"将创建对象的X位置",
    "The y position the object will be created at":"将创建对象的Y位置",
    "These variables are applied to the new instance before its Create event runs.":"这些变量在新实例的Create事件运行之前被应用到新实例。",
    "This function returns the {}{}id{}{} of the new instance which can then be stored in a variable and used to access that instance. Note that this function will also call the {}Create Event{} of the instance being created {}before{} continuing with the code or actions for the event that called the function.":"此函数返回新实例的{}{}id{}{}，然后可以将其存储在变量中并用于访问该实例。请注意，该函数还将在{}之前调用正在创建的{}实例的{}创建事件{}，继续调用该函数的事件的代码或操作。",
    "This means that the values from that struct are readable in the Create event of the new instance. See {}Example 2{} at the bottom.":"这意味着该结构的值在新实例的\"创建\"事件中是可读的。参见底部的{}示例2{}。",
    "This will first create the instance, run its Create event, and&nbsp;{}then{}&nbsp;assign values to its variables.":"这将首先创建实例，运行其 Create 事件，然后{}为其变量赋值。",
    "Values applied to the new instance through this struct can be of any type, including {}method{}&nbsp;variables. {}Built-in variables{} can be changed as well.":"通过此结构应用于新实例的值可以是任何类型的，包括{}方法{}变量。{}内置变量{}也可以更改。",
    "Variables from this struct are applied to the new instance&nbsp;{}before{}&nbsp;its Create event runs, but {}after{}&nbsp;its {}Variable Definitions{} are set.":"此结构中的变量在{}的Create事件运行前应用于新实例{}，但{}之后{}的{}变量定义{}被设置。",
    "With this function you can create a new instance of the specified object at any given point within the room and at the depth specified. The depth can be any value, where the lower the depth the \"nearer\" to the camera things will be drawn and the higher the depth the further away, so an instance at depth -200 will be drawn over an instance at depth +300 (for example).":"使用此函数，可以在房间内任意给定点和指定深度创建新的指定对象实例。深度可以是任何值，其中深度越低，\"越靠近\"摄像机，而深度越高，则越远，那么深度-200处的实例将绘制在深度+300(例如)处的实例上。",
    "You\u0027re not limited to a struct literal, as you can also pass in a variable that stores an existing struct, or create a {}new{} struct from a {}constructor{}.":"不限于结构文字，因为还可以传递存储现有结构的变量，或从{}constructor{}创建{}new{}结构。",
    "{}IMPORTANT{}&nbsp;There is a minimum and maximum layer depth of -16000 to 16000. Anything placed on a depth outside that range {}will not be drawn{} although all events will still run as normal.":"{}重要信息{}最小和最大层深度为-16000到16000。放置在该范围之外的深度上的任何内容都不会被绘制{}，尽管所有事件仍将正常运行。",
    "{}NOTE{}&nbsp;Variables from the struct are \"shallow-copied\" to the new instance, meaning any arrays, structs, and other resources are copied by reference and not duplicated.":"{}注意{}结构中的变量\"浅拷贝\"到新实例，这意味着通过引用复制任何数组、结构和其他资源，而不是复制。",
    "{}OPTIONAL{} A struct with variables to assign to the new instance":"{}OPTIONAL{}带变量的结构，可分配给新实例"
}