{
    "A persistent object will still have its {}Game Start{}, {}Game End{}, {}Room Start{} and {}Room End{} events triggered, however if you restart the game (with, for example, the {}game_restart(){} function) all persistent objects will be removed and only exist when created again by the game. Also note that if you deactivate a persistent object, it will no longer pass from one room to another unless re-activated before the Room End event is triggered.":"持久对象仍会触发其{}Game Start{}、{}Game End{}、{}Room Start{}和{}Room End{}事件，但是，如果您重新启动游戏(例如，使用{}game_restart(){}函数)，所有持久对象将被删除，且仅当游戏再次创建时才存在。另外请注意，如果您停用了持久对象，它将不再从一个房间传递到另一个房间，除非在房间结束事件被触发之前重新激活。",
    "The above code will check the instance to see if persistence is flagged as {}false{} and if the instance is NOT persistent the persistence flag is set to {}true{}.":"上面的代码将检查实例以查看持久性是否标记为{}false{}，如果实例不持久，则持久性标志设置为{}true{}。",
    "This variable can be read to find out if the instance is flagged as {}persistent{} or not, or it can used to set persistence to {}true{} (persistent) or {}false{} (not persistent) for the instance. A persistent instance is one that will be \"carried over\" from room to room, meaning (for example) that it only has to be created once at the start of the game and it will be present in all further rooms. Care should be taken with persistence as it is easy to lose track of persistent instances which can lead to problems later in the development of the game.":"可以读取此变量来查找实例是否标记为{}持久性{}，或者它可用于将实例的持久性设置为{}true{}(持久性)或{}false{}(非持久性)。持久化实例是从一个房间转到另一个房间，这意味着(例如)它只需要在游戏开始时创建一次，并且它将出现在以后的所有房间中。应小心坚持，因为很容易失去对持久实例的跟踪，这可能导致游戏开发后期出现问题。",
    "When you create an instance with persistence enabled in a room, this variable will be set to {}true{} and it will be assigned a layer or a depth (depending on which function you used to create the instance of the object). When the room is changed, and if the following room does {}not{} have a layer with the same name or depth as the one assigned, then a new layer will be created for the instance that is persisting across the rooms. If you gave a named layer when the instance was created, then the new layer will also be named the same as original layer, while if you assigned a depth to the instance then the new layer will be named \"{}_layer_XXX{}\", where \"XXX\" is a hex value used to give the layer a unique name. These layers will be removed from the room on Room End. Another thing to note about layers and persistent instances is that if you have assigned the instance a named layer on creation, and there is another layer in the following rooms with the same name, then the persisted instance will be assigned to the layer with the same name {}regardless of the depth of the layer{}. Finally, if a persisted instance moves to a room with a layer at the same depth as the instance was created on, it will {}not{} be assigned to this layer, but instead a new layer will be created at the same depth (following the naming convention explained previously).":"在房间中创建启用持久性的实例时，此变量将设置为{}true{}，并将指定一个图层或深度(取决于用于创建对象实例的函数)。更改房间时，如果下列房间{}没有{}与所分配的图层具有相同名称或深度的图层，则将为贯穿这些房间的实例创建新的图层。如果在创建实例时指定了命名层，则新层的名称也与原始层相同，而如果为实例指定了深度，则新层将命名为\"{}_layer_XXX{}\"，其中\"XXX\"是用于给层指定唯一名称的十六进制值。这些层将从房间末端的房间移除。关于层和持久实例，需要注意的是，如果您在创建时为实例分配了命名层，并且以下房间中有另一个层具有相同名称，则不管层{}的深度如何，持久实例都将被分配给具有相同名称的层{}。 最后，如果持久实例移动到层深度与实例创建深度相同的房间，则{}不会{}将其分配给此层，而是在相同深度创建新层(遵循前面说明的命名约定)。"
}