{
    "It is worth noting that when you destroy an instance, its destroy event is called {}immediately{} after the code or action that calls the destroy function. Also, although the destroy event is performed, the instance {}is not immediately removed from the game{}, and it will continue to perform the code contained in the current event. Only when the current event is over will it be removed from the game.":"值得注意的是，当销毁实例时，其销毁事件在调用destore函数的代码或操作之后立即{}被调用。此外，虽然执行销毁事件，但实例{}不会立即从游戏中移除{}，它将继续执行当前事件中包含的代码。只有当当前事件结束时，它才会从游戏中移除。",
    "The above code will destroy the instance running the code without calling the Destroy Event if the instance is outside the room bounds.":"如果实例在房间边界之外，上面的代码将销毁运行代码的实例，而不调用销毁事件。",
    "The second {}optional{} flag permits you to \"switch off\" the Destroy Event for the instance being destroyed. By default the Destroy Event will {}always{} be performed, but if you set this flag to {}false{} then you can make the instance destroy itself and skip performing that event.":"第二个{}可选{}标志允许您为要销毁的实例\"关闭\"销毁事件。默认情况下，销毁事件将{}始终{}执行，但如果将此标志设置为{}false{}，则可以使实例销毁自身并跳过执行该事件。",
    "The variable \"score\" will be incremented {}even though the {}instance_destroy{} function has been called{}, and the instance will finally be removed from your game at the end of the event. Be careful of this, as if you have (for example) created a dynamic resource for the instance, like a data structure, and then have destroyed that resource in the destroy event, if there are any references to it after the destroy function or action has been performed then you will get an \"unknown resource\" error, as the destroy event removed it from the game.":"即使{}instance_destroyed{}函数已被调用{}，变量\"分数\"也将递增{}，并且该实例最终将在事件结束时从游戏中删除。注意这一点，就好像你已经(例如)为实例创建了一个动态资源，就像一个数据结构一样，然后在销毁事件中销毁了该资源，如果在执行销毁功能或操作之后有任何对它的引用，那么当销毁事件将它从游戏中删除时，你将会收到\"未知资源\"错误。",
    "You call this function whenever you wish to \"destroy\" an instance, normally triggering a {}Destroy Event{} and also a {}Clean Up Event{}. This will remove it from the room until the room is restarted (unless the room is persistent). Calling the function with no arguments will simply destroy the instance that is currently in scope and running the code, but you can provide an optional \"id\" argument and target a specific instance by using the instance {}{}id{}{} value, or you can target all instances of a particular object by using an {}{}object_index{}{}. For example:":"只要希望\"销毁\"实例，通常会触发{}销毁事件{}以及{}清理事件{}，即可调用此函数。 这将将其从房间中删除，直到房间重新启动(除非房间是持久性的)。调用没有参数的函数将简单地破坏当前在作用域中并运行代码的实例，但您可以提供一个可选的\"id\"参数并使用实例{}{}id{}{}值以特定实例为目标，或者可以使用{}{}object_index{}{}来瞄准特定对象的所有实例。 例如：",
    "{}OPTIONAL{} Set to {}true{} or {}false{} to perform the Destroy event or not (optional, default is {}true{})":"{}OPTIONAL{}设置为{}true{}或{}false{}以执行或不执行销毁事件(可选，默认值为{}true{})",
    "{}OPTIONAL{} The instance ID to destroy, or the object asset to destroy instances of (optional, default is the calling instance)":"{}OPTIONAL{}要销毁的实例 ID 或要销毁实例的对象资源(可选，默认为调用实例)"
}