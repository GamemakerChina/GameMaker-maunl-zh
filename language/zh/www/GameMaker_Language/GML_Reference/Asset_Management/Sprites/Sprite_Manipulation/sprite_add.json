{
    "All images that are to be turned into animated sprites - except for {}*.gif{} (see below) - should have a \"strip\" format (see the image below) and it will be split into the number of sub-images specified following the rule {}sprite width = strip width / sub images{}.":"要转换为动画精灵的所有图像-{}*GIF{}除外。（见下图）-应具有“条带”格式（见下图），并将按照规则{}Sprite Width=Strip Width/Sub Images{}将其拆分为指定数量的子图像。",
    "As you can see in the above image, the sprite has been placed on a dark purple background, and this can be removed by setting the \"removeback\" argument to {}true{}. This works by checking the {}bottom left{} pixel of the sprite for the colour there and then uses that as the colour to be removed. For example, in the above image, if we had the bottom left pixel colour as green, all the green parts of the sprite would have been removed and the rest of the purple background ignored.":"正如您在上图中所看到的，精灵被放置在深紫色的背景上，这可以通过将“ removeBack ”参数设置为{}true{}来删除。它的工作原理是检查精灵的{}左下角{}像素的颜色，然后将其用作要删除的颜色。例如，在上面的图像中，如果我们将左下角的像素颜色设置为绿色，则精灵的所有绿色部分都将被删除，而紫色背景的其余部分将被忽略。",
    "By default all new sprites have their bounding boxes calculated automatically (the exact bounding box will depend on the size and transparency of the sprite), however you may wish to customise this, in which case you should also use the function {}{}sprite_collision_mask(){}{}.":"默认情况下，所有新的精灵都会自动计算其边界框（确切的边界框将取决于精灵的大小和透明度），但是您可能希望对此进行自定义，在这种情况下，您还应该使用函数{}{}精灵_碰撞_遮罩（）{}{}。",
    "Finally you can also specify the x and y {}origin{} for the sprite. This is the point where the sprite is \"fixed\" onto the instance that uses it, and is always calculated as relative to the 0,0 top left corner of one sprite sub-image. So, for example, a sprite that is 32 x 32 pixels with these values set to (16,16) will have its origin in the center.":"最后，您还可以指定精灵的X和Y{}原点{}。这是精灵被“固定”到使用它的实例上的点，并且总是相对于一个精灵子图像的左上角0，0来计算。因此，例如，将这些值设置为（16，16）的32 X 32像素的sprite将使其原点位于中心。",
    "If you are adding a {}*.gif{} format image, then you only need to specify the filename and image number (which should be 1 for the first frame) and can leave all the other arguments as 0, noting that {}only the first image of the GIF will be loaded{}. For {}*.json{} sprites, the image number should be 1, and the \"removeback\" and \"smooth\" settings will be ignored.":"如果您正在添加一个{}*.GIF{}格式图像，则只需指定文件名和图像编号（第一帧的图像编号应为1），并且可以将所有其他参数保留为0，注意{}只会加载GIF的第一个图像{}。对于{}*.JSON{}sprites，图像编号应为1，并且“ RemoveBack ”和“ Smooth ”设置将被忽略。",
    "If you choose the \"removeback\" option, you may also want {}GameMaker{} to smooth the edges of the sprite by setting the \"smooth\" argument to {}true{}. All this does is create a semi-transparent border around the edges of the sprite after it has had its background removed.":"如果您选择“ RemoveBack ”选项，您可能还希望{}GameMaker{}通过将“ Smooth ”参数设置为{}true{}来平滑精灵的边缘。所有这些都是在精灵的背景被移除后，在精灵的边缘周围创建一个半透明的边界。",
    "Indicate the x position of the origin in the sprite.":"指示原点在精灵中的X位置。",
    "Indicate the y position of the origin in the sprite.":"指示原点在精灵中的Y位置。",
    "Indicates whether to make all pixels with the background colour (left-bottom pixel) transparent.":"指示是否将具有背景色的所有像素（左下像素）设置为透明。",
    "Indicates whether to smooth the edges if transparent.":"指示透明时是否平滑边缘。",
    "It should be noted that the memory used when adding a sprite in this way will be larger than you may expect. This is because {}GameMaker{} will store the sprite as a texture page {}and{} it will also be stored in GPU memory, so the total memory will be larger than would be expected for an image file of the same sprite.":"需要注意的是，以这种方式添加精灵时所使用的内存将比您预期的要大。这是因为{}GameMaker{}会将精灵存储为纹理页{}，并且{}它还会存储在GPU内存中，因此总内存将大于相同精灵的图像文件的预期内存。",
    "The above code loads a sprite into the game and stores its index in the variable \"spr\".":"上面的代码将sprite加载到游戏中，并将其索引存储在变量“ SPR ”中。",
    "The name (a string file path) of the file to add.":"要添加的文件的名称（字符串文件路径）。",
    "Use to indicate the number of sub-images (1 for a single image or for a {}*.gif{}).":"用于指示子图像的数量（1表示单个图像或{}*.GIF{}）。",
    "With this function you can add an image as a sprite, loading it from an external source where the image file to be loaded should {}always{} be in either {}*.png{}, {}*.gif{}, {}*.jpg/jpeg{} or {}*.json{} format ({}*json{} files are used for loading {}skeleton animation sprites{} made with Spine). The function returns the new sprite index which must then be used in all further code&nbsp;that relates to the sprite. If you use this function with HTML5 or are getting an image from a&nbsp;URL, this function will also generate an {}Image Loaded{} asynchronous event. See {}this page{}&nbsp;for more information.":"使用此函数，您可以将图像添加为sprite，从外部源加载它，其中要加载的图像文件应{}始终{}在{}*PNG{}中，{}*.gif{}，{}*.JPG/JPEG{}或{}*.JSON{}格式（{}*JSON{}文件用于加载使用Spine制作的{}骨骼动画精灵{}）。该函数返回新的sprite索引，然后必须在与该sprite相关的所有其他代码中使用该索引。如果您将此函数与HTML5一起使用，或者从URL获取图像，则此函数还将生成一个{}Image Loaded{}异步事件。有关详细信息，请参阅{}本页{}。",
    "{}NOTE{}: On {}HTML5{}, if you are loading a sprite from a secure server you may need to set the cross-origin type and use a relative path instead of an absolute path. See {}{}{}http_set_request_crossorigin(){}{}{}&nbsp;for more details.":"{}注意{}：在{}HTML5{}上，如果您从安全服务器加载sprite，则可能需要设置跨来源类型并使用相对路径而不是绝对路径。有关更多详细信息，请参见{}{}{}HTTP_设置_请求_CrossOrigin（）{}{",
    "{}NOTE{}: On {}iOS{}, if you are loading an included file from a folder, ie: with a path something like \"{}{}Backgrounds/background1.png{}{}\", you do NOT need to include the folder as part of the path and simply supplying the file name is sufficient. On all other platforms you must supply the folder(s) as part of the path to the file.":"{}注意{}：在{}IOS{}上，如果您正在从文件夹中加载包含的文件，即：路径类似于{}{}background/background1。PNG{}{}，您不需要将文件夹作为路径的一部分，只需提供文件名就足够了。在所有其他平台上，您必须提供文件夹作为文件路径的一部分。",
    "{}NOTE{}: When you load a sprite into {}GameMaker{} you must remember to remove it again (with {}{}sprite_delete(){}{}) when no longer needed, otherwise there is risk of a memory leak which will slow down and eventually crash your game.":"{}注意{}：当您将精灵加载到{}GameMaker{}中时，您必须记住在不再需要时再次删除它（使用{}{}Sprite_delete（）{}{}），否则会有内存泄漏的风险，这将降低游戏速度并最终使游戏崩溃。"
}