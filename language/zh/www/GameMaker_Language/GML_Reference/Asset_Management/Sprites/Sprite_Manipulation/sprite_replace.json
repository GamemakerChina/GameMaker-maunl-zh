{
    "As you can see in the above image, the sprite has been placed on a dark purple background, and this can be removed by setting the \"removeback\" argument to {}true{}. This works by checking the {}bottom left{} pixel of the sprite for the colour there and then uses that as the colour to be removed. For example, in the above image, if we had the bottom left pixel colour as green, all the green parts of the sprite would have been removed and the rest of the purple background ignored.":"正如您在上图中所看到的，精灵被放置在深紫色的背景上，这可以通过将“ removeBack ”参数设置为{}true{}来删除。它的工作原理是检查精灵的{}左下{}像素的颜色，然后将其用作要删除的颜色。例如，在上面的图像中，如果我们将左下角的像素颜色设置为绿色，则精灵的所有绿色部分都将被删除，而紫色背景的其余部分将被忽略。",
    "By default all new sprites have their bounding boxes calculated automatically (the exact bbox will depend on the size and transparency of the sprite), however you may wish to customise this, in which case you should also use the function {}{}sprite_collision_mask(){}{}.":"默认情况下，所有新的精灵都会自动计算其边界框(确切的边界框将取决于精灵的大小和透明度)，但是您可能希望对此进行自定义，在这种情况下，您还应该使用函数 {}{}sprite_collision_mask(){}{}。",
    "Finally you can also specify the x and y {}origin{} for the sprite. This is the point where the sprite is \"fixed\" onto the instance that uses it, and is always calculated as relative to the 0,0 top left corner of one sprite sub-image. So, for example, a sprite that is 32 x 32 pixels with these values set to (16,16) will have its origin in the center.":"最后，您还可以为精灵指定X和Y{}原点{}。这是精灵被“固定”到使用它的实例上的点，并且总是相对于一个精灵子图像的左上角0，0来计算。因此，例如，将这些值设置为(16，16)的32 X 32像素的精灵将使其原点位于中心。",
    "If you choose the \"removeback\" option, you may also want {}GameMaker{} to smooth the edges of the sprite by setting the \"smooth\" argument to {}true{}. All this does is create a semi-transparent border around the edges of the sprite after it has had its background removed.":"如果您选择“removeback”选项，您可能还希望 {}GameMaker{} 通过将“smooth”参数设置为 {}true{} 来平滑精灵的边缘。所有这些都是在精灵的背景被移除后，在精灵的边缘创建一个半透明的边界。",
    "Indicates whether to make all pixels with the background colour (left-bottom pixel) transparent.":"指示是否将具有背景色的所有像素(左下像素)设置为透明。",
    "Indicates whether to smooth the edges.":"指示是否平滑边缘。",
    "The above code will replace the image asset indexed in \"spr_banner\" with another one loaded from an external source.":"上面的代码将“ SPR_横幅”中索引的图像资源替换为从外部源加载的另一个图像资源。",
    "The filename of the image to make the new sprite.":"要创建新精灵的图像的文件名。",
    "The image file to be loaded should {}always{} be in {}*.png{} format and all images that are to be turned into animated sprites should have a \"strip\" format (see the image below). They will be split into the number of sub-images specified following the rule {}sprite width = strip width / sub images{}.":"要加载的图像文件应 {} 始终 {} 在 {}*.png{} 格式和所有要转换为动画精灵的图像都应该具有“条带”格式(见下图)。它们将按照规则 {} 精灵宽度 = 条带宽度 / 子图像 {} 分割为指定数量的子图像。",
    "The index of the sprite to permanently replace.":"要永久替换的精灵的索引。",
    "The number of frames the sprite will be cut up into horizontally. Use 1 for one single image or&nbsp;{}*.gif{}.":"精灵将被水平分割的帧数。将1用于单个图像或{}*.GIF{}。",
    "The x coordinate of the origin, relative to the sprite\u0027s top left corner.":"原点的X坐标，相对于精灵的左上角。",
    "The y coordinate of the origin, relative to the sprite\u0027s top left corner.":"原点的Y坐标，相对于精灵的左上角。",
    "This function works in almost the exact same manner as {}{}sprite_add(){}{}, only instead of returning the index of the sprite you are importing, it overwrites a previously created sprite index. When using this function you should use a sprite index that has been created and stored in a variable using other functions like {}{}sprite_add(){}{} or {}{}sprite_create_from_surface(){}{}, or even {}{}sprite_duplicate(){}{}, rather than a resource tree sprite asset. You {}can{} replace a sprite from the game assets using this function, but doing so means that you will lose the reference ID for the sprite that you are replacing, regardless of whether you call {}game_restart(){} or not, and so is not recommended. Regardless of the sprite being replaced, this function will {}create a new texture page for the sprite{} and so care should be taken when using it as it may adversely affect performance by increasing the number of required texture swaps for rendering.":"此函数的工作方式几乎与{}{}sprite_add(){}{}完全相同，唯一的不同之处在于，它不是返回正在导入的精灵的索引，而是覆盖以前创建的精灵索引。使用此函数时，您应该使用已创建并存储在变量中的精灵索引，而不是使用资源树精灵资源，该变量使用其他函数，如{}{}sprite_add(){}{}或{}{}sprite_create_from_surface(){}{}，或甚至{}{}sprite_duplicate(){}{}。您{}可以使用此函数{}替换游戏资源中的精灵，但这样做意味着您将丢失要替换的精灵的引用ID，无论您是否调用{}game_restart(){}，因此不建议这样做。无论替换哪个精灵，此函数都将{}为精灵创建一个新的纹理页面{}，因此在使用它时应小心，因为它可能会增加渲染所需的纹理交换数量，从而对性能产生不利影响。",
    "{}NOTE{}: Depending on the target platform that is chosen you are limited as to where you can save and load files from. See {}File Handling{} for more information.":"{}注意{}：根据所选的目标平台，保存和加载文件的位置会受到限制。有关详细信息，请参阅{}文件处理{}。",
    "{}NOTE{}: You should be aware that if you are using this function in your HTML5 target game to load resources from an external server, then, due to XSS protection in browsers, attempts to load resources from across domains can be blocked and may appear to return blank results.":"{}注意{}：请注意，如果您在HTML5目标游戏中使用此函数从外部服务器加载资源，则由于浏览器中的XSS保护，从跨域加载资源的尝试可能会被阻止，并且可能会返回空白结果。"
}