{
    "Debug messages shown with this function will be shown in the {}Compiler Output Window{} at the bottom of the IDE as well as in the {}Graph View{} of the debugger when running the game in Debug Mode. If you only want to see messages in Debug Mode then you should probably be using {}{}debug_event(){}{} instead.":"在调试模式下运行游戏时，使用此函数显示的调试消息将显示在IDE底部的{}编译器输出窗口{}以及调试器的{}图形视图{}中。如果您只想在调试模式下查看消息，那么您可能应该使用{}{}debug_event(){}{}。",
    "The above code checks to see if an instance exists and if it does not, a debug message is shown in the compile window and the game is ended.":"上面的代码检查实例是否存在，如果不存在，则在编译窗口中显示调试消息并结束游戏。",
    "The custom debug message to show.":"要显示的自定义调试消息。",
    "The syntax of this function is identical to that of the&nbsp;{}{}string{}{}&nbsp;function; aside from a single argument it can also take a {}Format String{}&nbsp;with placeholders and additional arguments to replace the placeholders with.":"此函数的语法与 {}{}string{}{} 函数的语法相同除了单个参数外，它还可以接受带有占位符的{}格式字符串{}以及用来替换占位符的其他参数。",
    "The value to be turned into a string.":"要转换为字符串的值。",
    "This function creates a custom debug message that is shown in the compiler window at runtime.":"此函数创建自定义调试消息，该消息在运行时显示在编译器窗口中。",
    "This function shows a custom debug message in&nbsp;{}The Output Window{} and&nbsp;{}The Debug Overlay{} at runtime.":"此函数在运行时在 {} 输出窗口 {} 和 {} 调试覆盖层 {} 中显示自定义调试消息。",
    "This function will create a custom debug message that is shown in the compiler window at runtime. Note that the message can be {}either{} a string or a real number, but if you need both then the number will have to be converted to string first using the {}{}string(){}{} function (see the example below) and that if the number has more than two decimal places then you should use {}{}string_format(){}{} to show them as by default decimals are rounded to the nearest two decimal places (so \"1.2468\" would show as \"1.25\" in the output window).":"此函数将创建自定义调试消息，该消息在运行时显示在编译器窗口中。请注意，消息可以是字符串{}或{}实数，但是如果你同时需要两者，则必须先使用{}{}string(){}{}函数将数字转换为字符串(参见下面的示例)，如果数字小数超过两位，则应使用{}{}string_format(){}{}来显示它们，因为默认情况下，小数四舍五入到最接近的小数点后两位(因此 \"1.2468\" 将在输出窗口中显示为 \"1.25\")。",
    "Values of type&nbsp;{}Array{}&nbsp;will be converted to a string of the format {}[element1, element2, element3, element4, element5]{}, i.e. the concatenation of all elements in the array. If any of the elements in the array is a struct or an instance then its&nbsp;{}toString() Method{} will be called to convert it to a string.":"{}数组{} 类型的值将被转换为格式为{}[Element1，Element2，Element3，Element4，Element5]{}的字符串，即数组中所有元素的串联。如果数组中的任何元素是结构或实例，则将调用其 {}toString()方法{}将其转换为字符串。",
    "Values of type&nbsp;{}Struct{}&nbsp;or {}Instance{}&nbsp;will be converted to a string using that struct\u0027s or instance\u0027s&nbsp;{}toString() Method{}&nbsp;if one exists, or converted to a string implicitly.":"类型为{}结构{}或{}实例{}的值将使用该结构或实例的 {}toString() 方法{}(如果存在)转换为字符串，或者隐式转换为字符串。",
    "Values of type&nbsp;{}{}Real{}{}&nbsp;that are an integer will have no decimal places in the string. Values of type&nbsp;{}{}Real{}{}&nbsp;that have a fractional part will have two decimal places in the string. If you need more decimal places in the output string you can use the function {}{}string_format{}{}.":"{}{}Real{}{} 类型为整数的值在字符串中不会有小数位。具有小数部分的 {}{}Real{}{} 类型的值在字符串中有两个小数位。如果在输出字符串中需要更多的小数位，可以使用函数{}{}string_format{}{}。",
    "{}{}OPTIONAL{}{}&nbsp;The values to be inserted at the placeholder positions.":"{}{}可选{}{} 要插入占位符位置的值。"
}