{
    "A boolean indicating whether any child nodes have overflown outside of the bounds of the node":"一个布尔值，指示是否有任何子节点溢出到节点边界之外",
    "By default, the returned position will be relative to the position of the parent container. You can pass&nbsp;{}false{} to the {}relative{} argument to instead return the absolute position of the node, after applying all parent transformations.":"默认情况下，返回的位置将相对于父容器的位置。您可以将 {}false{} 传递给 {}relative{} 参数，以在应用所有父级转换后返回节点的绝对位置。",
    "Finally, the function is run for the root node, which will then be recursively executed for all of its child nodes as well.":"最后，该函数针对根节点运行，然后也将针对其所有子节点递归执行。",
    "It then iterates through each child of the node and runs the same function for each child.":"然后，它迭代该节点的每个子节点，并为每个子节点运行相同的函数。",
    "The bottom edge\u0027s margin value":"下边缘的边距值",
    "The bottom edge\u0027s padding value":"底部边缘的内边距值",
    "The calculated X position of the left edge of the node":"计算出的节点左边缘的 X 位置",
    "The calculated Y position of the top edge of the node":"计算出的节点顶边的 Y 位置",
    "The height of the node":"节点的高度",
    "The layout direction used for this node":"该节点使用的布局方向",
    "The left edge\u0027s margin value":"左边缘的边距值",
    "The left edge\u0027s padding value":"左边缘的内边距值",
    "The node to get the layout position of":"获取布局位置的节点",
    "The position of the bottom edge of the node, relative to the bottom edge of its parent container":"节点下边缘相对于其父容器下边缘的位置",
    "The position of the right edge of the node, relative to the right edge of its parent container":"节点右边缘相对于其父容器右边缘的位置",
    "The returned struct will contain the following members:":"返回的结构将包含以下成员：",
    "The right edge\u0027s margin value":"右边缘的边距值",
    "The right edge\u0027s padding value":"右边缘的内边距值",
    "The top edge\u0027s margin value":"上边缘的边距值",
    "The top edge\u0027s padding value":"上边缘的内边距值",
    "The width of the node":"节点的宽度",
    "The {}left{}, {}top{}, {}width{} and {}height{} members are the ones that are most useful for making use of the calculated layouts (e.g. creating an object instance, drawing a rectangle, etc.).":"{}left{}、{}top{}、{}width{} 和 {}height{} 成员对于利用计算布局 (例如创建对象实例、绘制矩形、 ETC。)。",
    "This function returns a struct with the layout information of the given node. You must have called&nbsp;{}{}flexpanel_calculate_layout{}{}&nbsp;at least once on the node before calling this, otherwise all returned data will be 0.":"该函数返回一个包含给定节点的布局信息的结构。调用此函数之前，您必须在节点上至少调用一次 {}{}flexpanel_calculate_layout{}{}，否则所有返回的数据将为 0。",
    "This function takes a node and a depth. It then gets the absolute positional data for the node and creates an&nbsp;{}{}Object Instance{}{}&nbsp;at the node\u0027s calculated position, giving the instance the node\u0027s name, width and height.":"该函数需要一个节点和一个深度。然后，它获取节点的绝对位置数据，并在节点的计算位置创建一个 {}{} 对象实例 {}{}，并为该实例提供节点的名称、宽度和高度。",
    "{}{}OPTIONAL{}{}&nbsp;Whether to return relative positions ({}true{}, default) or absolute positions ({}false{})":"{}{} 可选{}{} 是否返回相对位置 ({}true{}，默认值) 或绝对位置 ({}false{})"
}