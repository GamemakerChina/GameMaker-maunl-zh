{
    "A&nbsp;{}{}Real{}{}&nbsp;value, e.g. {}64{}: This defines a size in absolute pixels, however depending on other properties, this may or may not be the {}final size{} of the node.":"{}{} 真实 {}{} 值，例如 {}64{}：这定义了以绝对像素为单位的尺寸，但是根据其他属性，这可能是也可能不是节点的 {} 最终尺寸 {}。",
    "Align Content":"对齐内容(Align Content)",
    "Align Items":"对齐项目(Align Items)",
    "Align Self":"自我对齐(Align Self)",
    "Also see the {}Flex{} property below.":"另请参阅下面的 {}Flex{} 属性。",
    "Any values other than 1 determine how a node is shrinked against other growing nodes in the same container.":"1 以外的任何值都确定节点如何相对于同一容器中的其他增长节点进行收缩。",
    "Any values other than 1 determine how a node is sized against other growing nodes in the same container, e.g. the node with a larger value will be given more size.":"1 以外的任何值都决定节点的大小如何根据同一容器中的其他生长节点进行调整，例如具有较大值的节点将被赋予更大的大小。",
    "Aspect Ratio":"长宽比(Aspect Ratio)",
    "Basic Properties":"基本属性",
    "Border":"边界(Border)",
    "Both width and height can take the following values:":"宽度和高度都可以采用以下值：",
    "Data":"数据(Data)",
    "Display":"显示(Display)",
    "Flex":"柔性(Flex)",
    "Flex Basis":"柔性基础(Flex Basis)",
    "Flex Direction":"柔性方向(Flex Direction)",
    "Flex Grow":"柔性扩大(Flex Grow)",
    "Flex Shrink":"柔性收缩(Flex Shrink)",
    "Flex Wrap":"柔性换行(Flex Wrap)",
    "For example, a {}left{} value of {}20{} will place the node\u0027s left edge 20 pixels to the right of the parent\u0027s left edge. A {}right{} value of {}40{} will move the node so its right edge is 40 pixels to the left of its parent\u0027s, without resizing the node.":"例如，{}left{} 值为 {}20{} 会将节点的左边缘置于父级左边缘右侧 20 个像素处。{}right{} 值为 {}40{} 将移动节点，使其右边缘距其父节点的左侧 40 个像素，而不调整节点大小。",
    "For example, an aspect ratio of {}1{} will result in a square node, {}2{} will be a 2:1 rectangle where its width is twice as much as its height, {}0.5{} will make the width half the size of the height.":"例如，纵横比为 {}1{} 将生成方形节点，{}2{} 将生成 2:1 的矩形，其宽度是其高度的两倍，{}0.5{} 将生成宽度是高度的一半。",
    "For example, having a 400px container with a 40px node and then a node with {}flexGrow: 1{} will give the second node any remaining space within the container.":"例如，如果一个 400 像素的容器带有一个 40 像素的节点，然后一个带有 {}flexGrow: 1{} 的节点将为第二个节点提供容器内的任何剩余空间。",
    "For nodes that don\u0027t have a defined width/height, this will increase the width/height.":"对于没有定义宽度 / 高度的节点，这将增加宽度 / 高度。",
    "Gap":"间距(Gap)",
    "If {}flexWrap{} is set to {}wrap{} or {}wrap-reverse{}, any items overflowing along the main axis will be laid out across new lines on the cross axis. This property controls how those wrapped lines are distributed along the cross axis.":"如果 {}flexWrap{} 设置为 {}wrap{} 或 {}wrap-reverse{}，则沿主轴溢出的任何项目都将跨轴上的新行进行布局。此属性控制这些包裹线如何沿横轴分布。",
    "Insets":"嵌入(Insets)",
    "Justify Content":"主轴对齐(Justify Content)",
    "Layout Direction":"布局方向(Layout Direction)",
    "Margin":"外边距(Margin)",
    "Min/Max Width and Height":"最小/最大 宽度和高度",
    "Name":"名称(Name)",
    "Nodes":"节点(Nodes)",
    "Padding":"填充(Padding)",
    "Percentage value as string, e.g. {}\"50%\"{}: This defines the width or height as a percentage of its&nbsp;{}Containing Block{}\u0027s width or height.":"字符串形式的百分比值，例如 {}\"50%\"{}：这将宽度或高度定义为其 {} 包含块 {} 的宽度或高度的百分比。",
    "Position Type":"位置类型(Position Type)",
    "Property List":"属性列表",
    "Struct properties: {}alignContent{}{} Functions:&nbsp;{}{}flexpanel_node_style_set_align_content{}{},&nbsp;{}{}flexpanel_node_style_get_align_content{}{}":"结构体属性：{}alignContent{}{} 函数：{}{}flexpanel_node_style_set_align_content{}{}、{}{}flexpanel_node_style_get_align_content{}{}",
    "Struct properties: {}alignItems{}{} Functions:&nbsp;{}{}flexpanel_node_style_set_align_items{}{},&nbsp;{}{}flexpanel_node_style_get_align_items{}{}":"结构体属性：{}alignItems{}{} 函数：{}{}flexpanel_node_style_set_align_items{}{}、{}{}flexpanel_node_style_get_align_items{}{}",
    "Struct properties: {}alignSelf{}{} Functions:&nbsp;{}{}flexpanel_node_style_set_align_self{}{},&nbsp;{}{}flexpanel_node_style_get_align_self{}{}":"结构体属性：{}alignSelf{}{} 函数：{}{}flexpanel_node_style_set_align_self{}{}、{}{}flexpanel_node_style_get_align_self{}{}",
    "Struct properties: {}direction{}{} Functions:&nbsp;{}{}flexpanel_node_style_set_direction{}{},&nbsp;{}{}flexpanel_node_style_get_direction{}{}":"结构属性：{}direction{}{} 函数：{}{}flexpanel_node_style_set_direction{}{}、{}{}flexpanel_node_style_get_direction{}{}",
    "Struct properties: {}display{}{} Functions:&nbsp;{}{}flexpanel_node_style_set_display{}{},&nbsp;{}{}flexpanel_node_style_get_display{}{}":"结构体属性：{}display{}{} 函数：{}{}flexpanel_node_style_set_display{}{}、{}{}flexpanel_node_style_get_display{}{}",
    "Struct properties: {}flexBasis{}{} Functions:&nbsp;{}{}flexpanel_node_style_set_flex_basis{}{},&nbsp;{}{}flexpanel_node_style_get_flex_basis{}{}":"结构体属性：{}flexBasis{}{} 函数：{}{}flexpanel_node_style_set_flex_basis{}{}、{}{}flexpanel_node_style_get_flex_basis{}{}",
    "Struct properties: {}flexDirection{}{} Functions:&nbsp;{}{}flexpanel_node_style_set_flex_direction{}{},&nbsp;{}{}flexpanel_node_style_get_flex_direction{}{}":"结构体属性：{}flexDirection{}{} 函数：{}{}flexpanel_node_style_set_flex_direction{}{}、{}{}flexpanel_node_style_get_flex_direction{}{}",
    "Struct properties: {}flexGrow{}{} Functions:&nbsp;{}{}flexpanel_node_style_set_flex_grow{}{},&nbsp;{}{}flexpanel_node_style_get_flex_grow{}{}":"结构体属性：{}flexGrow{}{} 函数：{}{}flexpanel_node_style_set_flex_grow{}{}、{}{}flexpanel_node_style_get_flex_grow{}{}",
    "Struct properties: {}flexShrink{}{} Functions:&nbsp;{}{}flexpanel_node_style_set_flex_shrink{}{},&nbsp;{}{}flexpanel_node_style_get_flex_shrink{}{}":"结构体属性：{}flexShrink{}{} 函数：{}{}flexpanel_node_style_set_flex_shrink{}{}、{}{}flexpanel_node_style_get_flex_shrink{}{}",
    "Struct properties: {}flexWrap{}{} Functions:&nbsp;{}{}flexpanel_node_style_set_flex_wrap{}{},&nbsp;{}{}flexpanel_node_style_get_flex_wrap{}{}":"结构体属性：{}flexWrap{}{} 函数：{}{}flexpanel_node_style_set_flex_wrap{}{}、{}{}flexpanel_node_style_get_flex_wrap{}{}",
    "Struct properties: {}flex{}{} Functions:&nbsp;{}{}flexpanel_node_style_set_flex{}{},&nbsp;{}{}flexpanel_node_style_get_flex{}{}":"结构属性：{}flex{}{} 函数：{}{}flexpanel_node_style_set_flex{}{}、{}{}flexpanel_node_style_get_flex{}{}",
    "Struct properties: {}justifyContent{}{} Functions:&nbsp;{}{}flexpanel_node_style_set_justify_content{}{},&nbsp;{}{}flexpanel_node_style_get_justify_content{}{}":"结构体属性：{}justifyContent{}{} 函数：{}{}flexpanel_node_style_set_justify_content{}{}、{}{}flexpanel_node_style_get_justify_content{}{}",
    "Struct properties: {}left{}, {}right{}, {}top{}, {}bottom{}, {}start{}, {}end{}{} Functions:&nbsp;{}{}flexpanel_node_style_set_position{}{},&nbsp;{}{}flexpanel_node_style_get_position{}{}":"结构属性：{}left{}、{}right{}、{}top{}、{}bottom{}、{}start{}、{}end{}{} 函数：{}{}flexpanel_node_style_set_position{}{}、{}{}flexpanel_node_style_get_position{}{}",
    "Struct properties: {}minWidth{}, {}maxWidth{}, {}minHeight{}, {}maxHeight{}{} Functions:&nbsp;{}{}flexpanel_node_style_set_min_width{}{},&nbsp;{}{}flexpanel_node_style_set_max_width{}{},&nbsp;{}{}flexpanel_node_style_set_min_height{}{},&nbsp;{}{}flexpanel_node_style_set_max_height{}{},&nbsp;{}{}flexpanel_node_style_get_min_width{}{},&nbsp;{}{}flexpanel_node_style_get_max_width{}{},&nbsp;{}{}flexpanel_node_style_get_min_height{}{},&nbsp;{}{}flexpanel_node_style_get_max_height{}{}":"结构属性：{}minWidth{}、{}maxWidth{}、{}minHeight{}、{}maxHeight{}{} 函数：{}{}flexpanel_node_style_set_min_width{}{}、{}{}flexpanel_node_style_set_max_width{}{}、{}{}flexpanel_node_style_set_min_height{}{}、{}{}flexpanel_node_style_set_max_height{}{}、{}{}flexpanel_node_style_get_min_width{}{}、{}{}flexpanel_node_style_get_max_width{}{}、{}{}flexpanel_node_style_get_min_height{}{}、{}{}flexpanel_node_style_get_max_height{}{}",
    "Struct properties: {}position{}, {}positionType{}{} Functions:&nbsp;{}{}flexpanel_node_style_set_position_type{}{},&nbsp;{}{}flexpanel_node_style_get_position_type{}{}":"结构属性：{}position{}、{}positionType{}{} 函数：{}{}flexpanel_node_style_set_position_type{}{}、{}{}flexpanel_node_style_get_position_type{}{}",
    "Struct properties: {}width{}, {}height{}{} Functions:&nbsp;{}{}flexpanel_node_style_set_width{}{},&nbsp;{}{}flexpanel_node_style_set_height{}{},&nbsp;{}{}flexpanel_node_style_get_width{}{},&nbsp;{}{}flexpanel_node_style_get_height{}{}":"结构属性：{}width{}, {}height{}{} 函数：{}{}flexpanel_node_style_set_width{}{}、{}{}flexpanel_node_style_set_height{}{}、{}{}flexpanel_node_style_get_width{}{}、{}{}flexpanel_node_style_get_height{}{}",
    "Struct properties:&nbsp;{}border{}, {}borderLeft{}, {}borderRight{}, {}borderTop{}, {}borderBottom{}, {}borderStart{}, {}borderEnd{}, {}borderHorizontal{}, {}borderVertical{}{} Functions:&nbsp;{}{}flexpanel_node_style_set_border{}{},&nbsp;{}{}flexpanel_node_style_get_border{}{}":"结构体属性：{}border{}、{}borderLeft{}、{}borderRight{}、{}borderTop{}、{}borderBottom{}、{}borderStart{}、{}borderEnd{}、{}borderHorizo\u200B\u200Bntal{}、{}borderVertical{}{} 函数：{}{}flexpanel_node_style_set_border{}{}、{}{}flexpanel_node_style_get_border{}{}",
    "Struct properties:&nbsp;{}gap{}, {}gapRow{}, {}gapColumn{}{} Functions:&nbsp;{}{}flexpanel_node_style_set_gap{}{},&nbsp;{}{}flexpanel_node_style_get_gap{}{}":"结构属性：{}gap{}、{}gapRow{}、{}gapColumn{}{} 函数：{}{}flexpanel_node_style_set_gap{}{}、{}{}flexpanel_node_style_get_gap{}{}",
    "Struct properties:&nbsp;{}margin{}, {}marginLeft{}, {}marginRight{}, {}marginTop{}, {}marginBottom{}, {}marginStart{}, {}marginEnd{}, {}marginHorizontal{}, {}marginVertical{}{} Functions:&nbsp;{}{}flexpanel_node_style_set_margin{}{},&nbsp;{}{}flexpanel_node_style_get_margin{}{}":"结构属性：{}margin{}、{}marginLeft{}、{}marginRight{}、{}marginTop{}、{}marginBottom{}、{}marginStart{}、{}marginEnd{}、{}marginHorizo\u200B\u200Bntal{}、{}marginVertical{}{} 函数：{}{}flexpanel_node_style_set_margin{}{}、{}{}flexpanel_node_style_get_margin{}{}",
    "Struct properties:&nbsp;{}padding{}, {}paddingLeft{}, {}paddingRight{}, {}paddingTop{}, {}paddingBottom{}, {}paddingStart{}, {}paddingEnd{}, {}paddingHorizontal{}, {}paddingVertical{}{} Functions:&nbsp;{}{}flexpanel_node_style_set_padding{}{},&nbsp;{}{}flexpanel_node_style_get_padding{}{}":"结构体属性：{}padding{}、{}paddingLeft{}、{}paddingRight{}、{}paddingTop{}、{}paddingBottom{}、{}paddingStart{}、{}paddingEnd{}、{}paddingHorizo\u200B\u200Bntal{}、{}paddingVertical{}{} 函数：{}{}flexpanel_node_style_set_padding{}{}、{}{}flexpanel_node_style_get_padding{}{}",
    "Struct property: {}aspectRatio{}{} Functions:&nbsp;{}{}flexpanel_node_style_set_aspect_ratio{}{},&nbsp;{}{}flexpanel_node_style_get_aspect_ratio{}{}":"结构体属性：{}aspectRatio{}{} 函数：{}{}flexpanel_node_style_set_aspect_ratio{}{}、{}{}flexpanel_node_style_get_aspect_ratio{}{}",
    "Struct property: {}data{}{} Function:&nbsp;{}{}flexpanel_node_get_data{}{}":"结构属性：{}data{}{} 函数：{}{}flexpanel_node_get_data{}{}",
    "Struct property: {}name{}{} Functions:&nbsp;{}{}flexpanel_node_set_name{}{},&nbsp;{}{}flexpanel_node_get_name{}{}":"结构属性：{}name{}{} 函数：{}{}flexpanel_node_set_name{}{}、{}{}flexpanel_node_get_name{}{}",
    "Struct property: {}nodes{}{} Functions:&nbsp;{}{}flexpanel_node_insert_child{}{},&nbsp;{}{}flexpanel_node_remove_child{}{},&nbsp;{}{}flexpanel_node_remove_all_children{}{},&nbsp;{}{}flexpanel_node_get_child{}{}":"结构体属性：{}nodes{}{} 函数：{}{}flexpanel_node_insert_child{}{}、{}{}flexpanel_node_remove_child{}{}、{}{}flexpanel_node_remove_all_children{}{}、{}{}flexpanel_node_get_child{}{}}",
    "Styling Properties":"样式属性",
    "The properties that you can define in the struct or JSON string are listed below. The rest of the page describes each property in detail.":"下面列出了您可以在结构体或 JSON 字符串中定义的属性。该页面的其余部分详细描述了每个属性。",
    "The sections below describe what type of values you can pass for each property.":"以下部分描述了您可以为每个属性传递什么类型的值。",
    "The {}alignContent{} property controls how the wrapped lines on the cross axis are laid out.":"{}alignContent{} 属性控制横轴上换行的布局方式。",
    "The {}justifyContent{} property controls how child nodes are laid out on the main axis, and {}alignItems{} controls how they are placed on the cross axis.":"{}justifyContent{} 属性控制子节点在主轴上的布局方式，而 {}alignItems{} 控制子节点在横轴上的放置方式。",
    "The {}nodes{} member is an array. This array defines the child nodes under the current node, where each node is a struct with the same format described on this page.":"{}nodes{} 成员是一个数组。该数组定义了当前节点下的子节点，其中每个节点都是一个与本页描述的格式相同的结构体。",
    "These properties define the distance between an edge of the node and the same edge of its parent\u0027s node, with positive values moving the node toward the centre, and negative values moving it away from the centre.":"这些属性定义节点的边缘与其父节点的同一边缘之间的距离，正值将节点移向中心，负值将节点移离中心。",
    "These properties define the minimum and maximum size the node must maintain in each dimension. It accepts absolute pixel values ({}{}Real{}{}) and percentage values ({}{}String{}{}&nbsp;ending with {}%{}) (as described in the previous section).":"这些属性定义节点在每个维度中必须保持的最小和最大大小。它接受绝对像素值 ({}{}Real{}{}) 和百分比值 (以 {8}%{9} 结尾的 {}{}String{}{})( 如上一节所述)。",
    "These properties define the width and height of the \"border box\" of the node, which is the collective size of the node\u0027s content, padding and border.":"这些属性定义了节点 \" 边框 \" 的宽度和高度，即节点内容、填充和边框的集体尺寸。",
    "These values also accept percentages as strings.":"这些值还接受百分比作为字符串。",
    "This acts the same as padding.":"这与填充(Padding)的作用相同。",
    "This can be set for an entire layout tree when {}calculating its layout{}.":"可以在 {} 计算其布局 {} 时为整个布局树设置此值。",
    "This controls how the node grows within its flex container depending on the remaining space in the container. It\u0027s a positive weight value with a default of 1.":"这控制节点如何在其弹性容器内增长，具体取决于容器中的剩余空间。它是一个正权重值，默认值为 1。",
    "This controls how the node shrinks within its flex container when there is overflow. It\u0027s a positive weight value with a default of 1.":"这控制当溢出时节点如何在其弹性容器内收缩。它是一个正权重值，默认值为 1。",
    "This controls how the non-absolute children of a flex container are aligned along its cross axis (i.e. the direction perpendicular to {}flexDirection{}).":"它控制 Flex 容器的非绝对子级如何沿其横轴 (即垂直于 {}flexDirection{} 的方向) 对齐。",
    "This controls how the non-absolute children of a flex container are aligned along its main axis (i.e. the direction of {}flexDirection{}).":"它控制 Flex 容器的非绝对子级如何沿其主轴 (即 {}flexDirection{} 的方向) 对齐。",
    "This controls what happens when children in the container have overflown on the main axis. By default, they will overflow or shrink depending on their properties.":"这控制当容器中的子元素在主轴上溢出时会发生什么。默认情况下，它们将根据其属性溢出或缩小。",
    "This controls which layout mode the node follows. You can choose from the following values:":"这控制节点遵循哪种布局模式。您可以从以下值中进行选择：",
    "This defines a root node with child nodes nested within it (and further child nodes within child nodes).":"这定义了一个根节点，其中嵌套了子节点 (以及子节点内的其他子节点)。",
    "This defines the position type of the node. You can pass any one of the following strings:":"这定义了节点的位置类型。您可以传递以下任一字符串：",
    "This is shorthand for the {}flexGrow{} and {}flexShrink{} properties. It will act as {}flexGrow{} when the value is positive, and {}flexShrink{} when it\u0027s negative.":"这是 {}flexGrow{} 和 {}flexShrink{} 属性的简写。当值为正时，它将充当 {}flexGrow{}; 当值为负时，它将充当 {}flexShrink{}。",
    "This is the added distance between each row and column of the flex container and affects distances between child nodes. You can apply to both axes with {}gap{} or apply only to rows or columns.":"这是弹性容器的每行和每列之间增加的距离，并影响子节点之间的距离。您可以应用到带有 {}gap{} 的两个轴，或者仅应用到行或列。",
    "This is the aspect ratio that the node must maintain and corresponds to the horizontal axis.":"这是节点必须保持的纵横比，与水平轴相对应。",
    "This is the default size of an item within its flex container before any flex grow or shrink is applied. For a row container this affects the width, and for a column container this affects the height.":"这是应用任何 Flex 增长或收缩之前 Flex 容器内项目的默认大小。对于行容器，这会影响宽度，对于列容器，这会影响高度。",
    "This is the direction in which non-absolute children of the node are laid out. This direction is known as the main axis, and the direction perpendicular to this is known as the cross axis.":"这是节点的非绝对子节点的布局方向。该方向称为主轴线，垂直于该方向的方向称为横轴。",
    "This is the layout direction of the node and its children. You can pass either of two strings:":"这是节点及其子节点的布局方向。您可以传递两个字符串之一：",
    "This is the same as {}alignItems{} (described above) however instead of being applied to a container, this is applied directly to a child node, and affects its cross-axis alignment within its container. This property overrides the {}alignItems{} value set for its parent container.":"这与 {}alignItems{}( 如上所述) 相同，但不是应用于容器，而是直接应用于子节点，并影响其在容器内的横轴对齐。此属性会覆盖为其父容器设置的 {}alignItems{} 值。",
    "This is the space around the outside of the node. You can define it for all edges or for a specific edge. Accepts pixel values and percentages.":"这是节点外部周围的空间。您可以为所有边或特定边定义它。接受像素值和百分比。",
    "This is the spacing between the inner edges of the node and its children.&nbsp;You can define it for all edges or for a specific edge. Accepts pixel values and percentages.":"这是节点及其子节点的内边缘之间的间距。您可以为所有边或特定边定义它。接受像素值和百分比。",
    "When creating a new&nbsp;{}Flex Panel{}&nbsp;node using&nbsp;{}{}flexpanel_create_node{}{}, you can pass a struct containing information on the node and its children, or a string containing JSON for the same data. For example:":"使用 {}{}flexpanel_create_node{}{} 创建新的 {0}Flex Panel{1} 节点时，您可以传递包含节点及其子节点信息的结构体，或包含相同数据 JSON 的字符串。例如：",
    "When this member is not supplied, a node is still created with an empty data struct, which can be retrieved at any time. The returned struct can be modified and it affects what is returned with future calls to the function for the same node.":"当未提供此成员时，仍会使用空数据结构创建节点，可以随时检索该数据结构。返回的结构可以修改，它会影响将来调用同一节点的函数时返回的内容。",
    "Width and Height":"宽度和高度",
    "You can choose from the following values:":"您可以从以下值中进行选择：",
    "You can give a node a {}data{} member which is a struct that can store any data you like. It does not affect the layouts and is for your own use.":"您可以为节点提供一个 {}data{} 成员，该成员是一个可以存储您喜欢的任何数据的结构。它不影响布局，供您自己使用。",
    "You can give each node an optional, non-unique name. This can help you identify a node when using the final layout data in your systems.":"您可以为每个节点指定一个可选的、非唯一的名称。这可以帮助您在系统中使用最终布局数据时识别节点。",
    "You can nest nodes inside nodes, e.g.:":"您可以在节点内嵌套节点，例如：",
    "{}\"absolute\"{}: This node is removed from the flow of its parent and will not take up space. Inset positions will be relative to the {}Containing Block{}&nbsp;which may not be its direct parent.":"{}\"absolute\"{}：该节点将从其父级流中移除，并且不会占用空间。插入位置将相对于 {} 包含块 {}，该块可能不是其直接父级。",
    "{}\"auto\"{}: This is the default value. It calculates the width or height of the node based on its content (e.g. child nodes).":"{}\"auto\"{}：这是默认值。它根据节点的内容 (例如子节点) 计算节点的宽度或高度。",
    "{}\"baseline\"{}: Align children along a common baseline. Individual children can be set to be the reference baseline for their parents.":"{}\"baseline\"{}：将子项沿共同基线对齐。可以将个别孩子设置为父母的参考基线。",
    "{}\"center\"{}: Align children to the centre of the cross axis.":"{}\"center\"{}：将子项与横轴的中心对齐。",
    "{}\"center\"{}: Align children to the centre of the main axis.":"{}\"center\"{}：将子项与主轴中心对齐。",
    "{}\"column\"{} (default): Align children from top to bottom.":"{}\"column\"{}( 默认)：从上到下对齐子项。",
    "{}\"column-reverse\"{}:&nbsp;Align children from bottom to top.":"{}\"column-reverse\"{}：从下到上对齐子项。",
    "{}\"flex\"{} (default): The default layout behaviour.":"{}\"flex\"{}( 默认)：默认布局行为。",
    "{}\"flex-end\"{}:&nbsp;Align children to the end of the cross axis.":"{}\"flex-end\"{}：将子项与横轴的末端对齐。",
    "{}\"flex-end\"{}:&nbsp;Align children to the end of the main axis, acting as the opposite of&nbsp;{}flexDirection{}.":"{}\"flex-end\"{}：将子项与主轴末端对齐，与 {}flexDirection{} 相反。",
    "{}\"flex-start\"{} (default): Align children to the start of the cross axis.":"{}\"flex-start\"{}( 默认)：将子项与横轴的起点对齐。",
    "{}\"flex-start\"{} (default): Align children to the start of the main axis, as set in {}flexDirection{}.":"{}\"flex-start\"{}( 默认)：将子项与主轴的起点对齐，如 {}flexDirection{} 中的设置。",
    "{}\"flex-start\"{}: Align children to the start of the cross axis.":"{}\"flex-start\"{}：将子项与横轴的起点对齐。",
    "{}\"ltr\"{}: Flex panels are laid out from left to right. The&nbsp;{}start{} inset refers to {}left{} and {}end{} refers to {}right{}.":"{}\"ltr\"{}: 弹性面板从左到右排列。{}start{} 嵌入指的是 {}left{}，而 {}end{} 指的是 {}right{}",
    "{}\"no-wrap\"{} (default): Default behaviour, no wrapping":"{}\"no-wrap\"{}( 默认)：默认行为，不换行",
    "{}\"none\"{}:&nbsp;Disables the node. This effectively functions as the node being removed from the tree, as it\u0027s not included in any calculations.":"{}\"none\"{}：禁用节点。这实际上起到了从树中删除节点的作用，因为它不包含在任何计算中。",
    "{}\"relative\"{} (default): This node will participate in the flow of its parent container and will take up space in it. Inset positions ({}left{}, {}top{}, etc.) will be relative to the node\u0027s position within the flow.":"{}\"relative\"{}( 默认)：此节点将参与其父容器的流并占用其中的空间。插入位置 ({}左侧{}、{}顶部{} 等) 将相对于流中的节点位置。",
    "{}\"row\"{}:&nbsp;Align children from left to right.":"{}\"row\"{}：从左到右对齐子项。",
    "{}\"row-reverse\"{}:&nbsp;Align children from right to left.":"{}\"row-reverse\"{}：从右向左对齐子项。",
    "{}\"rtl\"{}:&nbsp;Flex panels are laid out from right to left. The&nbsp;{}start{} inset refers to {}right{} and {}end{} refers to {}left{}.":"{}\"rtl\"{}: 弹性面板从右到左排列。{}start{} 嵌入指的是 {}right{}，而 {}end{} 指的是 {}left{}",
    "{}\"space-around\"{}: Similar to {}space-between{} but distributes the space before the first child and after the last child as well.":"{}\"space-around\"{}：与 {}space-between{} 类似，但也在第一个子项之前和最后一个子项之后分配空间。",
    "{}\"space-between\"{}: Align children from the start of the container to the end along the cross axis, inserting space between each child to fill the container.":"{}\"space-between\"{}：沿横轴将子项从容器的开头到末端对齐，在每个子项之间插入空格以填充容器。",
    "{}\"space-between\"{}: Align children from the start of the container to the end, inserting space between each child to fill the container.":"{}\"space-between\"{}：将子项从容器的开头到末尾对齐，在每个子项之间插入空格以填充容器。",
    "{}\"space-evenly\"{}: Similar to {}space-around{} but the spacing between the edges and the children, and between each child node, is exactly the same.":"{}\"space-evenly\"{}：与 {}space-around{} 类似，但边与子节点之间以及每个子节点之间的间距完全相同。",
    "{}\"static\"{}: The node will behave like relative except it will ignore insets and will not form a {}Containing Block{}&nbsp;for its children.":"{}\"static\"{}：节点的行为类似于相对节点，只是它会忽略插入并且不会为其子节点形成 {} 包含块 {}。",
    "{}\"stretch\"{}&nbsp;(default): Stretch children to fit the size of the cross axis.":"{}\"stretch\"{}( 默认)：拉伸子项以适应横轴的大小。",
    "{}\"wrap\"{}: Child nodes are wrapped on overflow, with each new line being placed on the cross axis":"{}\"wrap\"{}：子节点在溢出时被包裹，每个新行都被放置在交叉轴上",
    "{}\"wrap-reverse\"{}: Child nodes are wrapped but the order of the lines is reversed":"{}\"wrap-reverse\"{}：子节点被包裹，但行的顺序相反",
    "{}Flex Panel Struct Members{}":"{}柔性面板结构成员 {}",
    "{}left{} and {}top{} will always take precedence over {}right{} and {}bottom{}, respectively. {}start{} and {}end{} change depending on the {}Layout Direction{}.":"{}left{} 和 {}top{} 始终分别优先于 {}right{} 和 {}bottom{}。{}start{} 和 {}end{} 根据 {} 布局方向 {} 而变化。",
    "{}{}IMPORTANT{}{}&nbsp;Each property also has&nbsp;GML functions for setting and getting that property for a node. However, the types of values that a setter function accepts may be different from the type of value you can give it in the struct/JSON. Ensure you read the page for the function you are trying to use for information on its argument types.":"{}{} 重要{}{} 每个属性还具有用于设置和获取节点属性的 GML 函数。但是，setter 函数接受的值类型可能与您在 struct/JSON 中提供的值类型不同。确保您阅读了您尝试使用的函数的页面，以获取有关其参数类型的信息。",
    "{}{}NOTE{}{}&nbsp;You can also refer to {}Yoga\u0027s styling documentation{} for information beyond what this page describes.":"{}{} 注意{}{} 您还可以参阅 {}Yoga 的样式文档 {} 以获取本页面描述之外的信息。"
}