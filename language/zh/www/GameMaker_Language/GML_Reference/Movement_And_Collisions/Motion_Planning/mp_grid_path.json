{
    "Finishing x coordinate of the new path":"完成新路径的x坐标",
    "Finishing y coordinate of the new path":"完成新路径的y坐标",
    "Index of the mp_grid that is to be used":"要使用的mp_grid的索引",
    "Indicates whether diagonal moves are allowed instead of just horizontal or vertical":"指示是否允许对角线移动，而不仅仅是水平或垂直移动",
    "Starting x coordinate of the new path":"新路径的起始x坐标",
    "Starting y coordinate of the new path":"新路径的起始Y坐标",
    "The above code creates a global variable \"global.grid\", then generates an mp_grid and assigns its index (id) to that variable for use in all further mp_grid function calls. It then adds all instances of \"obj_Wall\" into the grid before getting all instances of \"obj_Enemy\" to create a path and then use {}mp_grid_path{} to calculate a rout from their position to the position of \"obj_Player\". If a route exists then the object starts itself along the path.":"上述代码创建一个全局变量global.grid，然后生成一个mp_grid并将其index(id)分配给该变量，以便在所有进一步的mp_grid函数调用中使用。然后将\"obj_Wall\"的所有实例添加到网格中，然后获取\"obj_Enemy\"的所有实例以创建路径，然后使用{}mp_grid_path{}计算从其位置到\"obj_Player\"位置的路由。如果存在路由，则对象将沿路径启动自身。",
    "With this function you can create a path that will navigate from a start point to a finish point using an {}mp_grid{} that you have previously defined, avoiding any obstacles that have already been added into the grid. The xstart and ystart arguments indicate the start of the path in room coordinates, while xgoal, ygoal arguments indicate the destination. You can also select either horizontal/vertical movement only, or allow full diagonal movements by specifying true in the allowdiag argument. The function returns either true (it succeeded in finding a path) or false (it failed) as well as setting the chosen path. In the following image, you can see how this all works together:":"使用此函数，您可以创建一个路径，该路径将使用先前定义的{}mp_grid{}从起点导航到终点，从而避免已添加到网格中的任何障碍。xstart和ystart参数指示房间坐标中路径的起点，而xgoal和ygoal参数指示目标。也可以只选择水平/垂直移动，或者通过在allowdiag参数中指定true来允许完全对角线移动。函数返回true(成功查找路径)或false(失败)以及设置所选路径。在下图中，您可以看到这一切是如何协同工作的：",
    "index of the path that is to be used by the function":"函数要使用的路径的索引",
    "{}As you can see, the \"pipe\" objects have been added into the grid, meaning that any path created has to go around them. There are two paths created in the image, one (green) has been made with diagonals allowed and the other (red) without. The difference between the two is pretty obvious with the green path appearing much more \"elegant\" and direct, but it all depends what use you are going to put them to which one you prefer. Note that the path is independent of the current instance - it is a path through the grid, not a path for a specific instance, even though a specific instance may have the variable that stores the path index. You may also need to debug these paths to see how they are made and interact within the game environment, in which case you should be using the {}{}draw_path(){}{}&nbsp;function.":"{}如您所见，\"管道\"对象已添加到网格中，这意味着创建的任何路径都必须绕过它们。在图像中创建了两条路径，一条(绿色)为允许对角线，另一条(红色)为不允许对角线。两者之间的区别非常明显，绿色道路显得更加\"优雅\"和直接，但这完全取决于你将他们放在你更喜欢的地方有什么用。请注意，路径与当前实例无关-它是通过网格的路径，而不是特定实例的路径，即使特定实例可能具有存储路径索引的变量。您可能还需要调试这些路径以查看它们是如何在游戏环境中创建和交互的，在这种情况下，您应该使用{}{}draw_path(){}{}函数。",
    "{}NOTE{}: The path must have been previously created (either in code with {}{}{}path_add(){}{}{} or as a resource) and will be replaced by the path generated by this function.":"{}注意{}:路径必须是以前创建的(使用{}{}{}path_add(){}{}{}的代码或作为资源)，并且将由此函数生成的路径替换。"
}