{
    "Finally we specify a start position and a goal position, both of which&nbsp;{}must{}&nbsp;lie in free cells, and the function then computes the shortest path possible between these two positions. The path will run between the centers of all free cells, so if the cells are large enough so that the instance placed at its center will lie completely inside it this will be successful. This path is then assigned to the instance to follow using the&nbsp;{}{}path_*{}{}&nbsp;functions. You should realise how important cell size is for this as the cells must be large enough so that the moving object placed with its origin on the center of a cell will lie&nbsp;{}completely{}&nbsp;inside the cell. (Be careful about the position of the origin of the object. Also realize that you can shift the path if the origin of the object is not in its center!) On the other hand, the smaller the cells the more possible paths exist. If you make cells too large, openings between obstacles may get closed because all cells intersect an obstacle.":"最后，我们指定一个起始位置和一个目标位置，这两个位置都{}必须{}位于自由单元格中，然后函数计算这两个位置之间可能的最短路径。路径将在所有自由单元格的中心之间运行，因此，如果单元格足够大，以便放置在其中心的实例将完全位于其内部，这将是成功的。然后使用{}{}path_*{}{}函数将此路径分配给要跟随的实例。您应该意识到单元格大小对于此有多重要，因为单元格必须足够大，以便将移动对象放置在单元格中心，使其原点完全位于单元格内部{}。(请注意对象原点的位置。还要注意，如果对象的原点不在其中心，则可以移动路径！)另一方面，单元越小，可能存在的路径越多。如果将单元格设置得太大，则障碍物之间的洞口可能会关闭，因为所有单元格都与障碍物相交。",
    "In many games you want opponents, NPC\u0027s, enemies etc... to interact with the player and show certain intelligence when moving around ie: you want them to avoid obstacles, plan routes and generally not bump into everything in their path! To aid in this {}GameMaker{} has a series of functions that deal with motion planning. Note that while these are designed for things like game enemies, they can be used for all sorts of things like creating a smooth way to introduce text, or to create transitions etc... However, whatever you choose to use from the list below in your game, it should be noted that in many situations a single function set will not give you a perfect solution and that you will have to \"mix and match\" the functions, using one or the other depending on the situation within your game.":"在许多游戏中，你希望对手，Npc，敌人等……与玩家互动，并在四处移动时表现出某种智慧：你希望他们避开障碍，规划路线，并且通常不会碰到他们路径中的任何东西！{}GameMaker{}具有一系列处理运动规划的功能。请注意，虽然这些是针对游戏敌人等事物而设计的，但它们可以用于各种各样的事情，如创建引入文本的流畅方式，或创建过渡等……然而，无论您在游戏中从下面的列表中选择使用什么，都应该注意，在许多情况下，单个功能集不会给您提供完美的解决方案，您必须根据游戏中的情况使用其中一个或另一个来\"混合和匹配\"功能。",
    "Motion planning in {}GameMaker{} is dealt with by the {}mp_{} functions, which themselves are split into the following three groups:":"{}GameMaker{}中的运动规划由{}mp_{}功能处理，这些功能本身分为以下三个组：",
    "Next, for all relevant objects that we want to avoid we need to determine the grid cells they overlap (based either on their bounding boxes or their precise sprite) and mark these cells as being forbidden. So a cell will be marked totally forbidden, even if an obstacle is only partially overlapping.":"接下来，对于我们想要避免的所有相关对象，我们需要确定它们重叠的栅格单元格(基于它们的边界框或精确的精灵)，并将这些单元格标记为禁止。因此，一个细胞将被标记为完全禁止，即使障碍只是部分重叠。",
    "The final type of function use a much more complex mechanism based on a grid-based approach (sometimes called an A* algorithm). It will be much more successful in finding paths (although it still might fail) and will find the shortest paths possible but it requires more work on your side to set it up.":"最后一种类型的函数使用更复杂的基于网格的方法(有时称为A*算法)的机制。它将更成功地找到路径(尽管它仍然可能失败)，并且会找到可能的最短路径，但是它需要你做更多的工作来设置它。",
    "The global idea is as follows - First of all we create a grid that covers the room (or the relevant part of it). You can choose to use a fine grid, which will be slower, or a coarse grid, but both of them should be based on the resolution of the room so that the path-finding is as accurate as possible. For example, if you have a room that is 400x200 pixels, you can have a grid resolution of 40, or 20, or 10... it all depends on how accurate you need the path to be and how much processing you want GameMaker to do to generate it.":"全局设想如下-首先，我们创建一个网格来覆盖房间(或其相关部分)。您可以选择使用较慢的细栅格或粗栅格，但这两种栅格都应基于房间的分辨率，以便尽可能精确地查找路径。例如，如果您有一个400 x 200像素的房间，则可以将栅格分辨率设置为40、20或10...这完全取决于您需要路径的准确程度，以及您希望GameMaker执行多少处理来生成该路径。",
    "The grid-based approach is very powerful (and is used in many professional games) but it requires that you do some careful thinking as you must determine which area and cell size are good enough for solving the game. Also, you must determine which objects must be avoided and whether precise checking is important. All these parameters strongly influence the efficiency of the approach. You must also decide whether it is actually necessary as maybe one of the less costly {}mp_*{}&nbsp;functions can do the job just as well.":"基于网格的方法非常强大(在许多专业游戏中使用)，但它需要你仔细思考，因为你必须确定哪个区域和单元格大小足以解决游戏。此外，还必须确定必须避免哪些对象，以及精确检查是否重要。所有这些参数都极大地影响了该方法的效率。您还必须确定是否实际上有必要这样做，因为成本较低的{}mp_*{}函数也可以完成这项工作。",
    "These are the basic avoidance functions and good for simple AI. They work by making an instance take a step towards a particular goal position while trying to go straight if possible but taking a different direction if required. These functions should be used in the&nbsp;{}Step Event{}&nbsp;of an instance.":"这些都是基本的回避功能，对简单的Ai有好处。它们的工作方式是使实例朝着特定目标位置迈出一步，同时尽可能直接尝试，但如果需要，可以采用不同的方向。应在实例的{}步骤事件{}中使用这些函数。",
    "This kind of function tries to compute a collision-free path for the instance. Once this path has been computed you can assign it to the instance to move towards the goal. The computation of the path will take some time but after that the execution of the path will be fast. Of course this is only valid if the situation has not changed in the meantime. For example, if obstacles change you possibly will need to recompute the path. Again notice that these functions might fail and that no path may be found for the instance.":"此类函数尝试计算实例的无冲突路径。计算此路径后，可以将其指定给实例以向目标移动。路径的计算将需要一些时间，但在此之后，路径的执行将会很快。当然，这只有在情况没有改变的情况下才有效。例如，如果障碍物发生变化，则可能需要重新计算路径。请再次注意，这些函数可能会失败，并且可能找不到实例的路径。",
    "{}Grid Functions{}":"{}网格函数{}",
    "{}Linear Functions{}":"{}线性函数{}",
    "{}Potential Functions{}":"{}潜在功能{}"
}