{
    "The above code uses the {}rectangle_in_circle{} function to check for a collision within a circular area and the rectangle around a found instance. If there is a collision (either an edge overlap or encompassed) then a variable will be set to {}true{}.":"以上代码使用{}rectangle_in_circle{}函数检查圆形区域内是否存在碰撞以及找到的实例周围是否存在矩形。如果存在冲突(边缘重叠或包含)，则变量将设置为{}true{}。",
    "The radius around the center point in which to check for a collision.":"要检查碰撞的中心点周围的半径。",
    "The x coordinate of the centre of the circle":"圆心的x坐标",
    "The x coordinate of the left side of the source rectangle.":"源矩形左侧的x坐标。",
    "The x coordinate of the right side of the source rectangle.":"源矩形右侧的x坐标。",
    "The y coordinate of the bottom side of the source rectangle.":"源矩形底侧的y坐标。",
    "The y coordinate of the centre of the circle.":"圆心的y坐标。",
    "The y coordinate of the top side of the source rectangle.":"源矩形顶边的y坐标。",
    "This function will check a rectangular area that you define to see if it is either not in collision, completely within the destination bounds, or if it is simply touching, a defined circular area. If they are not touching at all the function will return 0, if the source is completely within the destination it will return 1, and if they are simply overlapping then it will return 2. The image below illustrates this:":"此函数将检查您定义的矩形区域，以查看它是否完全不在目标边界内碰撞，或者它是否只是接触到定义的圆形区域。如果它们完全不接触，则函数将返回0;如果源完全在目标范围内，则返回1;如果它们只是重叠，则返回2。下图说明了这一点："
}