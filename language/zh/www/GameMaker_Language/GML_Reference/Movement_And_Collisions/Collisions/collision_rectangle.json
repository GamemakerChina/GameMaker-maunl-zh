{
    "Note that instead of an object index you can supply an instance {}{}id{}{} to check for a specific instance, or the {}instance keywords{} {}all{}, or {}other{} (depending on the event and current code scope).":"请注意，您可以不提供对象索引，而提供实例{}{}id{}{}来检查特定实例，或{}实例关键字{}{}all{}或{}other{}(取决于事件和当前代码范围)。",
    "The object or instance to check for.":"要检查的对象或实例。",
    "The x coordinate of the left side of the rectangle to check.":"要检查的矩形左侧的x坐标。",
    "The x coordinate of the right side of the rectangle to check.":"要检查的矩形右侧的x坐标。",
    "The y coordinate of the bottom side of the rectangle to check.":"要检查的矩形底边的y坐标。",
    "The y coordinate of the top side of the rectangle to check.":"要检查的矩形顶边的y坐标。",
    "This short code uses collision_rectangle check an area in the room from 50x, 50y (top left of the rectangle) to 200x, 200y (bottom right of the rectangle) for an instance of an object called \"obj_ball\". It stores the return value in a temporary variable which is then checked to see if that value is an instance id, or the keyword {}{}noone{}{}. If it is {}not{} {}noone{} then it uses the stored instance id to destroy the object.":"此简短代码使用collision_rectangle检查房间中从50 x、50 y(矩形左上角)到200 x、200 y(矩形右下角)的区域，以查找名为\"obj_ball\"的对象的实例。它将返回值存储在临时变量中，然后检查该临时变量的值是实例ID还是关键字{}{}noone{}{}。如果它是{}而不是{}{}noone{}，则使用存储的实例ID来销毁对象。",
    "Whether the calling instance, if relevant, should be excluded ({}true{}) or not ({}false{}).":"是否应排除调用实例(如果相关)({}true{})或({}false{})。",
    "Whether the check is based on precise collisions ({}true{}, which is slower) or its bounding box in general ({}false{}, faster).":"检查是基于精确碰撞({}true{}，速度较慢)还是基于其边界框({}false{}，速度较快)。",
    "{}Collision_rectangle{} uses the first four arguments (x1,y1,x2,y2) to define an area within the current room and then checks to see if {}any{} object that is defined by the \"obj\" argument is in collision with that area. This collision can be checked as precise or not, and you may also choose to check for the instance running the code itself or not. Consider this image:":"{}Collision_rectangle{}使用前四个参数(x 1、y 1、x 2、y 2 )定义当前房间中的区域，然后检查{}\"obj\"参数定义的任何{}对象是否与该区域冲突。可以精确或不精确地检查此冲突，也可以选择是否检查运行代码本身的实例。请考虑以下图像：",
    "{}Here, the instance in the middle is using a collision rectangle to check for ball objects. Now, the blue ones do {}not{} have a precise bounding box and as you can see, even if the sprite is not actually touching the rectangle, the collision will still happen (even if you set the precise option in the function to true) as the bounding box of that sprite over-laps the collision_rectangle. On the other hand, the green balls will only be considered in collision if the actual sprite over-laps the rectangle. Remember, for precise collisions to be considered {}both{} the object sprite and the collision function must have precise marked as on. It should also be noted that the return value of the function can be the id of {}any one{} of the instances considered to be in collision.":"{}在这里，中间的实例使用碰撞矩形来检查球对象。现在，蓝色的{}没有{}精确的边界框，如您所见，即使子画面没有实际接触矩形，碰撞仍会发生(即使您在函数中将精确选项设置为true)，因为该子画面的边界框与Collision_rectangle重叠。另一方面，只有当实际的子画面与矩形重叠时，才会考虑碰撞中的绿球。请记住，{}要同时考虑{}对象sprite和碰撞函数的精确碰撞，必须将其精确标记为on。还应注意，函数的返回值可以是被认为处于冲突中的任何一个{}实例的ID。"
}