{
    "Advanced Collision Checking":"高级碰撞检查",
    "All of the above functions are related to collision checking {}instances{}, and as such rely on the collision mask that is defined for the instance. However, there are many moments when you require to check for \"collisions\" with a point or an area, especially when your instance does not have a sprite assigned, or when you are working with the mouse etc... Therefore {}GameMaker{} also provides the following functions to help you in these situations:":"以上所有功能都与碰撞检查{}实例{}相关，因此依赖于为该实例定义的碰撞掩码。但是，有许多时刻需要检查与点或区域的\"碰撞\"，尤其是当您的实例没有指定子画面时，或者当您正在使用鼠标等时...因此{}GameMaker{}还提供以下功能来帮助您解决这些问题：",
    "Collision Checking Without A Mask":"不带掩码的碰撞检查",
    "Physics Collisions":"物理碰撞",
    "The basic functions will return either the ID of an instance found to be colliding, or the special keyword&nbsp;{}noone{}&nbsp;when there is no collision, while the&nbsp;{}list{}&nbsp;functions will return the number of instances that are in collision and populate a pre-made DS list with their IDs. Note that if there are multiple collisions with the areas defined by these functions and instances of the given object, only&nbsp;{}one{}&nbsp;instance ID is returned, and it can be&nbsp;{}any one of the instances in the collision{}.":"基本函数将返回发现有冲突的实例的Id，或者在没有冲突时返回特殊关键字{}noone{}，而{}列表{}函数将返回冲突的实例数，并用它们的Id填充预制的D列表。请注意，如果与给定对象的这些函数和实例定义的区域存在多个冲突，则仅返回{}一个{}实例Id，并且它可以是冲突{}中的任何一个实例。",
    "The following functions deal with the various ways in which you can have an instance check for collisions with another instance:":"以下函数处理各种方法，通过这些方法可以使实例检查是否与另一个实例发生冲突：",
    "The following functions exist that deal with advanced collisions.":"存在以下处理高级冲突的函数。",
    "The following routines can be used for this (as well as other functions detailed in the sections relating to {}Moving Around{} and {}Instances{}). These collision functions all work slightly differently but they maintain three common arguments which we will explain here:":"以下例程可用于此(以及与{}移动{}和{}实例{}相关的章节中详细说明的其他函数)。这些碰撞函数的工作方式略有不同，但它们保留了三个常见参数，我们将在此处进行说明：",
    "When planning motions or deciding on certain actions, it is often important to see whether there are collisions with other objects at certain places within the game world, and often choosing the right collision for the job is the most important task of all. {}GameMaker{} has a number of built in functions to help you deal with collisions correctly and in accordance with the needs of your project.":"在规划动作或决定某些动作时，往往需要看到游戏世界中某些地方是否存在与其他对象的碰撞，而往往为工作选择正确的碰撞是所有工作中最重要的任务。{}GameMaker{}具有许多内置函数，可帮助您根据项目的需要正确处理冲突。",
    "When using the built-in physics, the above collision functions are not guaranteed to work for physics enabled instances. This is mainly due to the fact that these instances no longer use the majority of the regular built in variables (instead, physics enabled instances have their {}own set of variables{}) and neither do they use the collision mask or bounding box, as they use {}fixtures{} instead. However there is a special function for testing collisions with physics enabled that checks for overlapping fixtures:":"使用内置物理时，不能保证上述碰撞函数适用于启用物理的实例。这主要是由于这些实例不再使用大多数常规内置变量(相反，启用了物理的实例具有自己的{}组变量{})，也不使用碰撞掩码或边界框，因为它们改用了{}个设备{}。但是，有一个特殊功能可用于在启用了物理功能的情况下测试碰撞，该功能可检查重叠的设备：",
    "{}Simple Collision Checking{}":"{}简单的碰撞检查{}",
    "{}notme{}: You may need to check for collisions with an object that has the same index as the object that runs the code, so to prevent the code finding a collision with itself, you can set this to {}true{}. If you are specifically looking for the instance of the object running the code, or it\u0027s not important, it can be left as {}false{}.":"{}注意{}:您可能需要检查与运行代码的对象具有相同索引的对象是否冲突，以防止代码发现与自身冲突，您可以将此设置为{}true{}。如果您正在专门查找运行代码的对象的实例，或者这并不重要，则可以将其保留为{}false{}。",
    "{}obj{}: This is where we specify the object that the function has to check for a collision with. It can be an instance id, an object type, or the special GM keyword {}all{}. It is also worth noting that if the object type chosen is the designated {}parent{} of other objects, then all {}children{} of that object will be included in this check too.{}{}":"{}obj{}:这是指定函数必须检查是否与其冲突的对象的位置。它可以是实例ID、对象类型或特殊的Gm关键字{}all{}。另请注意，如果选择的对象类型是其他对象的指定{}父对象{}，则该对象的所有{}子对象{}也将包括在此检查中。{}{}",
    "{}prec{}: This can be either {}true{} or {}false{} and relates to the precision of the collision checking. If set to {}true{}, then precise collisions are to be calculated (but only if the object being checked for has \"precise\" marked for its collision detection in its mask properties) which is a slightly more complex task for the CPU and so should be used with caution. If {}false{} then collisions will be calculated based on the bounding box of the object to be checked for.{}{}":"{}prec{}:这可以是{}真{}或{}假{}，并且与碰撞检查的精度有关。如果设置为{}true{}，则要计算精确的碰撞(但前提是要检查的对象在其遮罩属性中具有为其碰撞检测标记的\"精度\")，这对于Cpu来说是一个稍微复杂的任务，因此应谨慎使用。如果{}为假{}，则将根据要检查的对象的边界框计算碰撞。{}{}",
    "{}{}NOTE{}{}&nbsp;Collision functions used to use integer values in previous versions of GameMaker, however they now use floating point values meaning that collision functions will no longer round non-integer arguments. For more information, please read {}Collision Compatibility Mode{}.":"{}{}注意{}{}碰撞函数在GameMaker的以前版本中用于使用整数值，但现在它们使用浮点值，这意味着碰撞函数将不再舍入非整数参数。有关详细信息，请阅读{}冲突兼容模式{}。"
}