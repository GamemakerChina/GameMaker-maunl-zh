{
    "Depending on the result of the comparison, the stencil test either passes or fails. The operation to perform when it passes is set with&nbsp;{}{}gpu_set_stencil_pass{}{}, the one to perform when it fails with&nbsp;{}{}gpu_set_stencil_fail{}{}. The operation can be to keep the current stencil value ({}stencilop_keep{}, the default both on pass and on fail), to replace it ({}stencilop_replace{}) or to apply a mathematical operation on it (set to 0, increment/decrement, invert bitwise).":"根据比较的结果，模板测试要么通过，要么失败。通过 {}{}gpu_set_stencil_pass{}{} 时执行的操作，通过 {}{}gpu_set_stencil_fail{}{} 失败时执行的操作。该操作可以是保留当前模板值 ({}stencilop_keep{}，通过和失败时的默认值)、替换它 ({}stencilop_replace{}) 或对其应用数学运算 (设置为 0，递增 / 递减，按位反转)。",
    "Finally, the stencil buffer is disabled again with another call to&nbsp;{}{}gpu_set_stencil_enable{}{}.":"最后，通过再次调用 {}{}gpu_set_stencil_enable{}{} 再次禁用模板缓冲区。",
    "First the stencil test is enabled with a call to&nbsp;{}{}gpu_set_stencil_enable{}{}&nbsp;and the stencil buffer is cleared to 0 using {}{}draw_clear_stencil{}{}. After that, the stencil comparison function is set to {}cmpfunc_greaterequal{}&nbsp;using&nbsp;{}{}gpu_set_stencil_func{}{} and the operation to perform when the stencil test passes set to {}stencilop_replace{}&nbsp;with a call to&nbsp;{}{}gpu_set_stencil_pass{}{} (the operation to perform when the stencil test fails remains at the default {}stencilop_keep{}).":"首先，通过调用 {}{}gpu_set_stencil_enable{}{} 启用模板测试，并使用 {}{}draw_clear_stencil{}{} 将模板缓冲区清除为 0。之后，使用 {}{}gpu_set_stencil_func{}{} 将模板比较函数设置为 {8}cmpfunc_greaterequal{9}，并通过调用 将模板测试通过时要执行的操作设置为 {14}stencilop_replace{15}{}{} gpu_set_stencil_pass{}{}( 模板测试失败时执行的操作保持默认的 {}stencilop_keep{})。",
    "Next, the stencil reference value is set to 128 using&nbsp;{}{}gpu_set_stencil_ref{}{}&nbsp;and a filled red circle is drawn. The stencil test passes for every pixel covered by the circle (because the comparison that takes place is {}128 &gt;= 0{}) and the value in the stencil buffer is replaced. A filled blue rectangle is then drawn with the stencil ref value set to 64 instead. For all pixels of the rectangle that overlap with the circle\u0027s pixels the comparison will be {}64 &gt;= 128{}. These pixels don\u0027t pass the stencil test, the current stencil value is kept and the pixel isn\u0027t drawn. For all pixels of the rectangle that {}don\u0027t{} overlap with the circle\u0027s pixels the comparison will be {}64 &gt;= 0{}. These pixels pass the stencil test, the current stencil value is replaced and the pixel is drawn.":"接下来，使用 {}{}gpu_set_stencil_ref{}{} 将模板参考值设置为 128，并绘制一个实心红色圆圈。对于圆圈覆盖的每个像素，模板测试都会通过 (因为进行的比较是 {}128 &gt;= 0{})，并且模板缓冲区中的值将被替换。然后绘制一个填充的蓝色矩形，并将模板参考值设置为 64。对于与圆形像素重叠的矩形的所有像素，比较结果将为 {}64 &gt;= 128{}。这些像素未通过模板测试，保留当前模板值并且不绘制像素。对于矩形中与圆形像素 {} 不 {} 重叠的所有像素，比较结果将为 {}64 &gt;= 0{}。这些像素通过了模板测试，当前的模板值被替换并绘制像素。",
    "See&nbsp;{}The Depth And Stencil Buffer{}&nbsp;for detailed information.":"有关详细信息，请参阅 {} 深度和模板缓冲区 {}。",
    "The code example above shows how to draw shapes with the stencil buffer enabled.":"上面的代码示例展示了如何在启用模板缓冲区的情况下绘制形状。",
    "The stencil test is a test performed on every pixel that\u0027s affected by the current draw command. It compares the stencil reference value set with&nbsp;{}{}gpu_set_stencil_ref{}{}&nbsp;to the value in the stencil buffer at that pixel, using the comparison set with&nbsp;{}{}gpu_set_stencil_func{}{}:&nbsp;":"模板测试是对受当前绘制命令影响的每个像素执行的测试。它使用 {}{}gpu_set_stencil_func{}{} 的比较集，将 {}{}gpu_set_stencil_ref{}{} 设置的模板参考值与模板缓冲区中该像素处的值进行比较：",
    "This function enables or disables the stencil test.":"此功能启用或禁用模板测试。",
    "Whether to enable the stencil test for subsequent draw commands":"是否为后续绘制命令启用模板测试"
}