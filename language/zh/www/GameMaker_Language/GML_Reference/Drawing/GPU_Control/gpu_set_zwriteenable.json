{
    "The above code switches off z-buffer writing, draws a number of objects, and then switches it back on again to continue drawing.":"上述代码关闭Z缓冲区写入，绘制多个对象，然后再次打开以继续绘制。",
    "The comparison mode to use (see list above)":"要使用的比较模式(请参阅上面的列表)",
    "The default value is that z-buffering is enabled ({}true{}).":"默认值为已启用z缓冲({}true{})。",
    "This function can be used to toggle on ({}true{}) and off ({}false{}) depth ordering using the z-buffer. When an instance is rendered in {}GameMaker{} , the depth of a generated pixel (its z coordinate) is stored in the z-buffer, then, if another instance of the scene must be rendered at the same pixel, the two depths are compared (z-testing - see {}{}gpu_set_ztestenable(){}{}) and the one \"closer\" to the observer is then saved to the z-buffer, replacing the old one. However, this is not always what you wish to happen and there are moments when you may want something to be drawn over everything else, no matter what its z value is. In those cases you can use this function to switch off writing to the z-buffer and so force whatever is being drawn to be drawn over everything else. Note that the description given here is for the {}default{} z-testing comparison mode, but that can be changed":"此函数可用于使用z缓冲区打开({}true{})和关闭({}false{})深度排序。在{}GameMaker{}中渲染实例时，生成的像素(其z坐标)的深度存储在z-缓冲区中，然后，如果必须在同一像素上渲染场景的另一个实例，则比较两个深度(z-测试-参见{}{}gpu_set_ztestenable(){}{})，然后将\"靠近\"观察器的\"一个\"保存到z-缓冲区中，替换旧的\"一个\"。然而，这并不总是你希望发生的事情，有时你可能希望某些事情被描绘在其他一切之上，无论它的z值是什么。在这些情况下，您可以使用此函数关闭对z缓冲区的写入，从而强制绘制的任何内容覆盖所有其他内容。请注意，此处给出的描述适用于{}默认{}z-测试比较模式，但可以更改"
}