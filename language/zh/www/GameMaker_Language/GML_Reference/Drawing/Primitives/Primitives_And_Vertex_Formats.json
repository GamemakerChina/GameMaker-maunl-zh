{
    "A primitive is a type of drawing done using points to define what is shown on the screen. They can be made up of single points, lines or triangles and can be coloured, have alpha blending and even be given a texture, which means that they can be used to create some very exciting effects in your 2D and 3D games!":"图元是一种使用点来定义屏幕上显示内容的绘图类型。它们可以由单个点、线或三角形组成，可以着色、进行 Alpha 混合，甚至可以赋予纹理，这意味着它们可以用来在 2D 和 3D 游戏中创建一些非常令人兴奋的效果！",
    "A primitive is a type of drawing done using points to define what is shown on the screen. They can be made up of single points, lines, or triangles and can be coloured, have alpha blending and even be given a texture, which means that they can be used to create some very exciting effects in a 2D game! For example, you can create a rectangle using multiple triangle primitives, then texture it with a flag sprite and in the draw event of an instance have that flag \"wave\" in the wind and distort the sprite you used by simply modifying the points that form the primitive.":"基元(图形基元,图元,图形输出原语)是一种使用点来定义屏幕上显示的内容的绘制类型。它们可以由单点、线或三角形组成，可以着色，有阿尔法混合，甚至可以赋予纹理，这意味着它们可以用来在2D游戏中创造一些非常令人兴奋的效果！例如，您可以使用多个三角形基元创建一个矩形，然后使用标志精灵对其进行纹理化，并且在实例的绘制事件中，通过简单地修改形成基元的点来使标志\"波浪\"在风中扭曲您使用的精灵。",
    "A {}vertex format{} lists the attributes that are stored for a vertex in order. You start defining one with&nbsp;{}{}vertex_format_begin{}{}, then add the attributes using the {}vertex_format_add_*{} functions and finally end it using&nbsp;{}{}vertex_format_end{}{}.":"{} 顶点格式 {} 按顺序列出为顶点存储的属性。您首先使用 {}{}vertex_format_begin{}{} 定义一个属性，然后使用 {}vertex_format_add_*{} 函数添加属性，最后使用 {}{}vertex_format_end{}{} 结束。",
    "Creating Primitives":"创建基元",
    "For an overview of how to build primitives using the vertex functions, see:":"有关如何使用顶点函数构建基元的概述，请参阅：",
    "For example, you can create a rectangle using two triangle primitives, then texture it with a flag sprite and in the Draw event of an instance have that flag \"wave\" in the wind and distort the sprite you used by simply modifying the points that form the primitive.{}{}":"例如，您可以使用两个三角形基元创建一个矩形，然后使用标志精灵对其进行纹理化，并在实例的绘制事件中让该标志在风中 \" 波动\"，并通过简单地修改形成的点来扭曲您使用的精灵原语。{}{}",
    "Function Reference":"功能参考",
    "Guide To Primitives And Vertex Building":"基元和顶点构建指南",
    "In the code examples above, the UVs are provided differently for vertex buffers. This is because the UVs are interpreted differently by both sets of functions:&nbsp;":"在上面的代码示例中，为顶点缓冲区提供了不同的 UV。这是因为两组函数对 UV 的解释不同：",
    "Information on drawing primitives can be found on the following pages:":"有关绘制基元的信息，请参见以下页面：",
    "Once you have created your vertex format (see the section above) you can then use it to build the primitives that you want to draw using the following veretx buffer functions:":"创建顶点格式后(请参阅上面的部分)，您可以使用它来构建要使用以下veretx缓冲区函数绘制的基元：",
    "Once you have created your vertex format (see the section above) you can then use it to build the primitives that you want to draw using the following vertex buffer functions:":"创建顶点格式后 (请参阅上面的部分)，您可以使用它来构建您想要使用以下顶点缓冲区函数绘制的图元：",
    "Primitive Functions":"基元函数",
    "Primitives":"基元",
    "Primitives And Vertex Formats":"基元和顶点格式",
    "Texture Coordinates":"纹理坐标",
    "The following is a complete example that makes use of&nbsp;{}GameMaker{}\u0027s default&nbsp;{}passthrough vertex format{}:&nbsp;":"以下是使用 {}GameMaker{} 的默认 {} 直通顶点格式 {} 的完整示例：",
    "The function&nbsp;{}{}vertex_texcoord{}{}&nbsp;doesn\u0027t map the texture coordinates that you pass it to any sprite in a texture page. Therefore, (0, 0) is the top-left corner of the texture page and (1, 1) is the bottom-right corner of the texture page, i.e. the range [0, 1] covers the entire texture page.":"函数 {}{}vertex_texcoord{}{} 不会将您传递的纹理坐标映射到纹理页面中的任何精灵。因此，(0, 0) 是纹理页的左上角，(1, 1) 是纹理页的右下角，即范围 [0, 1] 覆盖了整个纹理页。",
    "The functions&nbsp;{}{}draw_vertex_texture{}{}&nbsp;and&nbsp;{}{}draw_vertex_texture_colour{}{}&nbsp;map (0, 0) to the top-left corner of the sprite\u0027s region on the texture page and (1, 1) to the bottom-right corner of the sprite\u0027s region on the texture page.":"函数 {}{}draw_vertex_texture{}{} 和 {}{}draw_vertex_texture_colour{}{} 将 (0, 0) 映射到纹理页面上精灵区域的左上角，将 (1, 1) 映射到底部- 纹理页面上精灵区域的右角。",
    "The points of a primitive are called {}vertices{} (singular {}{}vertex{}{}) and store data about their position, colour, texture and possibly other information. The GPU then draws these vertices using the primitive {}type{}&nbsp;that you provide:&nbsp;":"图元的点称为 {} 顶点 {}( 单个 {}{} 顶点 {}{})，并存储有关其位置、颜色、纹理和可能的其他信息的数据。然后，GPU 使用您提供的原始 {} 类型 {} 绘制这些顶点：",
    "The primitive functions: the&nbsp;{}draw_primitive_*{} and {}draw_vertex_*{} functions":"基元函数：{}draw_primitive_*{} 和 {}draw_vertex_*{} 函数",
    "The {}draw_primitive_*{} functions allow you to define primitives and draw them directly to the screen (or to a {}surface{}). You call&nbsp;{}{}draw_primitive_begin{}{}&nbsp;or&nbsp;{}{}draw_primitive_begin_texture{}{}, then define the vertices with any of the {}draw_vertex_*{} functions and finally call&nbsp;{}{}draw_primitive_end{}{}&nbsp;to draw the primitive.":"{}draw_primitive_*{} 函数允许您定义基元并将其直接绘制到屏幕 (或 {} 表面 {})。您调用 {}{}draw_primitive_begin{}{} 或 {}{}draw_primitive_begin_texture{}{}，然后使用任意 {}draw_vertex_*{} 函数定义顶点，最后调用 {}{}draw_primitive_end{}{} 以绘制图元。",
    "Vertex Buffers":"顶点缓冲区",
    "Vertex Formats":"顶点格式",
    "Vertex buffers":"顶点缓冲区",
    "Vertex buffers are the more advanced way to define reusable primitives. They are&nbsp;{}Buffers{}&nbsp;that store data about vertices specifically (\"vertex data\").&nbsp;With vertex buffers you split up the definition of the primitive and its drawing.":"顶点缓冲区是定义可重用图元的更高级方法。它们是专门存储有关顶点的数据 (\" 顶点数据 \") 的 {} 缓冲区 {}。使用顶点缓冲区，您可以将图元的定义及其绘制分开。",
    "You create a new, empty vertex buffer using&nbsp;{}{}vertex_create_buffer{}{}&nbsp;/&nbsp;{}{}vertex_create_buffer_ext{}{} or create one and fill it with the data in a buffer using&nbsp;{}{}vertex_create_buffer_from_buffer{}{}&nbsp;/&nbsp;{}{}vertex_create_buffer_from_buffer_ext{}{}:":"您可以使用 {}{}vertex_create_buffer{}{}/{}{}vertex_create_buffer_ext{}{} 创建一个新的空顶点缓冲区，或者使用 {}{}vertex_create_buffer_from_buffer{}{} 创建一个缓冲区并用缓冲区中的数据填充它 /{}{}vertex_create_buffer_from_buffer_ext{}{}：",
    "You draw a vertex buffer by submitting it at any time in Draw events using&nbsp;{}{}vertex_submit{}{}, or just part&nbsp;of it using{}{}vertex_submit_ext{}{}.":"您可以使用 {}{}vertex_submit{}{} 在 Draw 事件中随时提交顶点缓冲区，或者使用 {}{}vertex_submit_ext{}{} 提交其中的一部分来绘制顶点缓冲区。",
    "{}GameMaker{}&nbsp;offers two ways to draw and create primitives:&nbsp;":"{}GameMaker{} 提供两种绘制和创建基元的方法：",
    "{}GameMaker{}&nbsp;permits you to define your own vertex formats from which you can create your own custom primitives. This can greatly speed up shader operations or can be used to extend their capabilities and create surprising effects.":"{}GameMaker{} 允许您定义自己的顶点格式，您可以从中创建自己的自定义基元。这可以大大加快着色器操作的速度，或者可以用来扩展其功能并创建令人惊讶的效果。",
    "{}GameMaker{}&nbsp;permits you to define your own {}vertex formats{} from which you can create your own custom primitives. This can greatly speed up shader operations or can be used to extend their capabilities and create surprising effects. You can find information on this in the following sections:":"{}GameMaker{}允许您定义自己的{}顶点格式{}，您可以从中创建自己的自定义基元。这可以大大加快着色器操作，或者可以用来扩展它们的函数并创建令人惊讶的效果。您可以在以下部分中找到相关信息：",
    "{}IMPORTANT!{} The primitives that you build should follow the format that you have set using the Vertex Format functions, so if you have defined a vertex format with only positional data, there is no point building your primitive with colour data. You should note that the order in which you add properties to the primitive you are building is defined by the order in which you added these properties when creating the vertex format, so if you have defined the vector format with the order position, colour and texture coordinate, you {}must{} add these properties to the primitive being built in the same order otherwise you will get errors.":"{}重要！{}您构建的基元应遵循使用顶点格式函数设置的格式，因此，如果您仅使用位置数据定义了顶点格式，则使用颜色数据构建基元是没有意义的。您应该注意，您向正在构建的原语添加属性的顺序是由您在创建顶点格式时添加这些属性的顺序定义的，因此如果您使用顺序位置、颜色和纹理坐标定义了向量格式，则{}必须{}将这些属性以相同的顺序添加到正在构建的基元中，否则您将获得错误。",
    "{}Primitives&nbsp;And Vertex Formats{}":"{} 基元和顶点格式 {}",
    "{}WARNING! {}These functions do not work with the HTML5 module unless you have enabled OpenGL in the {}Game Options{}.":"{}警告！{}除非您在{}游戏选项{}中启用了OpenGL，否则这些函数不能与HTML5模块一起使用。",
    "{}{}IMPORTANT{}{}&nbsp;The primitives that you build should follow the format that you have set using the Vertex Format functions, so if you have defined a vertex format with only positional data, there is no point building your primitive with colour data. You should note that the order in which you add properties to the primitive you are building is defined by the order in which you added these properties when creating the vertex format, so if you have defined the vector format with the order position, colour and texture coordinate, you {}must{} add these properties to the primitive being built in the same order otherwise you will get errors.":"{}{} 重要信息{}{} 您构建的基元应遵循您使用 \" 顶点格式 \" 函数设置的格式，因此，如果您定义了仅包含位置数据的顶点格式，则没有必要使用颜色构建基元数据。您应该注意，向正在构建的图元添加属性的顺序是由创建顶点格式时添加这些属性的顺序定义的，因此，如果您已使用顺序位置、颜色和纹理定义了矢量格式坐标，您 {} 必须 {} 将这些属性添加到以相同顺序构建的基元中，否则您会收到错误。",
    "{}{}NOTE{}{}&nbsp;See the&nbsp;{}Guide To Primitives And Vertex Building{}&nbsp;for more info on how to work with vertex buffers.":"{}{} 注意{}{} 有关如何使用顶点缓冲区的详细信息，请参阅 {} 基元和顶点构建指南 {}。",
    "{}{}NOTE{}{}&nbsp;See&nbsp;{}Transferring Data Between Buffers{}&nbsp;for more info on how to pass data between the two buffer types.":"{}{} 注意{}{} 有关如何在两种缓冲区类型之间传递数据的详细信息，请参阅 {} 在缓冲区之间传输数据 {}。",
    "{}{}NOTE{}{}&nbsp;You can use the functions&nbsp;{}{}sprite_get_uvs{}{},&nbsp;{}{}font_get_uvs{}{}&nbsp;and&nbsp;{}{}tileset_get_uvs{}{}&nbsp;to get a specific asset\u0027s UV range on the texture page.":"{}{} 注意{}{} 您可以使用函数 {}{}sprite_get_uvs{}{}、{}{}font_get_uvs{}{} 和 {}{}tileset_get_uvs{}{} 获取特定资源的 UV 范围在纹理页面上。",
    "{}{}{}WARNING{}{}&nbsp;{}These functions do not work with the HTML5 module unless you have enabled WebGL in the {}Game Options{}.":"{}{}{} 警告{}{}{} 除非您在 {} 游戏选项 {} 中启用了 WebGL，否则这些函数无法与 HTML5 模块配合使用。"
}