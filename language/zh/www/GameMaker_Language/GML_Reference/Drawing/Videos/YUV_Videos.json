{
    "Create a shader asset in your project, and replace its Fragment Shader ({}.fsh{}) code with this:":"在项目中创建着色器资源，并将其碎片着色器({}. fsh{})代码替换为：",
    "Draw Video":"绘制视频",
    "Get Sampler":"获取采样器",
    "Gets the video surface ({}_surf{}) and the chroma surface ({}_chromasurf{})":"获取视频表面({}_surface{})和色度表面({}_chromasurf{})",
    "Here the main video surface is being drawn by the primitive, and the chroma surface is being blended on to it by the shader. That is the reason why the texture of the chroma surface was passed into the shader via a sampler.":"这里，主视频曲面由基本体绘制，色度曲面通过着色器与其混合。这就是为什么通过采样器将色度曲面的纹理传递到着色器的原因。",
    "If the video is using the YUV format, it uses the shader to draw the two surfaces (in positions {}[1]{} and {}[2]{}) onto a primitive quad.":"如果视频使用Yuv格式，则使用着色器将两个曲面(位置{}[ 1 ]{}和{}[ 2 ]{})绘制到基本体四边形上。",
    "In the Create event of your object, get the sampler ID of the {}v_chroma{} shader uniform, only if the video is YUV:":"在创建对象事件中，获取{}v_chroma{}着色器制服的采样器ID(仅当视频为Yuv时)：",
    "In the Draw event of your object, call {}{}video_draw(){}{}, and if its first array position is {}0{} (meaning the video is playing), draw the video.":"在对象的\"绘制\"事件中，调用{}{}video_draw(){}{}，如果其第一个数组位置为{}0{}(表示正在播放视频)，请绘制视频。",
    "In the code below, we\u0027re using a switch statement on the {}{}video_get_format(){}{} function. If the video is using the RGBA format, then it simply draws the surface in position {}[1]{} of the array.":"在下面的代码中，我们在{}{}video_get_format(){}{}函数上使用switch语句。如果视频使用的是Rgba格式，则它只是在阵列的{}[ 1 ]{}位置绘制曲面。",
    "Makes sure that they exist, using {}{}surface_exist(){}{} {} {}Sets the shader to {}shader_YUV{} (which is our newly created YUV shader){} {}Gets the textures of both surfaces{} {}Assigns the texture of the chroma surface to the sampler we retrieved in the Create event{} {}Disables texture filtering{} {}Begins drawing a triangle strip primitive, with the video surface\u0027s texture assigned to it{} {}Draws a rectangle to cover the video surface, uses the width and height of the chroma surface for that rectangle{} {}Ends the primitive{} {}Re-enables texture filtering and resets the shader{} {} ":"使用{}{}surface_exist(){}{}确保它们存在{}{}将着色器设置为{}shader_Yuv{}(这是我们新创建的Yuv着色器){}{}获取两个曲面的纹理{}{}将色度曲面的纹理指定给在\"Create\"事件中检索到的采样器{}{}禁用纹理过滤{}{}开始绘制三角形条纹基本体，并将视频曲面的纹理指定给它{}{}绘制一个矩形以覆盖视频表面，使用该矩形的色度表面的宽度和高度{}{}结束原语{}{}重新启用纹理过滤并重置着色器{}{}",
    "Platforms that use the YUV colour format for videos require extra steps for drawing those videos. This involves using a shader to draw two surfaces on a primitive quad.":"对于视频使用Yuv颜色格式的平台，需要额外的步骤来绘制这些视频。这涉及到使用着色器在基本体四边形上绘制两个曲面。",
    "Read the {}{}video_draw(){}{} reference page first for information on what data that function returns for YUV videos, and then continue reading below for instructions on using that data to draw the video.":"首先阅读{}{}video _draw(){}{}参考页，了解有关函数为Yuv视频返回的数据的信息，然后继续阅读下面的内容，了解有关使用该数据绘制视频的说明。",
    "Sets the shader to {}shader_YUV{} (which is our newly created YUV shader)":"将着色器设置为{}shader_Yuv{}(这是我们新创建的Yuv着色器)",
    "The code under {}case video_format_yuv:{} does the following:":"{}案例video_format_yuv:{}下的代码执行以下操作：",
    "YUV Shader":"Yuv着色器"
}