{
    "Although particles are an excellent tool for creating effects, they do come with certain restrictions and good practices which need to be followed unless you want your game to suffer from poor performance or even potentially crash:":"尽管粒子是创建效果的绝佳工具，但它们确实带有某些限制和良好做法，这些限制和做法需要遵循，除非您希望游戏受到低性能甚至潜在崩溃的影响：",
    "Even though there is no technical limit to the amount of systems, emitters and particles you can create in one game, you should try and limit everything to the minimum number possible to keep memory use as low as possible.":"即使在一个游戏中可以创建的系统、发射器和粒子的数量没有技术限制，也应该尽量将所有内容限制在可能的最小数量，以尽可能地降低内存使用。",
    "Even though these effects are limited in scope and customisation, they can still be used to create some simple, great effects with very little effort. For example by creating a small puff of grey smoke below a moving missile in each step, a pretty convincing smoke trail is created, so even when you are an expert in particles it pays to remember that these effects exists as they can still save you some time.":"即使这些效果在范围和自定义上都有限制，但它们仍然可以用来创造一些简单、伟大的效果，而且只需要很少的努力。例如，通过在每个步骤中在移动的导弹下方创建一小段灰色烟雾，可以创建一条非常令人信服的烟雾轨迹，因此即使您是粒子专家，也需要记住这些效果的存在，因为它们仍然可以为您节省一些时间。",
    "For complex things in {}GameMaker{} you would normally have an {}object{} and create {}instances{} of that object around the room. However, for graphics effects, this can be expensive as every instance comes with a \"cost\" in processing due to the variables it contains and the codes it has in the different events. You can reduce this cost by turning to {}tilemap layers{} and {}asset layers{} for drawing your graphics needs but those are generally static and cannot be changed or moved around much. However, there is one other option for drawing fast yet versatile graphics effects in your games, and that is to use {}particles{}.":"对于{}GameMaker{}中的复杂内容，通常会在房间周围有{}个对象{}并创建该对象的{}个实例{}。然而，对于图形效果，这可能是昂贵的，因为由于它包含的变量和它在不同事件中具有的代码，每个实例在处理时都伴随着\"成本\"。您可以通过转向{}平铺图层{}和{}资产层{}来降低此成本，以绘制您的图形需求，但这些图形需求通常是静态的，不能进行大量更改或移动。但是，在游戏中绘制快速而多功能的图形效果还有一个选项，那就是使用{}粒子{}。",
    "However, the true potential of particles is in designing and creating your own effects using the powerful functions that the GameMaker Language supplies to you. You can find out more from each of the following sections:":"但是，粒子的真正潜力在于使用GameMaker语言提供给您的强大功能来设计和创建自己的效果。您可以从以下每个部分了解更多信息：",
    "If you define your own particle sprite instead of using one of the 14 included sprites, you should try to keep them as small as possible to achieve the effect you require.":"如果定义自己的粒子精灵，而不是使用14个包含的精灵中的一个，则应该尽量使它们尽可能小，以达到所需的效果。",
    "On mobile devices, take care with particles as {}drawing{} them can be slow if they cover a large area of the screen (over-draw on mobile devices is one of the main causes of slowdown).":"在移动设备上，请注意{}绘制的粒子，如果它们覆盖了大面积的屏幕(在移动设备上透支是放慢速度的主要原因之一)，它们可能会变慢。",
    "Particle systems, particles and emitters take up memory and as such you should be very careful how you use them as it is very easy to cause a memory leak which will slow down and eventually crash your game. One way to cope with this is to have a {}global{} system with everything defined at the start of the game and removed at the end, but if you want a dynamic system then each particle and emitter (and the system itself) should be destroyed the moment it is not needed.":"粒子系统、粒子和发射器占用内存，因此您应该非常小心地使用它们，因为它们很容易导致内存泄漏，从而降低速度并最终导致游戏崩溃。应对这种情况的一种方法是使{}全局{}系统具有在游戏开始时定义并在结束时删除的所有内容，但如果需要动态系统，则每个粒子和发射器(以及系统本身)都应在不需要的时候被销毁。",
    "Particles do {}not{} interact with anything. Should you need them to have any type of interaction with the user or any other instances in your game, you should be looking at using instances instead as particles are purely graphic.":"粒子{}不会{}与任何东西相互作用。如果需要它们与用户或游戏中的任何其他实例进行任何类型的交互，则应将使用实例视为粒子纯粹是图形。",
    "Particles may be fast and light on the CPU, but they still require&nbsp;{}some{}&nbsp;processing and so you shouldn\u0027t have 40,000 of them bursting across the screen at a time. Limit them to those that are necessary to achieve a specific effect and no more.":"Cpu上的粒子可能快而轻，但它们仍然需要{}一些{}处理，因此不应该有40,000个粒子同时在屏幕上爆炸。将它们限制在达到特定效果所必需的范围内，而不是更多。",
    "The basic setup for a particle system follows three steps, with the third step being optional depending on how you wish to create your particle effects within the room:":"粒子系统的基本设置包括三个步骤，第三个步骤是可选的，具体取决于您希望如何在房间中创建粒子效果：",
    "The easiest way of creating particles in your game with {}GameMaker{} is to use the built-in effects mechanism. These effects are created using an internal particle system which is basically a very fast method for drawing graphical effects only and as such you do not have to worry about all the details (like memory management) when using these functions. You simply specify the type of effect, the position where it must be created, the size you want it to be and finally, its colour then let {}GameMaker{} do all the work.":"使用{}GameMaker{}在游戏中创建粒子的最简单方法是使用内置的效果机制。这些效果是使用内部粒子系统创建的，该系统基本上是一种非常快速的仅绘制图形效果的方法，因此在使用这些功能时，您不必担心所有细节(如内存管理)。您只需指定效果的类型、必须创建效果的位置、所需的大小以及最终的颜色，然后让{}GameMaker{}完成所有工作。",
    "The following functions exists for creating the built in particle effects:":"以下函数用于创建内置粒子效果：",
    "With HTML5 there is no additive blending, and unless you have WebGL enabled, you cannot have colour blending either.":"HTML5不支持添加混合，除非启用了WebGL，否则也不能进行颜色混合。",
    "{}Create a particle system{}: The particle system is like a container that we will use to hold our different particle types ready for use. We use code to define a series of visual aspects and behaviours for our particles, and then we place them in the \"container\" so that we can take them out and use them whenever and wherever we need later.":"{}创建粒子系统{}：粒子系统就像一个容器，我们将使用该容器来容纳不同的粒子类型，以备使用。我们使用代码为我们的粒子定义一系列视觉方面和行为，然后将它们放在\"容器\"中，这样我们就可以随时随地将它们拿出来使用。",
    "{}Create emitters{}: Emitters are an option that can be used to burst or stream particles from within very clearly defined limits. They are optional because you can create particles from any instance using the {}{}part_particles_create(){}{} and {}{}part_particles_create_colour(){}{} functions but they are not always adequate for every situation.":"{}创建发射器{}：发射器是一个选项，可用于从非常明确定义的限制内爆发或流化粒子。它们是可选的，因为您可以使用{}{}part_particles_create(){}{}和{}{}part_particles_create_colour(){}{}函数从任何实例创建粒子，但它们并不总是适用于每种情况。",
    "{}Create particle types{}: Particle types are the graphic effect itself. You can have many different types, each with their own range of colours, alphas, sizes and movements, but its important to note that you&nbsp;{}do not have control over individual particles{}. You define a series of parameters and the particle will be created to have a random spread of behaviours chosen from them.":"{}创建粒子类型{}：粒子类型是图形效果本身。您可以拥有许多不同的类型，每个类型都有自己的颜色范围、Alphase、大小和移动，但请注意，您{}无法控制单个粒子{}，这一点很重要。您定义了一系列参数，并且将创建粒子，以便从中选择随机扩散的行为。",
    "{}Particles {}are graphic resources that have certain properties which are defined within a {}particle system{}. These properties cannot be manipulated directly for individual particles, but are changed through the code that is used to define the individual particle and the system that it belongs to. They are very useful for creating beautiful and flashy effects (or subtle and discreet ones!) like explosions, decals, rain, snow, star fields and debris in a game without the CPU overhead that using instances has.":"{}粒子{}是具有在{}粒子系统{}中定义的某些特性的图形资源。这些特性不能直接针对单个粒子进行操作，而是通过用于定义单个粒子及其所属系统的代码进行更改。它们非常有用于在没有使用实例的Cpu开销的游戏中创建美丽和华丽的效果(或者微妙和谨慎的效果！)，如爆炸、贴花、雨、雪、星空和碎片。",
    "{}There is also a section that gives you a basic guide on how to design and create particles for your games on the following page:{}":"{}还有一个部分为您提供了有关如何在以下页面上为游戏设计和创建粒子的基本指南：{}"
}