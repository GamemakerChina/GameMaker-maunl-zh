{
    "Normally all surfaces have depth buffers so if you draw 3D objects to them then it\u0027ll sort them properly by depth, however allocating depth buffers essentially doubles the size of surfaces, which could be an excessive and unnecessary overhead especially if your game is very memory intensive or predominantly 2D. In these cases you can check this using this function and disable the depth buffer for surfaces if required using the function {}{}surface_depth_disable{}{}.":"通常，所有表面都有深度缓冲区，因此如果您向其中绘制 3D 对象，那么它会按深度对它们进行正确排序，但是分配深度缓冲区本质上会使表面的大小加倍，这可能是过多且不必要的开销，特别是如果您的游戏内存很大的话密集或主要是 2D。在这些情况下，您可以使用此函数进行检查，并根据需要使用函数 {}{}surface_depth_disable{}{} 禁用表面的深度缓冲区。",
    "The above code will check to see if the given surface exists, and if it does not, then it checks the current state of the surface depth buffer and if it is enabled, it will disable it instead, before finally creating the surface.":"上述代码将检查给定表面是否存在，如果不存在，则检查表面深度缓冲区的当前状态;如果启用了，则在最终创建表面之前，将禁用该代码。",
    "This function checks to see if the automatic depth buffer generation for surfaces is enabled.":"此函数检查是否启用了表面的自动深度缓冲区生成。",
    "This function checks to see if the automatic depth buffer generation for surfaces is enabled. Normally all surfaces have depth buffers so if you draw 3D objects to them then it\u0027ll sort them properly by depth, however allocating depth buffers essentially doubles the size of surfaces, which could be an excessive and unnecessary overhead especially if your game is very memory intensive or predominantly 2D. In these cases you can check this using this function and disable the depth buffer for surfaces if required using the function {}{}surface_depth_disable(){}{}.":"此函数检查是否启用了表面的自动深度缓冲区生成。通常，所有表面都有深度缓冲区，因此如果绘制3D对象，则会按深度对其进行适当排序，但是，分配深度缓冲区实际上会使表面大小加倍，这可能会导致过多且不必要的开销，尤其是在游戏内存非常密集或主要是2D的情况下。在这些情况下，可以使用此函数进行检查，如果需要，可以使用函数{}{}surface_depth_disable(){}{}禁用表面的深度缓冲区。"
}