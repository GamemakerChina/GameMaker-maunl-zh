{
    "The alpha with which to blend the surface.":"用于混合表面的Alpha。",
    "The colour with which to colour the surface.":"表面着色的颜色。",
    "The height at which to draw the surface.":"绘制表面的高度。",
    "The unique ID value of the surface to draw.":"要绘制的表面的唯一Id值。",
    "The width at which to draw the surface.":"绘制表面的宽度。",
    "The x position of where to draw the surface.":"绘制表面的x位置。",
    "The y position of where to draw the surface.":"绘制表面的y位置。",
    "This function does exactly the same as the {}{}draw_surface_stretched(){}{} function with the added ability to set the colour blending and alpha value for the surface when it is drawn (similar to the function {}{}draw_surface_ext(){}{}).":"此函数的作用与{}{}draw_surface_stretched(){}{}函数完全相同，添加了绘制时为表面设置颜色混合和Alpha值的函数(类似于函数{}{}draw_surface_ext(){}{})。",
    "This will draw the given surface with its left corner at the instances x/y position and it will be stretched to occupy an area of 200x200 pixels with no blending, but partial transparency.":"这将绘制给定的表面，其左角位于实例x/y位置，它将被拉伸以占据200x200像素的区域，没有混合，但部分透明。",
    "{}TIP{}&nbsp;How a surface appears depends on its contents, especially the alpha values inside the surface. A surface {}cleared{} with an alpha of 0 may appear different from a surface cleared with an alpha of 1, due to the way they blend with the background. Take care of this whenever you notice a difference in the way something renders on a custom surface as opposed to the {}{}application_surface{}{}.":"{}提示{}表面的显示方式取决于其内容，尤其是表面内部的Alpha值。Alpha为0的{}清除表面{}可能与Alpha为1的清除表面不同，因为它们与背景混合的方式不同。只要您注意到自定义表面上的渲染方式与{}{}application_surface{}{}的渲染方式有所不同，就要注意这一点。",
    "{}{}{}NOTE{}&nbsp;When working with surfaces there is the possibility that they can cease to exist at any time due to them being stored in texture memory. You should {}ALWAYS{} check that a surface exists using {}{}{}surface_exists(){}{}{} before referencing them directly.":"{}{}{}注意{}使用表面时，由于表面存储在纹理内存中，因此表面可能随时停止存在。在直接引用表面之前，应该{}始终{}使用{}{}{}surface_exists(){}{}{}检查表面是否存在。"
}