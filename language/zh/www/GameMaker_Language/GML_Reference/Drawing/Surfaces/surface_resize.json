{
    "The ID of the surface to change.":"要更改的表面的ID。",
    "The above code will check the view port size against that of the surface \"aplication_surface\" and if it is different, the surface is re-sized.":"以上代码将根据表面\"aplication_surface\"的视口大小检查视口大小，如果不同，则调整表面大小。",
    "The height of the new surface.":"新表面的高度。",
    "The width of the new surface.":"新表面的宽度。",
    "This function will resize a surface to the given dimensions (in pixels). The \"surface_id\" is that of a surface you have created previously, or the {}{}application_suface{}{}, and the function will resize that surface. Note that this will neither crop nor stretch the contents of the surface, but rather it destroys the current surface and recreates it with the same handle (surface_id) with the new dimensions, meaning that it will need to be cleared and drawn to again (unless it is the {}application_surface{} in which case {}GameMaker{} will do this automatically).":"此函数将把表面的大小调整为给定的尺寸(以像素为单位)。\"surface_id\"是您以前创建的表面的表面，或者是{}{}应用程序suface{}{}，函数将调整该表面的大小。请注意，这样既不会裁剪也不会拉伸表面的内容，而是会破坏当前表面，并使用与新尺寸标注相同的控制柄(surface_id)重新创建该表面，这意味着需要再次清除和绘制该表面(除非它是{}application_surface{}，在这种情况下{}GameMaker{}将自动执行此操作)。",
    "{}NOTE{}: If you are resizing the application surface, these changes will not be registered until the start of the next draw frame, meaning that calling the {}{}{}surface_get_width(){}{}{} or {}{}{}surface_get_height(){}{}{} functions in the same event or step will return the previous values.":"{}注意{}：如果要调整应用程序表面的大小，这些更改将在下一个绘制框架开始之前注册，这意味着在同一事件或步骤中调用{}{}{}surface_get_width(){}{}{}或{}{}{}surface_get_height(){}{}{}函数将返回以前的值。"
}