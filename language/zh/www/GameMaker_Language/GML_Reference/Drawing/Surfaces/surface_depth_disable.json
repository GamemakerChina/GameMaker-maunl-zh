{
    "If set to {}true{} the depth buffer will be disabled for created surfaces.":"如果设置为{}true{}，则将对创建的曲面禁用深度缓冲区。",
    "The above code stores the current depth buffer setting in a variable and then creates two surfaces, one with depth buffering enabled and one without, before restoring the original setting again.":"上述代码将当前深度缓冲区设置存储在变量中，然后创建两个曲面，一个启用了深度缓冲，另一个不启用，然后再次恢复原始设置。",
    "This function disables the automatic depth buffer generation for {}all{} surfaces that are created after it has been disabled. Normally all surfaces have depth buffers so if you draw 3D objects to them then it\u0027ll sort them properly by depth in\n    order to maintain functional parity between rendering to surfaces and rendering to the back buffer, however allocating depth buffers essentially doubles the amount of memory required for surfaces, which could be an excessive and unnecessary overhead\n    especially if your game is very memory intensive, and for 2D games they aren\u0027t generally required.":"此函数禁用在禁用后创建的{}所有{}曲面的自动深度缓冲区生成。通常情况下，所有曲面都有深度缓冲区，因此如果绘制3D对象到这些曲面，它将按深度对它们进行正确排序\n为了在渲染到曲面和渲染到后缓冲区之间保持功能奇偶校验，然而，分配深度缓冲区实际上使曲面所需的内存量加倍，这可能是过度的和不必要的开销\n尤其是如果您的游戏非常耗费内存，并且2D游戏通常不需要这些内容。",
    "To use this function you would call it {}before{} creating a surface, and then you can enable it again after (if required). All surfaces created when the depth buffer is disabled will no longer use a depth buffer when being drawn to, this results\n    in the things being drawn to the surface having parity of depth. The images below illustrate this in practice:":"若要使用此函数，请在{}创建曲面之前调用它{}，然后可以在创建曲面之后再次启用它(如果需要)。禁用深度缓冲区时创建的所有曲面在绘制到时将不再使用深度缓冲区，这将产生\n在具有同等深度的物体被吸引到表面上。下图说明了实践中的情况：",
    "{}In the above image, we are drawing a rectangle and a triangle using a vertex buffer in 3D. The\n    coordinates for the red triangle places it behind the green rectangle, but the code for drawing the triangle is called {}after{} the code for the rectangle, and when the depth buffer is enabled, the triangle is still drawn behind the rectangle\n    as the 3D depth is being respected. However when we disable the depth buffer for the surface, only the code order is respected and so the triangle is drawn over the rectangle.":"{}在上图中，我们使用3D中的顶点缓冲区绘制矩形和三角形。的\n红色三角形的坐标将其置于绿色矩形的后面，但绘制三角形的代码在{}矩形的代码之后被称为{}，并且当启用深度缓冲区时，三角形仍然绘制在矩形的后面\n因为3D深度受到尊重。但是，当我们禁用曲面的深度缓冲区时，只遵循代码顺序，因此在矩形上绘制三角形。",
    "{}NOTE{}: If your game is 100% 2D or you know that you don\u0027t need a surface depth buffer, then it should be fine to simply call this function once at the start of the game to disable the buffer.":"{}注意{}：如果您的游戏为100% 2D，或者您知道不需要曲面深度缓冲区，则在游戏开始时只需调用此函数一次即可禁用缓冲区。",
    "{}NOTE{}: To properly preserve depth in 3D when using surfaces, not only should you have the depth buffer enabled, but you should also have z-writing and z-testing enabled. See the functions {}{}{}gpu_set_ztestenable(){}{}{}    and {}{}{}gpu_set_zwriteenable(){}{}{} for more information.":"{}注意{}：要在使用曲面时正确保留3D深度，不仅应启用深度缓冲区，还应启用Z写入和Z测试。有关详细信息，请参阅函数{}{}{}gpu_set_ztestenable(){}{}{}和{}{}{}gpu_set_zwriteenable(){}{}{}。"
}