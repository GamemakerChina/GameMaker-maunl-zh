{
    "The above code (in a Draw Event) checks to see which camera view is currently being rendered and if it is camera view[0] then the settings for the camera referenced by the variable \"cutscene_cam\" are applied to it.":"上述代码(在绘制事件中)检查以查看当前正在渲染的相机视图，如果它是相机 view[0]，则变量 \"cutscene_cam\" 所引用的相机的设置将应用于它。",
    "The unique camera ID value returned when you created the camera.":"创建相机时返回的唯一相机 ID 值。",
    "This function will apply the given camera settings to the current camera view being rendered immediately. While you can set any view camera using the specific {}camera_set_*{} functions, the new settings will not be used for rendering until the {}next{} game frame, but with this function you can make those changes immediately. If you are using multiple views then the function should be used in the {}Draw Event{} and you can use the variable {}{}view_current{}{} to selectively apply the given camera only to the camera view currently being rendered. Note that this does NOT change the camera ID value, only the settings for that camera, and that if you use this function on the default camera (ie: the internal camera {}GameMaker{} uses when no view cameras are active) the changes will be overwritten the very next game frame by the internal settings for drawing the room.":"此函数将给定的相机设置应用于当前正在立即渲染的相机视图。虽然可以使用特定的 {}camera_set_*{} 函数设置任何视图的相机，但在{}下一个{}游戏帧之前，新设置不会用于渲染，但使用此函数可以立即进行这些更改。如果使用多个视图，则应在{}绘制事件{}中使用该函数，并且可以使用变量 {}{}view_current{}{} 有选择地将给定的相机仅应用于当前正在渲染的相机视图。请注意，这不会更改相机 ID 值，只会更改该相机的设置，并且如果在默认相机上使用此函数(即：{}GameMaker{} 在视图没有相机处于活动状态时使用内部相机)，则绘制房间的内部设置将覆盖下一个游戏帧的更改。"
}