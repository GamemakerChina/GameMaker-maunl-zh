{
    "Cameras And Viewports":"相机和视口",
    "Something to note about cameras and view ports is that the total area of the bounding box for {}all active view ports in the first room of the game{} is what defines the {}background canvas size{} (or window size for macOS, Ubuntu (Linux) and Windows), and any areas that are not covered by a view port will default to drawing using the window colour as illustrated by the image below:":"有关相机和视口的一些注意事项是，游戏第一个房间中{}所有活动视口的边框总面积{}是定义{}背景画布大小{}(或 MacOS、Ubuntu(Linux) 和 Windows 的窗口大小)的因素，视口未覆盖的任何区域将默认使用下图所示的窗口颜色绘制：",
    "The following functions can be used to create and destroy cameras:":"以下函数可用于创建和销毁相机：",
    "The following {}global scope{}&nbsp;built-in variables are available:":"以下{}全局范围{}内置变量可用：",
    "There also exist the following functions for dealing with view ports:":"还存在以下用于处理视口的函数：",
    "There are also a number of functions for setting and getting camera information:":"还有许多函数可用于设置和获取相机信息：",
    "When creating rooms in {}GameMaker{} you need to set up different {}view ports{} and/or {}cameras{} to control what is displayed to the player. The {}view ports{} are, basically, little windows into your game world that enable you to show the player parts of a room, either scaled or 1:1, and as such they are essential when your game room is larger than the display size. The {}cameras{} are what define exactly what will be shown in each view port.":"在 {}GameMaker{} 中创建房间时，您需要设置不同的{}视口{}和/或{}相机{}来控制显示给玩家的内容。基本上，{}视口{}是进入游戏世界的小窗口，可以让你显示房间的玩家部分，缩放或1:1，因此，当你的游戏房间比显示大小更大时，它们是必不可少的。{}相机{}确切地定义了在每个视图端口中显示的内容。",
    "When working with cameras, you have to assign them to a {}view port{} for them to be \"active\" and display anything. These view ports are numbered from 0 to 7 and can be changed and positioned using different variable arrays and functions, and you can also check to see which one is currently drawing or which camera is currently attached to it.":"使用摄像头时，必须将它们分配到{}视口{}，以使它们\"活动\"并显示任何内容。这些视口的编号为0到7，可以使用不同的可变数组和函数进行更改和定位，还可以检查当前正在绘制的视口或当前附着到该视口的相机。",
    "You can find an overview of all the available functions from the different sections below, but it\u0027s worth noting that some of these functions require the setting up and use of different matrices, so you may want to look at the section of the manual for the {}Matrix Functions{}. Also note that there are a few room functions that can be used to get and set cameras and view port values in rooms other than the current one (see{}&nbsp;the section on{} {}Rooms{}).":"您可以从下面的不同章节中找到所有可用函数的概述，但值得注意的是，其中一些函数需要设置和使用不同的矩阵，因此您可能需要查看{}矩阵函数{}手册的章节。另请注意，有一些房间函数可用于获取和设置相机以及查看当前房间之外的房间中的视口值(请参见{}房间{}章节)。",
    "You should take care when using multiple cameras as the draw event for all instances is called once for each visible view, so if you have three camera views active in one room, the draw event will be run three times every step (basically doing three times the work) which can be a cause for slowdown if the game is large or complex. The {}view_current{} variable can be used to help limit these draw calls however by checking which view is being drawn and only drawing items that are specific to a given view port. Also be careful when creating your own cameras, as if you create one in a room and don\u0027t remove it using the {}{}camera_destroy(){}{} you can get a memory leak.":"使用多个相机时应注意，因为所有实例的绘制事件对于每个可见视图都调用一次，所以如果在一个房间中有三个活动的相机视图，则绘制事件将每个步骤运行三次(基本上是执行三次工作)，如果游戏规模大或复杂，这可能会导致速度放慢。{}view_current{} 变量可用于帮助限制这些绘制调用，但是，可以通过检查正在绘制的视图以及仅检查特定于给定视口的绘制项目来限制这些绘制调用。在创建自己的相机时也要小心，就好像您在房间中创建了一个相机，但不要使用 {}{}camera_destroy(){}{} 删除它一样，这样可能会导致内存泄漏。",
    "{}GameMaker{} permits you 8 independent view ports (numbered from 0 - 7) and an unlimited number of cameras, of which only 8 can be {}active{} at any one time - one assigned to each of the available ports - although normally you\u0027ll only need one or two view ports. Cameras can show different parts of the same room and can be activated and deactivated as well as assigned to view ports at any time, meaning that you can use cameras to draw HUD elements or to have split screen effects, or to create cut-scenes for example. Essentially, you position a camera within a room and define the \"view\" (area) of the room that will be visible to it, and then this view is drawn to a view {}port{} - note that the view port can be a different size to the camera view and as such you can distort and scale the camera view if it is a size other than 1:1 with the view port.":"{}GameMaker{} 允许您使用8个独立的视口(编号为0-7)和无限数量的相机，其中任何时候只能有8个处于{}活动状态{}(每个可用端口分配一个)，尽管通常您只需要一个或两个视口。相机可以显示同一房间的不同部分，并且可以随时激活和取消激活以及指定给视口，这意味着您可以使用相机绘制 HUD 元素或具有分割屏幕效果，或者创建剪切场景。实际上，您可以将相机放置在房间内并定义房间可见的\"视图\"(区域)，然后将此视图绘制到视图{}端口{}-请注意，视图端口的大小可能与相机视图的大小不同，因此，如果相机视图的大小与视口的大小不是1:1，则可以扭曲并缩放相机视图。",
    "{}IMPORTANT!{} It\u0027s easy to get confused when talking about cameras, views and view ports, so to clarify:":"{}重要！{} 在谈论相机、视图和视口时，很容易出现混淆，因此需要澄清：",
    "{}If you are adding cameras through the {}Room Editor{} then you can retrieve their {}camera ID{} value using the {}view_camera{} variable. You can then manipulate the view using the functions below and you can even destroy the default cameras if required, although you will need to assign a new camera to the view otherwise you will get some very unpredictable behaviour. Cameras added to a view port in the Room Editor are {}global{} in scope, meaning that they are created once when you start the game, and then as you enter each room they are set to the values set in the room editor, so if you destroy a default camera in {}any{} room, it will cease to exist for {}all rooms{}.":"{}如果通过{}房间编辑器{}添加相机，则可以使用{}view_camera{}变量检索其{}相机 ID {}值。然后，您可以使用下面的函数操纵视图，甚至可以在需要时销毁默认相机，尽管您需要为视图指定一个新相机，否则会出现一些非常不可预测的行为。添加到\"房间编辑器\"中视口的相机在范围内为{}全局{}，这意味着它们在您开始游戏时创建一次，然后当您进入每个房间时，它们被设置为在房间编辑器中设置的值，因此，如果您在{}任何{}房间中销毁默认相机，它将不再存在于{}所有房间{}中。",
    "{}NOTE{}: By default you need to select \"Clear Display Buffer\" in the room editor for the colour to be shown, and you can only set the colour using the function {}window_set_colour(){}. If you don\u0027t use this function it will default to black.":"{}注意{}：默认情况下，您需要在房间编辑器中选择\"清除显示缓冲区\"以显示颜色，并且只能使用函数 {}window_set_colour(){} 设置颜色。如果不使用此函数，则默认为黑色。",
    "{}The Camera{}: A point within the room that will be used to set how the room is displayed - typically with position, orientation, field of view and aspect ratio":"{}相机{}：房间内用于设置房间显示方式的点-通常使用位置、方向、视野和纵横比",
    "{}The View Port{}: The area of the screen where the camera view will be displayed":"{}视口{}：将显示相机视图的屏幕区域",
    "{}The View{}: What the camera sees, based on the position, projection and rotation of the camera":"{}视图{}：相机看到的内容，基于相机的位置、投影和旋转"
}