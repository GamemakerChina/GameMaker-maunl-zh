{
    "Adaptive Icons":"自适应图标",
    "After setting that up you can select the different Orientations that your game can be run on for the best user experience. The available options are:":"设置之后，您可以选择不同的方向，您的游戏可以运行在最佳的用户体验。现有的选择包括:",
    "Android Game Options":"Android 游戏选项",
    "Build for Arm64 (Checked by default)":"为 Arm64 构建(默认检查)",
    "Build for Armv7":"为 Armv7 编译",
    "Build for x86_64":"为 x86_64 构建",
    "Finally you have the following miscellaneous options:":"最后，你有以下各种选择:",
    "General":"常规",
    "Landscape":"横向",
    "Landscape-flipped":"横向翻转",
    "Portrait":"竖向",
    "Portrait-flipped":"竖向翻转",
    "The Build Tools (and Support Library if required) are used when {}GameMaker{} builds your game for the Android&nbsp;target and should be set to appropriate values based on the tools you have installed using Android Studio.":"当{} GameMaker {}为 Android 目标构建游戏时，使用构建工具(如果需要，还有支持库) ，并且应该根据您使用 Android Studio 安装的工具将其设置为适当的值。",
    "The second part of the {}General{} section covers the CPU Architectures to build for, with the following options available (you can select all of them or only those that you require, but note that each one will add to the final size of the compiled apk):":"{}常规{}部分的第二部分介绍了要构建的 CPU 体系结构，有以下选项可供选择(您可以选择所有 CPU 体系结构，或者只选择您需要的 CPU 体系结构，但是请注意，每个 CPU 体系结构都会添加到编译后的 apk 的最终大小) :",
    "The {}Compile SDK{} version is the version of the API that the project is compiled against. This means you can use Android API features included in that version of the API. If you try and use API 16 features - for example - but set Compile SDK 15, then you will get a compilation error. However, if you set the Compile SDK to 28 then you can still run the app on an API 26 device (as well as all other previous versions too).":"{}CompileSDK {}版本是项目所编译的 API 的版本。这意味着您可以使用该版本 API 中包含的 Android API 特性。如果您尝试使用 API 16特性-例如-但是设置 Compile SDK15，那么您将得到一个编译错误。但是，如果您将 Compile SDK 设置为28，那么您仍然可以在 API 26设备上运行该应用程序(以及所有其他以前的版本)。",
    "The {}Minimum SDK{} version is the minimum API level that will run your project. From November 2019 Google has made API level 16 the absolute minimum required, but if you add extensions then they may require a higher minimum API level.":"{}Minimum SDK {}版本是将运行项目的最小 API 级别。从2019年11月开始，谷歌已经将 API 级别定为16级，但是如果你添加了扩展，那么他们可能需要更高的最低 API 级别。",
    "The {}Target SDK{} indicates that you have tested your app on (up to and including) the version you specify here. This is simply to give the Android OS an idea of how it should handle your app in terms of OS features. For all practical purposes, most apps are going to want to set Target SDK to the latest released version of the API (as used by the Compile SDK setting). This will ensure your app looks as good as possible on the most recent Android devices. Note that from November 2019 Google has made API level 28 the required target.":"{}Target SDK{} 表示您已经在(直到并包括)您在这里指定的版本上测试了您的应用程序。这只是为了让 Android 操作系统知道它应该如何根据操作系统的特性来处理你的应用程序。出于各种实际目的，大多数应用程序都希望将 Target SDK 设置为 API 的最新发布版本(如 Compile SDK 设置所使用的那样)。这将确保您的应用程序在最新的 Android 设备上看起来尽可能好。请注意，从2019年11月开始，谷歌已经将 API 级别28作为必要的目标。",
    "This section outlines the different options available to you that control how your Android game projects will be compiled. The different sections are:":"本节概述了可用于控制如何编译 Android 游戏项目的不同选项。不同的章节是:",
    "You can also set the Android&nbsp;{}Sleep Margin{} here. This option is related to reducing stuttering when running your game on specific systems. Basically, if your game is running faster than your room speed {}GameMaker{} will \"sleep\" for the remaining time, but this sleep can be quite inaccurate and you can often end of sleeping for longer than necessary, causing your frame to take longer which causes stuttering. To get around this we can sleep for less time, then sit in a tight loop for the remainder of the time to make it more accurate - although the problem with sitting in a loop is that it causes CPU usage to increase, which in turn can cause your CPU temperatures to rise and your device to use more battery. By default, this value is set to 4, and in 99.99% of the cases you\u0027ll be fine with this, but for low end devices or for devices with a lot of background processes running this may not be an ideal solution and a value of 5 up to 10 may be required. Note though that this is very much a device specific configuration and what works on your build device may not be appropriate for another user, and as such if in doubt leave it set to 4.":"您也可以在这里设置 Android {}睡眠边缘{}。这个选项与在特定系统上运行游戏时减少卡顿有关。基本上，如果你的游戏运行速度比你的房间速度快，{}GameMaker{}将“睡眠”剩余的时间，但这种睡眠可能是相当不准确的，你可以经常结束睡眠超过必要的时间，造成你的框架需要更长的时间，导致卡顿。为了解决这个问题，我们可以缩短睡眠时间，然后在剩下的时间里保持一个紧密的循环，以使它更加精确——尽管坐在循环中的问题是，它会导致 CPU 使用量增加，这反过来又会导致你的 CPU 温度上升，你的设备使用更多的电池。默认情况下，这个值被设置为4，在99.99% 的情况下你可以接受这个值，但是对于低端设备或者运行大量后台进程的设备来说，这可能不是一个理想的解决方案，可能需要设置5到10的值。但是请注意，这是一个非常特定于设备的配置，在构建设备上运行的配置可能不适合其他用户，因此，如果有疑问，请将其设置为4。",
    "You can select from one of the predefined target settings by clicking on the {}Pre-populate SDK{} values to chosen API level button, which will open a list of different APIs to choose from. Selecting any one of them will populate all the SDK files with appropriate values which you can then use or edit as required.":"您可以从一个预定义的目标设置中进行选择，方法是单击{}预填充 SDK {}值到选定的 API 级别按钮，该按钮将打开一个可供选择的不同 API 列表。选择其中任何一个都将使用适当的值填充所有 SDK 文件，然后您可以根据需要使用或编辑这些值。",
    "You can supply each forground and background image individually, or you can choose to Generate Icons From File. This means that {}GameMaker{} will generate the required icon images from a base (XXXHDPI) file. You need to supply one image each for the foreground and background and then click the button labeled Generate, and the Icons will be created for you. Images should all be in {}*.png{} format.":"您可以分别提供每个前景和背景图像，也可以选择从文件生成图标。这意味着{} GameMaker {}将从基本(XXXHDPI)文件生成所需的图标图像。您需要为前景和背景各提供一个图像，然后单击标记为 Generate 的按钮，图标将为您创建。图像应该都在{} * 中。Png {}格式。",
    "You then need to set the {}Build Tools{} as well as the {}Target{}, {}Minimum {}and {}Compile SDK{} versions.":"然后需要设置{}生成工具{}以及{}Target{}、{}Minimum{}和{}Compile SDK {}版本。",
    "{}Android 8.0 (API level 26) introduced {}adaptive launcher icons{} for your games, and these icons can display a variety of shapes across different device models. To deal with this, you are required to supply a number of foreground and background images for your icons to be displayed at different sizes. These icon sizes are:":"{} Android 8.0(API 级别26)为您的游戏引入了{}自适应启动器图标{}，这些图标可以在不同的设备模型中显示各种形状。为了解决这个问题，您需要提供一些前景和背景图像，您的图标显示在不同的大小。这些图标大小如下:",
    "{}Enable Bluetooth/iCade support{}: This will add support for bluetooth or iCade gamepads to your game project. This is on by default.":"{}启用蓝牙/iCade 支持{} : 这将为您的游戏项目添加对蓝牙或 iCade 游戏平台的支持。这是默认开启的。",
    "{}Install Location{}: Here you can set the default Install Location for your game. This can either be set to {}Automatic{}, in which case the game will be installed to the location chosen by the user on their device, or it can be set to {}Prefer External{} which will always try to install the game to the external storage of the device.":"{}安装位置{} : 您可以在这里设置游戏的默认安装位置。这可以设置为{}自动{} ，在这种情况下，游戏将被安装到用户在他们的设备上选择的位置，或者可以设置为{}首选外部{} ，它将总是尝试安装游戏到设备的外部存储。",
    "{}NOTE{}: There is also an option for the \"{}Support Library{}\" version to use. From {}GameMaker{} v2.2.4 and above, this is no longer required and any values used here will be ignored. The setting is maintained for use with legacy projects that require an earlier runtime than 2.2.4.":"{}注意{} : 还有一个供“{}支持库{}”版本使用的选项。从{} GameMaker {} v2.2.4及以上版本开始，就不再需要这个值了，这里使用的任何值都将被忽略。该设置用于需要比2.2.4更早的运行时的遗留项目。",
    "{}Run Lint Code Analysis{}: When this option is flagged, the build tools will run a lint code analysis on the project as it builds, giving a more in-depth error check and showing more information in the output window as the project compiles (a LOG file will be created too, with the path to the file shown at the end of compiling in the {}Output Window{}). Note that not everything flagged by lint analysis as an error is necessarily problematic for your game, and having this enabled may mean that your game no longer compiles, even though when it is off, it will compile and run fine. Essentially this is only for debugging, and the option is off by default.":"{}运行 Lint 代码分析{} : 当这个选项被标记时，构建工具将在项目构建时运行一个 Lint 代码分析，进行更深入的错误检查，并在项目编译时在输出窗口中显示更多信息(也将创建一个 LOG 文件，在{} Output Window {}中编译结束时显示文件的路径)。请注意，并不是所有被 lint 分析标记为错误的东西对于您的游戏都必然是有问题的，启用这个功能可能意味着您的游戏不再编译，即使当它关闭时，它也会编译并运行良好。本质上，这仅用于调试，默认情况下该选项是关闭的。",
    "{}The first part of the {}General {}section is dedicated to the {}Product Information{} and the {}Build Settings{}. You should fill in the Product information, which includes the projects {}Display Name{}, its Package information, which consists of a {}Domain{}, {}Company {}and {}Product{}. The package information can only be made up of letters from A-Z and numbers 0-9, with no symbols or other special characters at all, nor should it have uppercase characters. These details will then be used to generate a Package ID with the format \"{}com.company.myappname{}\".":"{}{}常规{}部分的第一部分专用于{}产品信息{}和{}生成设置{}。您应该填写 产品信息(包括项目{}显示名称{})及其包信息(包括{}域名{}、{}公司{}和{}产品名{})。包信息只能由 A-Z 字母和数字0-9组成，不能有任何符号或其他特殊字符，也不能有大写字母。然后，这些详细信息将用于生成格式为“{}com.company.myappname{}”的 Package ID。",
    "{}{}NOTE{}{}&nbsp;You must have installed the appropriate APIs in the Android SDK Manager or through Android Studio for your projects to compile correctly.":"{}{}注意{}{}要正确编译项目，您必须已经在 Android SDK 管理器中或通过 Android Studio 安装了适当的 API。"
}