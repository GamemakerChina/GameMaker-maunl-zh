{
    "At some point when creating a game of any complexity you will probably have to deal with {}vectors{}. They are used in physics, in AI, in trigonometry and many other situations, but what is a vector? Well, to put it simply, a vector is a {}directed quantity{}. Let\u0027s start by looking at a 1 dimensional vector -&nbsp;which is just the same as a single number -&nbsp;by drawing a numbered line with an arrow starting at zero and ending at 5. This is the vector \"a\" which is equal to 5 and if we draw another arrow starting at the 5 and ending at the 8 we have vector \"b\" which is equal to 3:":"在创建任何复杂游戏时，您可能需要处理{}个向量{}。它们用于物理、Ai、三角测量和许多其他情况，但什么是向量？简单地说，向量是{}定向量{}。让我们首先看一个一维向量(与单个数字相同)，然后用箭头画一条从零开始到5结束的带编号的直线。这是等于5的向量\"a\"，如果我们绘制另一个从5开始到8结束的箭头，则我们具有等于3的向量\"b\"：",
    "Great! We have now normalised the components of the vector! But of what practical use is that in the context of {}GameMaker{}? Okay, let\u0027s give you a practical example...":"太好了。我们现在已经规范化了向量的组件！但是在{}GameMaker{}的背景下，这有什么实际用途呢？好吧，让我们给你一个实际的例子…",
    "Let\u0027s do the same for vector b now:":"现在让我们对向量b做同样的事情：",
    "Notice something? Those two vectors are the same! This is yet another demonstration that a vector has no position, only direction and length, and we can draw those vectors relative to each other around a local [0,0] axis:":"注意到什么了吗？那两个向量是一样的！这是另一个证明，向量没有位置，只有方向和长度，我们可以围绕局部[0,0]轴绘制这些向量相对于彼此的位置：",
    "Now, that gives us the exact length of the vector \"a\", so let\u0027s use that to normalise the two vector components {}vx{} and {}vy{}:":"现在，这给了我们向量\"a\"的确切长度，所以让我们用它来标准化两个向量分量{}vx{}和{}vy{}：",
    "Ordinarily, vectors can be used in many situations but sometimes you want to constrain their value (like when dealing with angles) which is why we {}normalise {}them. This is essentially a mathematical trick that is used to convert a vector of length {}n{} to a vector of length 1, meaning that the vector components get {}normalised {}to be between 0 and 1. These vectors are also called {}unit vectors{}:":"通常，向量可以在许多情况下使用，但有时您想限制它们的值(例如在处理角度时)，这就是我们将{}规范化{}的原因。这本质上是一个数学技巧，用于将长度{}n{}的向量转换为长度1的向量，这意味着向量分量将{}归一化{}介于0和1之间。这些向量也称为{}单位向量{}：",
    "Say you have a game where the player has to shoot at an enemy and you need to know how much the bullet object has to move along the x and y axis each step to hit it:":"假设你有一个游戏，玩家必须向敌人射击，你需要知道子弹物体每一步必须沿着x轴和y轴移动多少才能击中它：",
    "So, to hit the target we need to add 3 to the bullets x coordinate and 4 to its y coordinate every step.":"所以，为了击中目标，我们需要每一步在子弹x坐标上加上3，在它的y坐标上加上4。",
    "So, what about 2 dimensional vectors? Well, we can think of them as consisting not just of \"left\" and \"right, but \"up\" and \"down\" too:":"那么，二维向量呢?好吧，我们可以认为它们不仅包括\"左\"和\"右\"，而且还包括\"上\"和\"下\"：",
    "Vectors":"向量",
    "We then use these values to calculate the length of the vector:":"然后我们使用这些值来计算向量的长度：",
    "{}A good example of a vector used in {}GameMaker{} is the physics&nbsp;{}gravity{}&nbsp;property in the room editor. The gravity is calculated as a vector around a [0,0] position. So, if you define gravity as [x0, y10], the gravity would be&nbsp;{}down{}&nbsp;with a force of 10.":"{}GameMaker{}中使用的向量的一个很好的例子是房间编辑器中的物理{}重力{}属性。重力被计算为围绕[0,0]位置的向量。所以，如果你将重力定义为[x0， y10]，重力将是{}向下{}，力为10。",
    "{}First we take the coordinates of the vector and get the components:":"{}首先我们获取向量的坐标并获取分量：",
    "{}For this you would use the player and enemy coordinates to get the vector components and the length, then you would normalise them to get a value between 0 and 1 which you would finally multiply by the speed you wish the bullet to travel at each step. These final two values you would then store and add onto the starting x and y coordinates each step. Sound complicated? It\u0027s not, look (values have been rounded to one decimal place for simplicity):":"{}为此，您将使用玩家和敌人的坐标来获取矢量分量和长度，然后将它们归一化以获得0到1之间的值，最终将其乘以您希望子弹在每一步行进的速度。然后，您将存储最后两个值并将其添加到每个步骤的起始x和y坐标上。听起来很复杂吗？不是，看(为简单起见，值已四舍五入到小数点后一位)：",
    "{}Now, those are not actually vectors yet as we still have to reduce them down using their start and end coordinates. Looking at vector \"a\"&nbsp;we can see it has a start coordinate of [2,2] and an end coordinate of [4,3] and so to get the vector from this we need to reduce it down by subtracting the end coordinates from the start coordinates like this:":"{}现在，这些还不是真正的向量，因为我们仍然需要使用它们的开始和结束坐标来减少它们。查看向量\"a\"，我们可以看到它的开始坐标为[2,2]，结束坐标为[4,3]，因此要从中获得向量，我们需要通过从开始坐标中减去结束坐标来减少它，如下所示：",
    "{}This means that a 2D vector is defined by two values, an \"x\" and a \"y\" position relative to the local [0,0] axis. And what about 3D vectors? Well, they have the added dimension of \"depth\" to contend with and would be calculated as positions \"x\", \"y\" and \"z\" around a local axis something like this:":"{}这意味着2D向量由两个值定义，一个\"x\"和一个\"y\"相对于局部[0,0]轴的位置。那么三维矢量呢？嗯，它们有一个额外的维度\"深度\"来应对，并且可以计算为围绕局部轴的位置\"x\"、\"y\"和\"z\"，如下所示：",
    "{}To calculate a normalised vector, we must first have the original vector components, then use them to get the length of the vector. We then divide each of the vector components by this length to get the normalised vector components&nbsp;which form the normalised vector in which the {}sum of the squares of all coordinates is equal to 1{}. Here\u0027s how:":"{}要计算归一化向量，我们必须首先拥有原始向量分量，然后使用它们来获取向量的长度。然后，我们将每个向量分量除以此长度，以获得形成归一化向量的归一化向量分量，其中所有坐标的平方和{}等于1{}。这是如何：",
    "{}You should realise that it doesn\u0027t matter where a vector starts, all that matters is how long it is and what direction it goes in. So vector \"b\" starts at 5, is 3 units long and points to the \"right\", making it identical to a vector starting at 0 and going to 3. Now, you can also add these vectors together, by putting the two vectors \"a\" and \"b\" end to end to get the vector \"c\" which is equal to 8. What about negative numbers? Well, if, in the above image, a vector that points to the \"right\" corresponds to a positive number, you can see that a vector pointing to the \"left\" would correspond to a negative number, making a one-dimensional vector nothing more than a signed (+/-) number. This explains the essential concept of a vector: only {}length{} and {}direction{} (\"left\" or \"right\" in this case) count, not position.":"{}你应该意识到，向量从哪里开始并不重要，重要的是它有多长以及它朝哪个方向发展。所以矢量\"b\"从5开始，长3个单位，指向\"右\"，使它与从0开始到3的矢量相同。现在，您还可以将这两个向量\"a\"和\"b\"首尾对齐，以获得等于8的向量\"c\"，从而将这些向量加到一起。负数呢？好吧，如果在上面的图像中，指向\"右\"的向量对应于正数，你可以看到指向\"左\"的向量将对应于负数，使得一维向量只不过是一个带符号(+/-)的数。这解释了向量的基本概念：只有{}长度{}和{}方向{}(在本例中为\"左\"或\"右\")计数，而不是位置。"
}