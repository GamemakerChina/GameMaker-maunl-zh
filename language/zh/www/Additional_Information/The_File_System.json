{
    "It is worth noting that the HTML5 target module has a limit on local storage (which can be between 1MB and 5MB depending on the browser) meaning that you will not be permitted to save large sprites, screenshots etc...":"值得注意的是，HTML5目标模块对本地存储有限制(根据浏览器的不同，本地存储可能在1MB到5MB之间)，这意味着你不允许保存大型精灵、截图等。",
    "On HTML5 it is also possible to load files from outside the sandbox from a server, however this should only be done using the function {}{}buffer_load_async(){}{}&nbsp;as loading synchronously has been deprecated on most browsers and will eventually be obsoleted. This means that files being loaded in this way should be saved as binary files - for example, you can save an {}*.ini{} as a string (see {}{}ini_close(){}{}&nbsp;for details) and then write that into a buffer which can then be saved and loaded using the async functions. Note that if you are loading images using {}{}sprite_add(){}{}&nbsp;then these are already dealt with asynchronously.":"在HTML5上，也可以从沙盒外部从服务器加载文件，但这只能使用函数{}{}buffer_load_async(){}{} 因为同步加载在大多数浏览器上已经被弃用，最终将被淘汰。这意味着以这种方式加载的文件应该被保存为二进制文件 --例如，您可以将{}*.ini{}保存为字符串(参见{}{}ini_close(){}{} 了解详细信息)，然后将其写入缓冲区，然后可以使用异步函数保存和加载该缓冲区。注意，如果您正在使用{}{}sprite_add(){}{} 加载图像，那么这些图像已经被异步处理了。",
    "On the {}Windows{}, {}macOS {}and {}Ubuntu{} (Linux) platforms there are two ways to save and load files from outside of the sandbox and that is either using the functions {}{}get_open_filename(){}{}&nbsp;and {}{}get_save_filename(){}{}&nbsp;(both of these functions will require that the user select an area for loading and saving and the return string can then be used in the rest of the file functions to bypass the sandbox - see the function descriptions in the language section of the manual for more details). The other way is to disable the sandbox altogether from the {}Game Options{} for the target platform (only available for Desktop targets, as discussed further up this page).":"在{}Windows{}上，{} macOS Ubuntu{}和{}{}(Linux)平台有两种方法可以保存和加载文件以外的沙箱,要么是使用{}{}get_open_filename功能(){}{},{}和{}get_save_filename(){}{},(这两个函数将要求用户选择一个区域加载和保存并返回字符串可以使用在其他文件中函数来绕过沙箱——看到的语言部分的功能描述手册获得更多信息)。另一种方法是在目标平台的{}Game Options{}中完全禁用沙盒(仅适用于Desktop目标，如本页面后面所述)。",
    "The File System":"文件系统",
    "The first and most important thing to note about the file functions is that they are limited - in general and by default - to the {}sandbox{}. What this means is that {}GameMaker{} {}cannot save or load files from anywhere that is not part of the game bundle or the local storage for the device{} without {}explicit {}input from the user, and even then this input is limited to only Windows, macOS and Ubuntu (Linux) target platforms.":"关于文件函数，首先要注意的也是最重要的一点是，它们在一般情况下和默认情况下仅限于{} 沙盒 {}。 这意味着 {}GameMaker{} 在没有用户{}显式{}输入的情况下，{}无法从不属于游戏包或设备本地存储的任何地方保存或加载文件{}，即便如此 此输入仅限于 Windows、macOS 和 Ubuntu (Linux) 目标平台。",
    "The following diagram may help you to visualise this better:":"下面的图表可以帮助你更好地理解这一点:",
    "To start with, you should understand what is meant when we talk of the {}{}working_directory{}{}. This is a synonym for the two possible save locations (as illustrated by the diagram above) and when you use that directory it will do one of two things depending on whether you are reading or writing, and whether the file you are reading from has been changed or not:":"首先，您应该了解我们所说的 {}{}working_directory{}{} 是什么意思。 这是两个可能的保存位置的同义词（如上图所示），当您使用该目录时，它会执行以下两项操作之一，具体取决于您是在读取还是写入，以及您正在读取的文件是否已被保存。 改变与否：",
    "To understand the sandbox first of all you need to understand that there are two distinct areas for files:":"要理解沙盒，首先需要了解文件有两个不同的区域:",
    "Using these two simple rules we can now see how the following functions work (these are examples to help you to visualise the process for the different functions available):":"使用这两个简单的规则，我们现在可以看到以下函数是如何工作的（这些示例可帮助您可视化不同可用函数的过程）：",
    "When using the {}file system functions{} or {}included files{} with {}GameMaker{} it is vitally important to know exactly how the file system works and what things are going on behind the scenes. To that end, this section is designed to explain and clarify exactly {}how{} things are stored, {}where{} they are stored and what possible limits or workarounds there may be to this system.":"当{}文件系统函数{}或{}包含文件{}与{}GameMaker{}一起使用时，非常重要的是要确切地知道文件系统是如何工作的以及幕后发生了什么。为此，本节旨在解释和明确{}如何存储{}内容，{}在哪里存储{}内容，以及该系统可能存在哪些限制或解决方案。",
    "When your game is sandboxed, the two target areas - the bundle directory and the local storage area - are available on each target platform, but on each one they will work slightly differently. However {}GameMaker{} has abstracted out the main essence of what can and can\u0027t be done, making it easier to re-target games to multiple environments.":"当您的游戏被沙盒化时，两个目标区域 --捆绑目录和本地存储区域 --在每个目标平台上都可用，但它们在每个平台上的工作方式略有不同。 然而，{}GameMaker{} 已经抽象出可以做什么和不能做什么的主要本质，从而更容易将游戏重新定位到多种环境。",
    "You should also know that each target platform has its own save area where files and directories can be written to and read from. Below is a list of those areas for each target when sandboxed:":"您还应该知道，每个目标平台都有自己的保存区，可以在其中写入和读取文件和目录。以下是沙盒时每个目标的区域列表:",
    "the functions for writing text, binary or {}INI{} files will create a new file in the save area if one does not already exist, copying over any information from the original files included with the game bundle should they exist. Note that the original files will still remain in the read-only part of the save directory, but they won\u0027t be referenced as long as a version exists in the read/write section of the save area.":"用于写入文本、二进制或 {}INI{} 文件的函数将在保存区域中创建一个新文件（如果尚不存在），并复制游戏捆绑包中包含的原始文件（如果存在）中的任何信息。 请注意，原始文件仍将保留在保存目录的只读部分，但只要保存区域存在可读写的版本，它们就不会被引用。",
    "the {}file system functions{}&nbsp;will return information on files from {}both {}the {}bundle {}and the {}save {}area, but will only {}write {}to the {}save {}area.":"{}文件系统函数{}将从{}{}捆绑包和{}{}{}保存{}区域返回文件信息，但只会{}写入{}到{}保存{}区域。",
    "{}Android{}:&nbsp;Files are in the standard location (which is invisible unless the device is rooted) {}/data/&lt;package name&gt;{}.":"{}Android{}: 文件位于标准位置{} /data/<包名>{} (除非设备处于root，否则不可见)。",
    "{}HTML5{}:&nbsp;Everything is done through the local storage.":"{}HTML5{}: 一切都是通过本地存储完成的。",
    "{}IMPORTANT!{} It is possible to turn off the sandboxing, however, on the Desktop targets (Windows, macOS, and Ubuntu (Linux)) by checking the {}Disable file system sandbox{} option in the {}Game Options{} for the target platform. You do this at your own risk, and while this will open up file saving and loading and permit you to access files anywhere on the given system, it may still be limited by the OS permissions, and you will not be able to write to the {}{}{}program_directory{}{}{}&nbsp;folder.":"{}重要!{}在桌面目标(Windows, macOS，和Ubuntu (Linux))上，沙箱可以关闭的，通过检查目标平台{}Game Options{}中的{}禁用文件系统沙箱{}选项。您这样做的风险由您自己承担，虽然这将打开文件保存和加载，并允许您访问给定系统上的任何位置的文件，但它仍然可能受到操作系统权限的限制。以及您仍然不能写入{}{}{}program_directory{}{}{} 文件夹。",
    "{}NOTE{}: You can never write to the File Bundle (program) directory.":"{}注意{}:你永远不能写捆绑包(程序)目录。",
    "{}NOTE{}: in general {}GameMaker{} will handle all this for you and you {}rarely {}need to use the {}working_directory{} built in variable.":"{}注意{}：一般来说，{}GameMaker{} 会为您处理所有这些，您{}很少{}需要使用内置变量 {}working_directory{}。",
    "{}Reading Operations{} - working_directory will first check the save area to see if the file being accessed is there, and if it is uses that. However if the file does not exists in the save area, it then checks the file bundle area and uses that (if the file being looked for is an included file with your game).":"{}读取操作{} - working_directory 将首先检查保存区域以查看正在访问的文件是否存在，以及它是否正在使用该区域。 但是，如果保存区域中不存在该文件，它会检查文件包区域并使用它（如果要查找的文件是游戏中包含的文件）。",
    "{}The File Bundle{} - this is where all the files that are packaged with the executable game are stored, including the files that you have added to the {}Included Files{} asset list from the {}GameMaker{} IDE (which are the external files that you want packaged with the game).":"{}捆绑包文件{} --这是存储与可执行游戏打包在一起的所有文件的地方，包括你从{4}GameMaker IDE{5}中添加到{}包含文件{}资源列表中的文件(这些文件是你想要与游戏打包的外部文件)。",
    "{}The Save Area{} - this is an area of device storage that can be safely written to by the game and the game is guaranteed that this is a writable area.":"{}保存区域{} --这是一个设备存储区域，可以被游戏安全地写入，并且游戏保证这是一个可写入的区域。",
    "{}Ubuntu (Linux){}:&nbsp;Files are stored in the {}Home/.config/gamename{} where \"Home\" is the users home directory - {}/home/&lt;username&gt;{}":"{}Ubuntu (Linux){}: 文件存储在{} Home/.config/gamename{} 其中“Home”是用户的主目录 -{}/Home/<用户名>{}",
    "{}Windows{}:&nbsp;Windows has all files in the {}%localappdata%\\&lt;Game Name&gt;{} directory (on Windows 7 this is the {}/Users/&lt;User Name&gt;/AppData/Local/&lt;Game Name&gt;{} directory).":"{}Windows{}：Windows的所有文件都位于{}%localappdata%\\<游戏名称>{}目录(在Windows 7上，这是{}/Users/<用户名>/AppData/Local/<游戏名称>{}目录)。",
    "{}Writing Operations{} - This can only happen in the save area.":"{}写入操作{} - 这只能发生在保存区域中。",
    "{}iOS{} / {}tvOS{}:&nbsp;Storage is the standard location (as viewed through iTunes).":"{}iOS{} / {}tvOS{}: 存储是标准的位置(通过iTunes查看)。",
    "{}macOS{}:&nbsp;Storage will depend on whether the application is sandboxed or not (following Apple\u0027s rules, with the path usually being {}~/Library/Application Support/&lt;Game Name&gt;{}).":"{}macOS{}: 存储将取决于应用程序是否被沙盒化(遵循苹果的规则，路径通常是{}~/Library/application Support/&lt;游戏名称&gt;{})。",
    "{}{}directory_create(){}{}&nbsp;(and the other directory functions) will only work in the {}save {}area.":"{}{}directory_create() {}{}(以及其他目录函数) 仅在{}保存{}区域中起作用。"
}