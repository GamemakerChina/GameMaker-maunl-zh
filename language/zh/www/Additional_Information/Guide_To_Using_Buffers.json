{
    "A 16bit float. This can be a positive or negative value within the range of +/- 65504.":"16 位浮点数。这可以是 +/-65504 范围内的正值或负值。",
    "A 16bit floating point number. This can be a positive or negative value within the range of +/- 65504. {}(Not currently supported!){}":"16位浮点数。这可以是 +/-65504范围内的正值或负值。{}(当前不支持!){}",
    "A 32bit float. This can be a positive or negative value within the range of +/-16777216.":"32 位浮点型。这可以是 +/-16777216 范围内的正值或负值。",
    "A 32bit floating point number. This can be a positive or negative value within the range of +/-16777216.":"32位浮点数。这可以是 +/-16777216范围内的正值或负值。",
    "A 64bit float.":"64 位浮点型",
    "A 64bit floating point number.":"64位浮点数。",
    "A 64bit unsigned integer value.{}(Not currently supported by all buffer functions!){}":"64位无符号整数值。{1}(当前不是所有缓冲区函数都支持!){2}",
    "A boolean value, can only be either 1 or 0 ({}true{} or {}false{}). It is stored in a single byte (8bit)":"布尔值只能是 1 或 0 ({}True{} 或 {}False{})。它以单字节 (8 位) 存储",
    "A boolean value. Can only be either 1 or 0 ({}true{} or {}false{})":"一个布尔值。只能是1或0({} true {}或{} false {})",
    "A buffer (in programming) is basically a space within the system memory that is used to store small packets of data for just about anything (for example: data transfer, collisions, colour data etc...). Since it is held in system memory it is very fast to access, and a buffer would generally be used for very short-term storage, like receiving network information before processing it, or for storing a checkpoint in your game (this is explained in the example given further down the page).":"缓冲区(在编程中)基本上是系统内存中的一个空间，用于存储几乎任何事情的小数据包(例如:数据传输、冲突、颜色数据等)。因为它保存在系统内存中，所以访问速度非常快，而缓冲区通常用于非常短期的存储，如在处理网络信息之前接收网络信息，或用于在游戏中存储存档点(这将在后面的例子中解释)。",
    "{} A buffer of a fixed size in bytes. The size is set when the buffer is created and cannot be changed again.":"以字节为单位的固定大小的缓冲区。在创建缓冲区时设置大小，不能再次更改。",
    "{} A buffer that will {}grow{} dynamically as data is added. You create it with an initial size (which should be an approximation of the size of the data expected to be stored), and then it will expand to accept further data that overflows this initial size.":"在添加数据时动态{1}增长{2}的缓冲区。您使用初始大小创建它(这应该是预期存储的数据大小的近似值) ，然后它将扩展以接受更多溢出这个初始大小的数据。",
    "{} A buffer where the data will {}wrap{}. When the data being added reaches the limit of the buffer size, the overwrite will be placed back at the start of the buffer, and further writing will continue from that point.":"数据将在其中{1}循环{2}的缓冲区。当被添加的数据达到缓冲区大小的限制时，覆盖将被放回到缓冲区的开始，并且从那一点继续进行进一步的写操作。",
    "A signed, 16bit integer. This can be a positive or negative value from -32,768 to 32,767 (0 is classed as positive).":"有符号的 16 位整数。这可以是 -32,768 到 32,767 之间的正值或负值 (0 被归类为正值)。",
    "A signed, 32bit integer. This can be a positive or negative value from -2,147,483,648 to 2,147,483,647 (0 is classed as positive).":"有符号的 32 位整数。这可以是从 -2,147,483,648 到 2,147,483,647(0 被归类为正值) 的正值或负值。",
    "A signed, 8bit integer. This can be a positive or negative value from -128 to 127 (0 is classed as positive).":"有符号的 8 位整数。这可以是 -128 到 127 之间的正值或负值 (0 被归类为正值)。",
    "A simple example of how a buffer can be used in any {}GameMaker{} game for any platform, is the function {}{}game_save_buffer(){}{}. This function will take a \"snapshot\" of the current game state and save it to a pre-defined buffer, which can then be read from to load the game at that point again.":"关于如何在任何平台的任何{}GameMaker{}游戏中使用缓冲区的一个简单例子是函数{}{}game_save_buffer(){}{}。该函数将获取当前游戏状态的“快照”，并将其保存到预定义的缓冲区中，然后可以从中读取并再次加载游戏。",
    "A string of any size, including a final null terminating character":"任意大小的字符串，包括最后一个空终止字符",
    "A string of any size, without the final null terminating character":"不带最后一个空终止字符的任意大小的字符串",
    "An unsigned 64bit integer. This is a positive value from&nbsp;0 to 18,446,744,073,709,551,615.":"无符号的 64 位整数。这是从 0 到 18,446,744,073,709,551,615 之间的正值。",
    "An unsigned, 16bit integer. This is a positive value from 0 - 65,535.":"无符号的 16 位整数。这是一个从 0 到 65,535 的正值。",
    "An unsigned, 32bit integer. This is a positive value from 0 to 4,294,967,295.":"无符号的 32 位整数。这是一个从 0 到 4,294,967,295 的正值。",
    "An unsigned, 8bit integer. This is a positive value from 0 to 255.":"无符号的 8 位整数。这是一个从 0 到 255 的正值。",
    "As you can see, you read out information in the same order that you read it into the buffer. For further information on how to add and remove data from the buffer please see the examples given below.":"正如您所看到的，您以将信息读入缓冲区的相同顺序读出信息。有关如何从缓冲区中添加和删除数据的进一步信息，请参阅下面给出的示例。",
    "Basically, what this means is that alignment will only affect {}where {}things are written to, so if you do a buffer tell after you write something, it\u0027ll return the current write position which immediately follows the data you\u0027ve previously written. Note, however, that if you then write another piece of data, internally the buffer will move the write position along to the next multiple of the alignment size before actually writing the piece of data.":"基本上，这意味着对齐只会影响写入内容的{}位置{}，因此如果您在写入内容后执行缓冲区tell，它将返回当前写入位置，该位置紧跟在您之前写入的数据之后。 但是请注意，如果您随后写入另一段数据，在实际写入该段数据之前，缓冲区将在内部将写入位置移动到对齐大小的下一个倍数。",
    "Before writing to the buffer we have set the \"tell\" to the start of the buffer as networking always takes the data from the start of a buffer. We then write the check value (this will be used by the server to determine the type of event to be processed), then the key being used, and then the state of the key (in this case true for pressed). This buffer is then sent as a data packet by the network function. Note that we do not send the whole buffer! We only send the data written, using the buffer_tell function to return the current read/write position of the buffer (remember that writing to the buffer moves the \"tell\" to the end of what has been written). This is simply to avoid sending more bytes than is necessary.":"在写入缓冲区之前，我们将“tell”设置为缓冲区的起点，因为网络总是从缓冲区的起点获取数据。然后写入检查值(服务器将使用该值来确定要处理的事件的类型)，然后写入正在使用的键，然后写入键的状态(在本例中，按下时为true)。这个缓冲区然后作为数据包由网络函数发送。注意，我们没有发送整个缓冲区!我们只发送写入的数据，使用buffer_tell函数返回缓冲区的当前读/写位置(记住，写入缓冲区将“tell”移动到已写入内容的末尾)。这只是为了避免发送多余的字节。",
    "Below we have a couple of examples of how to use buffers in a project:":"下面我们有几个关于如何在项目中使用缓冲区的例子:",
    "Buffer Data Type Constant":"缓冲区数据类型常量",
    "Buffers are written to (and read from) {}sequentially{}, in that one piece of data is written after another, with each piece of data being of a set type. This means that you should ideally be aware of what data you are writing to the buffer at all times. These data types are defined in GML by the following constants:":"缓冲区按{}顺序{}写入(并从读取)，即一段数据在另一段数据之后写入，每一段数据都是一个集合类型。这意味着，在理想情况下，您应该始终知道向缓冲区写入的数据是什么。这些数据类型在GML中由以下常量定义:",
    "Guide To Using Buffers":"缓冲区使用指南",
    "However, if you write another piece of data, also 1 byte in size, {}then {}do a buffer tell, you\u0027ll get an offset of 5 bytes (even though you have only written 2 bytes of data) as the alignment has padded the data to align it with the 4 byte buffer alignment.":"然而，如果您写入另一段数据，同样是1字节大小的，{}然后{}执行缓冲区tell，您将得到5字节的偏移量(即使您只写入了2个字节的数据)，因为对齐已经填充了数据，使其与4字节的缓冲区对齐。",
    "If you have been reading through this page you will have seen references to the {}byte-alignment {}of a buffer. This basically refers to the position that new data will stored at within a given buffer. How does this work? Well, for a single byte aligned buffer, each piece of data is written to the buffer sequentially, with each new data piece being added directly after the previous. However a 2 byte aligned buffer will write each piece of data to intervals of 2 bytes, so that even if your initial write is 1 byte of data, the next write will be moved to align to two bytes:":"如果您一直在阅读这一页，您将会看到对缓冲区的{}字节对齐{}的引用。这基本上是指新数据将存储在给定缓冲区中的位置。这是如何运作的?对于一个单字节对齐的缓冲区，每个数据块都是按顺序写入缓冲区的，每个新数据块都是直接在前一个数据块之后添加的。然而，一个2字节对齐的缓冲区将把每一段数据写入2字节的间隔，所以即使你的初始写入是1字节的数据，下一次写入将被移动到对齐两个字节:",
    "Next we would add a {}Keypress Event{} (for example) in which we will save the current game state to the created buffer:":"接下来，我们将添加一个{} 按键事件 {}(例如) ，其中我们将把当前游戏状态保存到创建的缓冲区:",
    "Now, let\u0027s say that we want our client to send data to the server. For that we need to create a buffer \"packet\", and in this example we are going to send a {}Key Press Event{}, like when the player presses {}Left Arrow {}to move around the game. To do this we write the necessary data to the buffer first then send it off:":"现在，假设我们希望客户机向服务器发送数据。为此，我们需要创建一个缓冲 \"包(packet)\" ，在本例中，我们将发送一个{}按键事件{}，就像当玩家按{}左箭头{}在游戏中移动时。为此，我们先将必要的数据写入缓冲区，然后将其发送出去:",
    "So, say you have created a buffer and you want to write information to it, then you would use something like the following code:":"所以，假设你已经创建了一个缓冲区，并且你想向它写入信息，那么你可以使用如下代码:",
    "The above will first set the control variable to {}true {}(so that this is saved when we save the game to the buffer) and then seek to the start of the buffer before writing the current save state into it. Why do we use {}{}buffer_seek(){}{}? Well, as mentioned already on this page, you read and write to a buffer from the last position that data was added to it. This means that if you don\u0027t set the buffer tell back to the start then when you save you will be adding the data into the buffer at the current buffer read/write position.&nbsp;So, we use the function {}buffer_seek(){} to move the tell to the buffer start.":"上述方法将首先将控制变量设置为{}true{}(这样当我们将游戏保存到缓冲区时就会保存它)，然后在将当前保存状态写入缓冲区之前查找缓冲区的起点。为什么使用{}{}buffer_seek(){}{}?正如在本页中已经提到的，从数据被添加到缓冲区的最后一个位置读取和写入缓冲区。这意味着，如果你不设置 buffer tell 回到开始位置，那么当你保存时，你将在缓冲区当前读/写位置添加数据到缓冲区。因此，我们使用函数{}buffer_seek(){}将告诉移动到缓冲区开始。",
    "The actual code to create a buffer would look something like this:":"创建缓冲区的实际代码如下所示:",
    "The asynchronous event will contain a special temporary DS map {}async_load{} (it is removed from memory at the end of the event automatically) which contains different information depending on the type of incoming data from the network. In this case, we are assuming that the map has been checked and found to be a buffer data packet sent from a client. We now check the first piece of data that is in the buffer to see what kind of event has been sent - in this case the value \"1\" represents a key event, however when coding these things you should define constants to hold these values to simplify things - and then store the key being pressed and its state ({}true{} = pressed, {}false{} = released). This information would then be used to update all the clients with the new status of the sending client player.":"异步事件将包含一个特殊的临时DS map {} async_load{}(它在事件结束时自动从内存中删除)，该映射包含不同的信息，具体取决于来自网络的传入数据的类型。在本例中，我们假设已经检查了映射并发现它是客户机发送的缓冲区数据包。现在，我们检查缓冲区中的第一块数据，看看发送了什么类型的事件 --在这种情况下，值“1”表示一个键事件，然而，当对这些事情进行编码时，您应该定义常量来保存这些值以简化事情 --然后存储被按下的键及其状态({}true{} = 按下， {}false{} = 释放)。然后，此信息将用于使用发送客户端玩家的新状态更新所有客户端。",
    "The final thing to add to the controller object is some&nbsp;\"clean up\" code. Buffers are stored in memory and as such if you do not clean up when you are finished with them, you can get memory leaks that will eventually lag and crash your game. So you would probably add a {}Room End Event{} (from the {}Other{} event category) with:":"添加到控制器对象的最后一件事是一些“清理”代码。 缓冲区存储在内存中，因此，如果您在使用完缓冲区后不进行清理，则可能会出现内存泄漏，最终导致游戏滞后和崩溃。 因此，您可能会添加一个 {}房间结束事件{}（来自 {}其它{} 事件类别）：",
    "The first line creates a grow buffer (since we don\u0027t know the final size of the saved data) of 1024 bytes and aligned to 1 byte. A variable is then created to check against and see if the game has been saved or not (this will be used for loading).":"第一行创建1024字节的增长缓冲区(因为我们不知道保存的数据的最终大小)，并对齐为1字节。然后创建一个变量来检查游戏是否被保存(这将用于加载)。",
    "The first thing we need to do is create a new object to control the saving and loading, so you would make one and give it a {}Create Event{}. In this event, you could place the following code:":"我们需要做的第一件事是创建一个新对象来控制保存和加载，因此您需要创建一个对象并赋予它一个{} 创建事件 {}。在这种情况下，您可以放置以下代码:",
    "The first thing we will show is the creation and use of a buffer for the client side of the network connection. This buffer will be used to create small data packets that can then be sent to the server, so in the {}Create Event{} of an instance we would assign a buffer like this:":"我们将展示的第一件事是为网络连接的客户端创建和使用缓冲区。这个缓冲区将被用来创建小的数据包，然后发送到服务器，所以在实例的{}创建事件{}中，我们将像这样分配一个缓冲区:",
    "The game will then be loaded at the end of the event in which you place the above code.":"然后，游戏将在您放置上述代码的事件结束时加载。",
    "This object can now be placed into a room and on a key press save and load the room state from a buffer.":"现在可以将此对象放置到房间中，并在按键时从缓冲区保存和加载房间状态。",
    "Those are the buffer types available to you when using {}GameMaker{}, and which one you choose will greatly depend on the use you wish to put it to. For example, a grow buffer would be used for storing a \"snapshot\" of data to create a save game since you do not know the actual amount of data that is going to be placed in it, or a fast buffer would be used when you know that the values you are working with are all between 0 and 255 or -128 and 127, for example when processing {}ARGB{}&nbsp;data from an image.":"这些是在使用{}GameMaker{}时可用的缓冲区类型，您选择哪一种很大程度上取决于您希望将其用于的用途。例如，增长(grow)缓冲区将用于存储数据的“快照”，以创建一个游戏存档，因为你不知道将放入其中的实际数据量，或快速(fast)缓冲区将用于当你知道你正在处理的值都在0到255或-128和127之间时，例如处理图像中的{}ARGB{} 数据。",
    "We have now saved the current game state to a buffer. The next step would be to code how to load it, probably in another {}Keypress Event{}:":"我们现在已经将当前游戏状态保存到缓冲区中。 下一步是编码如何加载它，可能是在另一个{}按键事件{}中：",
    "We make the buffer small (256 bytes) - as it is not intended for holding large amounts of data - then&nbsp;we make it a grow buffer to ensure no errors should we need to add more data to be sent at any time, and the alignment is set to one for convenience.":"我们使缓冲区很小(256字节)——因为它不打算保存大量的数据——然后我们使它成为一个增长缓冲区，以确保在任何时候需要添加更多的数据发送时不会出错，并将对齐设置为一是为了方便。",
    "What about receiving the data on the server? The received data packet that must be written into the buffer on the server and then used to update the game. For that we would use the {}Networking Asynchronous Event{} in the network controller object of the server, as this simplified code below shows:":"如何接收服务器上的数据?接收到的数据包必须写入服务器上的缓冲区，然后用于更新游戏。为此，我们将在服务器的网络控制器对象中使用{}网络异步事件{}，如下面的简化代码所示:",
    "When reading and writing data to a buffer, you do it in \"chunks\"&nbsp;of data defined by their \"data type\". The \"data type\"&nbsp;sets the number of bytes allocated within the buffer for the value being written, and it is essential that you get this correct otherwise you will get some very strange results (or even errors) for your code.":"当读写数据到缓冲区时，你是在数据的“块”中进行的，这些“块”是由它们的“数据类型”定义的。“数据类型” 设置为写入的值在缓冲区中分配的字节数，这一点非常重要，否则您的代码将得到一些非常奇怪的结果(甚至错误)。",
    "When working with the {}GameMaker{} {}networking functions{}, you have to use buffers to create the data packet that is being sent over the network connection. This example intends to show how this is done, but due to the scope of the networking possibilities, it is only designed to show how to use the buffers themselves, and not the full networking system.":"在使用{}GameMaker{}{}网络函数{}时，必须使用缓冲区来创建通过网络连接发送的数据包。本例旨在演示如何实现这一点，但由于网络可能性的范围，它仅设计为演示如何使用缓冲区本身，而不是完整的网络系统。",
    "looking at the example above you can see that you can write different types of data to a buffer at the same time (you are only limited to a specific data type when using the {}fast {}buffer type), and this data will be added into the buffer sequentially (although its actual position in the buffer will depend on its byte-alignment, explained below). This is the same for reading information from the buffer too, and in the case of the example given above, you would read from the buffer in the same order that you wrote the data, checking for the same data type, eg:":"看看上面的例子，你会发现你可以同时向缓冲区写入不同类型的数据(当使用{}快速{}缓冲区类型时，你只能限制在一个特定的数据类型中) ，这些数据将被依次添加到缓冲区中(尽管它在缓冲区中的实际位置将取决于它的字节对齐，如下所述)。这对于从缓冲区读取信息也是一样的，在上面给出的例子中，您将按照写入数据的相同顺序从缓冲区读取信息，检查相同的数据类型，例如:",
    "{} That would create a fixed buffer of 16384 bytes and byte-aligned to 2, with the function returning a unique ID value that is stored in a variable for later referencing of this buffer.":"{}这将创建一个16384字节的固定缓冲区，字节对齐为2，函数返回一个唯一的 ID 值，该 ID 值存储在一个变量中，以便以后引用这个缓冲区。",
    "{} This is a UTF-8 null terminated (0x00) string. Basically a GameMaker string is dumped in the buffer, and a 0 is put at the end.":"这是一个UTF-8空终止(0x00)字符串。基本上，一个GameMaker字符串被转储到缓冲区中，并在末尾放入一个0。",
    "{} This is a special \"stripped down\" buffer that is extremely fast to read/write to. However it can only be used with {}{}buffer_u8{}{} data types, and must be 1 byte aligned. (Information on {}data types{} and {}byte alignment{} can be found further down this page).":"这是一个特殊的“精简”缓冲区，读/写非常快。但是，它只能与{1}{2}buffer_u8{3}{4}数据类型一起使用，并且必须是1字节对齐的。(关于{5}数据类型{6}和{7}字节对齐{8}的信息可以在本页下方找到)。",
    "{}Buffer Checkpoint{}{}Buffer Checkpoint{}":"{}Buffer Checkpoint{}{}Buffer Checkpoint{} 存档点缓冲区",
    "{}Buffers are created by allocating a space in the system memory, calculated in&nbsp;{}byte{} {}s{}, which is then reserved for your game as long as your game is running or until you delete the buffer using the appropriate function (you can find all the GML buffer functions listed {}here{}). This means that even when your game is not in focus (for example, on a mobile device when you take a call the game will be put into the background) the buffer will still exist, however if the game is closed or re-started the buffer will be lost.":"{}缓冲区是通过在系统内存中分配一个空间来创建的，以&nbsp;{}字节{}{} {}计算，然后在你的游戏运行期间为你的游戏保留，或者直到你使用适当的函数删除缓冲区(你可以在{}这里找到所有GML缓冲区函数{})。这意味着即使你的游戏没有焦点(例如，当你在移动设备上接听电话时，游戏将被放到后台)，缓冲区仍然存在，但如果游戏关闭或重新启动，缓冲区将丢失。",
    "{}GameMaker{} permits the creation of four different buffer types. The reason for this is that buffers are designed to be a highly optimised temporary storage medium, and as such you should create a buffer that is appropriate to the type of data that you wish it to store, otherwise you could get errors or cause a bottleneck in your code. Before explaining this further, let\u0027s look at the four available buffer types (defined as {}constants {}in GML):":"{}GameMaker{}允许创建四种不同的缓冲区类型。这样做的原因是缓冲区被设计成一种高度优化的临时存储介质，因此你应该创建一个适合于你希望它存储的数据类型的缓冲区，否则你可能会出错或导致你的代码瓶颈。在进一步解释之前，让我们看看四种可用的缓冲区类型(在GML中定义为{}常量{}):",
    "{}NOTE{}: Restarting the game will not clear or delete the buffer! But it will prevent any further access to the previously created buffer as the ID handle will have been lost, causing a memory leak which will crash your game eventually. So, when re-starting a game, remember to delete any buffers first.":"{}注意{}:重新启动游戏不会清除或删除缓冲区!但它将阻止任何进一步访问之前创建的缓冲区，因为ID句柄将丢失，导致内存泄漏，最终将导致你的游戏崩溃。所以，当重新开始游戏时，记得先删除所有缓冲区。",
    "{}NOTE{}: The buffer that is created from the DS map is automatically removed at the end of the Network Asynchronous Event so there is no need to use {}buffer_delete(){} here.":"{}注意{}：从 DS map 创建的缓冲区会在网络异步事件结束时自动删除，因此无需在此处使用 {}buffer_delete(){}。",
    "{}NOTE{}: This function is very limited and it is designed for the beginner to get a checkpoint system up and running quickly, but more advanced users may prefer to code their own system using the File functions, due to the fact that the game will not save any of the dynamic resources that you can create at run-time like data structures, surfaces, added sprites, etc...":"{}注{}:这个函数非常有限，它是为初学者设计的，目的是让检查点系统快速启动和运行，但更高级的用户可能更喜欢使用File函数编写自己的系统，因为游戏不会保存任何你可以在运行时创建的动态资源，如数据结构、表面、添加的精灵等……",
    "{}NOTE{}: This is only for use in the same room, and not for generating complete saved games for after your game has been closed or restarted!":"{}注意{} : 这仅用于在同一个房间中使用，而不用于在游戏关闭或重新启动后生成完整的保存游戏！",
    "{}Network Buffers{}{}Network Buffers{}":"{}Network Buffers{}{}Network Buffers{} 网络缓冲区",
    "{}So, if your byte-alignment is set to, say, 4 bytes and you write a single piece of data which is 1 byte in size then do a buffer {}tell {}(a tell gets the current position for reading/writing for the buffer), you\u0027ll get an {}offset {}of 1 byte (the offset in this case is the number of bytes from the start of the buffer to the current read/write position).":"{}因此，如果你的字节对齐设置为4个字节，并且你写了一个1字节大小的数据，然后执行缓冲区{}tell{}(一个告诉获取缓冲区读/写的当前位置)，你将得到一个字节的{}偏移{}(在这种情况下，偏移量是缓冲区开始到当前读/写位置的字节数)。",
    "{}When creating a buffer, you should always try to create it to a size that is appropriate to the type, with the general rule being that it should be created to accommodate the maximum size of data that it is to store, and if in doubt, use a grow buffer to prevent overwrite errors.":"{}创建缓冲区时，应始终尝试将其创建为适合该类型的大小，一般规则是，创建缓冲区时应容纳要存储的最大数据大小，如有疑问，应使用增长缓冲区以防止覆盖错误。"
}