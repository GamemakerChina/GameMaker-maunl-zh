{
    "Another important part of debugging your game is the use of&nbsp;{}Breakpoints{}.&nbsp;A breakpoint is a place in your project code that you wish it to stop at so you can see what\u0027s going on. With the Debugger running, you can add or remove breakpoints at any time and in any code or script block by left clicking {}&nbsp;in the gutter (where the line numbers are), or you can use the right mouse button {}{}{}&nbsp;to open the {}Context Menu{}, which also permits you to add or remove breakpoints:":"调试游戏的另一个重要部分是使用{}断点{}。断点是项目代码中您希望它停止的位置，以便您可以看到正在发生的事情。在调试器运行的情况下，您可以随时在任何代码或脚本块中添加或删除断点，方法是在线框(行号所在的位置)中左键单击{}，或者使用鼠标右键{}{}{}打开{}上下文菜单{}，该菜单还允许您添加或删除断点：",
    "Breakpoints set from the IDE are saved along with your project and will persist over various runs until removed again, however if you add a breakpoint to your code in the Debugger, this will be lost after the module is closed, or a new test run started. Note that all breakpoints will appear in the {}Output Window{} where they can be enabled or disabled or even removed.":"从 IDE 中设置的断点与您的项目一起保存，并将在各种运行中保持不变，直到再次删除。但是，如果您在调试器中向代码添加断点，则在关闭模块或启动新的测试运行后，该断点将丢失。请注意，所有断点都将出现在{}输出窗口{}中，您可以在其中启用、禁用甚至删除断点。",
    "Restarts the game.":"重新开始游戏",
    "Step into a code block or script (keyboard shortcut \"{}f11{}\").":"单步执行代码块或脚本(键盘快捷键\"{}f11{}\")。",
    "Step out of a code block or script (keyboard shortcut {}&nbsp;+ \"{}f11{}\").":"退出代码块或脚本(键盘快捷键{} +\"{}f11{}\")。",
    "Step over a code block or script (keyboard shortcut \"{}f10{}\").":"跳过代码块或脚本(键盘快捷键\"{}f10{}\")。",
    "Stops the game.":"停止游戏",
    "The Debugger":"调试器",
    "The Graph view shows you a graphic display of how your project is using memory and its framerate over time:":"图表视图以图形方式显示项目在一段时间内如何使用内存及其帧速率：",
    "The Graph view will also show certain debug events as points along the length of the graph. These events are generated automatically by {}GameMaker{} at certain points in the running of a game to show specific important events, but you can also add in your own graph elements using the functions {}{}show_debug_message(){}{}&nbsp;and {}{}debug_event(){}{}. System events will be flagged in a different colour to those events that are triggered through code:":"图表视图还将某些调试事件显示为沿图形长度的点。这些事件是由 {}GameMaker{} 在游戏运行的特定时刻自动生成的，以显示特定的重要事件，但您也可以使用函数 {}{}show_debug_message(){}{} 和 {}{}debug_event(){}{} 添加您自己的图形元素。系统事件将以不同于通过代码触发的事件的颜色进行标记：",
    "The Profiler":"探查器",
    "The Resource View shows you a list of all the resources being used in the project that can contain code or GML Visual actions. This section works much like the {}Asset Browser{} and you can expand the items in it to show more information, for example, the different events for a specific object. You can then double click {}&nbsp;on any of the resources to open the code for it in the {}Code View{} window, where you can check values and add or remove {}breakpoints{}.":"资源视图显示项目中正在使用的所有资源的列表，这些资源可以包含代码或GML可视操作。此部分的工作方式与{}资源浏览器{}非常相似，您可以展开其中的项目以显示更多信息，例如，特定对象的不同事件。然后，您可以在任何资源上双击{} ，以在{}代码视图{}窗口中打开它的代码，您可以在该窗口中检查值并添加或删除{}断点{}。",
    "The code view is where we can see and review different scripts or event code from our project as it runs. By default this starts empty, but you can double click {}&nbsp;on any asset from the {}Resource View {}to open it here. You can open multiple different events or scripts too, and they will be added to the Code View workspace as tabs along the top.":"在代码视图中，我们可以在项目运行时查看和查看不同的脚本或事件代码。默认情况下，开始时为空，但您可以在{}资源视图{}中的任何资源上双击{0}以在此处打开它。您还可以打开多个不同的事件或脚本，它们将作为选项卡添加到代码视图工作区的顶部。",
    "The final icon for {}real time updates{} permits the debug window to update its data in real time, so you can see how variables change or instances are created and destroyed as it happens. Note that this may affect the games performance and that not all information is available in real time. For example, the {}Render State{} watch (see the section on {}Watches{}) cannot be viewed in real time.":"{}实时更新{}的最后一个图标允许调试窗口实时更新其数据，这样您就可以看到变量是如何变化的，或者实例是如何创建和销毁的。请注意，这可能会影响游戏性能，而且并非所有信息都是实时可用的。例如，无法实时查看{}渲染状态{}监视(请参阅有关{}监视器{}的部分)。",
    "The first three buttons are used to control your game, permitting you to {}start{}, {}pause{}, {}restart {}or {}stop {}it at any time. When the game is paused (either by clicking the Pause button or from a {}Breakpoint{}) you can then use the three {}step{}&nbsp;buttons for stepping through your code.":"前三个按钮用于控制您的游戏，允许您随时{}开始{}、{}暂停{}、{}重新启动{}或{}停止{}游戏。当游戏暂停时(通过单击暂停按钮或从{}断点{})，您可以使用三个{}步骤{}按钮单步执行代码。",
    "The toolbar has the debugger controls along with some basic information such as memory use, the current (real) FPS for the game and an indicator to show whether the debugger is currently connected or not (the indicator will be green when connected to a running instance of your project and red otherwise). The available controls are:":"工具栏有调试器控件以及一些基本信息，如内存使用情况、游戏的当前(真实)FPS以及一个指示器，用于显示调试器当前是否已连接(当连接到项目的运行实例时，该指示器将显示为绿色，否则将显示红色)。可用的控件包括：",
    "The {}Debugger {}is a powerful tool for checking your game, and is especially useful for tracking down errors and bugs in your code, as well as checking that scripts are run when they should be, and that variables and arrays contain the values you expect etc... You can start the Debugger by running your game from {}GameMaker{} {}IDE{} using the Debug button {}&nbsp;at the top of the IDE, or by going to the {}Build menu{} and selecting \"{}Debug{}\".":"{}调试器{}是用于检查游戏的强大工具，特别是用于跟踪代码中的错误和错误、检查脚本是否在应该运行的时间运行以及变量和数组是否包含预期值。您可以通过以下方式启动调试器：使用IDE顶部的调试按钮，从 {}GameMaker{} {}IDE{} 运行游戏，或者转到{}构建菜单{}并选择\"{}调试{}\"。",
    "This section is dedicated to \"watching\" different aspects of your game to permit more in depth and detailed debugging. This is covered in depth on the following page:":"这一部分致力于\"观察\"游戏的不同方面，以便进行更深入和详细的调试。下一页将详细介绍这一点：",
    "This starts the game again after it has been paused (keyboard shortcut \"{}f5{}\").":"这将在暂停后再次开始游戏(键盘快捷键\"{}f5{}\")。",
    "This will pause (break) the game.":"这将暂停(中断)游戏。",
    "This window will display the current call stack of events, as well as the line number for the code being stepped through. The call stack is essentially a \"last in - first out\" data structure that shows the order of execution of all the game code both from the {}GameMaker{} runner - since debugging is done using the {}Virtual Machine (VM){}&nbsp;-&nbsp;and from what you have written for the game. The debugger will need to have been {}Paused {}before any information will be shown here.":"此窗口将显示事件的当前调用堆栈，以及单步执行的代码的行号。调用堆栈本质上是一种后进先出的数据结构，它显示了所有游戏代码的执行顺序，这些代码来自{}GameMaker{}运行者-因为调试是使用{}虚拟机(VM){}--完成的--来自您为游戏编写的代码。在此处显示任何信息之前，调试器需要已{}暂停{}。",
    "Turn on or off real time updates for the debug information (this is off by default).":"打开或关闭调试信息的实时更新(默认情况下为关闭)。",
    "Watches":"监视器",
    "When we talk about \"stepping\" through the code, we simply mean&nbsp;that you can tell your game to run the current line of code, then \"step\" onto the next one, permitting you to run through your entire game one line of code at a time should you wish. Normally you would simply use the {}Step In{} button to do this, but you also have one for stepping {}over {}code and one for stepping {}out {}of the code. Stepping over is useful when you have large scripts to run through, as clicking this will run the whole script or code block as a single step and stop on the next line afterwards, while stepping out will take you out of a script (they will run, but all at once) and stop on the next step afterwards when the scope changes.":"当我们谈论\"单步执行\"代码时，我们的意思是-您可以告诉游戏运行当前的代码行，然后\"单步执行\"到下一行代码，允许您根据需要一次运行整个游戏的一行代码。通常情况下，您只需使用{}单步执行{}按钮即可完成此操作，但您还有一个按钮用于{}跳过{}代码，另一个按钮用于{}退出{}执行代码。当您有大的脚本要运行时，跳过是很有用的，因为单击这将作为单个步骤运行整个脚本或代码块，然后在下一行停止，而跨出将使您退出脚本(它们将同时运行)，并在之后范围发生变化时停止在下一步。",
    "When you run a game in debug mode, the IDE will display the different tools available for the Debugger:":"在调试模式下运行游戏时，IDE 将显示调试器可用的不同工具：",
    "While any code window is open in the Code View, you can left click {}&nbsp;in the gutter (where the line numbers are) to add or remove {}Breakpoints {}(see further down this page for information on breakpoints).":"当代码视图中的任何代码窗口处于打开状态时，您可以在栏间距(行号所在的位置)中单击{}以添加或删除{}断点{}(有关断点的信息，请参见本页下方的更多部分)。",
    "You can also use the right mouse button {}&nbsp;to open the {}Context Menu{}, which also permits you to add or remove breakpoints and copy any selected code to the clipboard.":"您还可以使用鼠标右键{}打开{}上下文菜单{}，该菜单还允许您添加或删除断点并将任何选定的代码复制到剪贴板。",
    "{} It is important to note that while the game is running it doesn\u0027t update the debug windows with variable values and other details by default, therefore you must first either use the Pause button {}&nbsp;in the Debugger to pause the game before Locals, Globals and other data will be available, or enable real-time updating from the icons at the top {}. The only exception to this rule is the {}Profile {}view, which updates in real time when enabled independently of the real-time switch, as it has its own on/off button. You can find full information on this view from the following page:":"{}需要注意的是，在游戏运行时，默认情况下不会使用变量值和其他详细信息更新调试窗口，因此您必须首先使用调试器中的暂停按钮{}暂停游戏，然后才能使用本地、全局和其他数据，或者从顶部的图标启用实时更新{}。此规则的唯一例外是{}配置文件{}视图，它在独立于实时开关启用时实时更新，因为它有自己的开/关按钮。您可以在以下页面中找到有关此视图的完整信息：",
    "{}Below we explain what each section of the debugger is for:":"{}下面我们将解释调试器的每个部分的用途：",
    "{}Breakpoints can also be set from the {}GameMaker{} IDE. When writing your project, they can be added or removed at any time using {}f9{} (or using the right mouse button {}&nbsp;and selecting \"{}toggle breakpoint{}\"), either on an action in the object window (for GML Visual users), or on a line in a code editor window. Now, when you run your game in debug mode, it will pause at the point (or points) that you have defined.":"{} 也可以从 {}GameMaker{}IDE 设置断点。在编写项目时，可以随时使用 {}f9{}( 或使用鼠标右键 {} 并选择 \"{} 切换断点 {}\") 在对象窗口中的操作上 (对于 GML 可视化用户) 或在代码编辑器窗口中的行上添加或删除它们。现在，当您在调试模式下运行游戏时，它将在您定义的一个或多个点上暂停。",
    "{}Call Stack{}{}Call Stack{}":"{}调用堆栈{}{}调用堆栈{}",
    "{}Code View{}{}Code View{}":"{}代码视图{}{}代码视图{}",
    "{}Graph View{}{}Graph View{}":"{}图表视图{}{}图表视图{}",
    "{}NOTE{}: You may be prompted by Windows Firewall (or any other firewall program that you run) to create a security exception for this module. {}You must do this otherwise it will not work correctly{}. This is due to the way the Debugger works and is essential for debugging mobile platforms.":"{}注意{}：Windows 防火墙 (或您运行的任何其他防火墙程序)可能会提示您为此模块创建安全例外。{}您必须这样做，否则它将无法正常工作{}。这是由于调试器的工作方式，并且对于调试移动平台是必不可少的。",
    "{}Resource View{}{}Resource View{}":"{}资源视图{}{}资源视图{}",
    "{}The graph shows the current and average memory use as well as the current and average FPS over time, and you can zoom in or out using the&nbsp;{}&nbsp;/&nbsp;{}&nbsp;along with the mouse wheel {}, and if you position the mouse cursor over any of the graph elements, it will show you the value for that element at the selected point.":"{}该图显示当前和平均内存使用量以及一段时间内的当前和平均FPS，您可以使用 {} / {} 与鼠标滚轮{}一起放大或缩小，如果您将鼠标光标放在任何图形元素上，它将显示选定点处该元素的值。",
    "{}The image shown above shows the default layout for the debugger, but as with other aspects of the IDE you can customise this to suit your needs, closing windows you don\u0027t need or changing the sizes of the docs and windows that you do need. You can reset the debugger layout at any time - or reopen closed windows - from the Debugger context menu at the top of the IDE:":"{}上图显示了调试器的默认布局，但与 IDE 的其他方面一样，您可以根据需要对其进行自定义，关闭不需要的窗口或更改确实需要的文档和窗口的大小。您可以随时从 IDE 顶部的调试器上下文菜单重置调试器布局，或重新打开关闭的窗口：",
    "{}Toolbar{}{}Toolbar{}":"{}工具栏{}{}工具栏{}",
    "{}Watches{}{}Watches{}":"{}监视器{}{}监视器{}",
    "{}When running the game in debug and mousing over these events, a list will be shown of all the events that were triggered at that point in the game, and you have the option of pulling the list out into a separate window for revising by clicking the \"{}Click to open in a new window{}\" text:":"{}在调试中运行游戏并将鼠标悬停在这些事件上时，将显示在游戏中该点触发的所有事件的列表，您可以选择将列表拉出到单独的窗口中进行修改，方法是单击\"{}点击以在新窗口中打开{}\"文本："
}