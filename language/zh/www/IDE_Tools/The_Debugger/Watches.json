{
    "Below you can find a list of each of the different watch windows along with an explanation of what they are for and how to use them:":"下面您可以找到每个不同监视窗口的列表，以及它们的用途和使用方法的说明：",
    "If you have initialised any buffers in your game, then this window will show you the {}buffer data{}. You can select any buffer created by setting the {}Buffer ID{} value, which will start at 0 for the first buffer created in your game, and increment by 1 for each consecutive buffer:":"如果您已初始化游戏中的任何缓冲区，则此窗口将向您显示{}缓冲区数据{}。您可以通过设置{}缓冲区ID{}值来选择创建的任何缓冲区，对于游戏中创建的第一个缓冲区，该值将从0开始，对于每个连续的缓冲区，将递增1：",
    "If you have initialised any buffers in your game, then this window will show you the {}buffer data{}. You can select any buffer created by setting the {}Buffer ID{} value, which will start at 0 for the first buffer created in your game, and increment by 1 for each consecutive buffer:&nbsp;":"如果您已经初始化了游戏中的任何缓冲区，则此窗口将显示 {} 缓冲区数据 {}。您可以通过设置 {} 缓冲区 ID{} 值来选择任何创建的缓冲区，该值将从游戏中创建的第一个缓冲区的 0 开始，并为每个连续的缓冲区递增 1：",
    "Note that the \"Self\" and \"Other\" instances can be expanded by clicking on&nbsp;{}&nbsp;to see&nbsp;a list of all local and instance variables that are currently declared for the code block being stepped through. If you right click {}&nbsp;on a value you can set its {}type {}to see details of data structures.":"请注意，可以通过单击{}来展开\"自身\"和\"其他\"实例，以查看当前为单步执行的代码块声明的所有局部变量和实例变量的列表。如果您在某个值上单击鼠标右键{}，则可以设置其{}类型{}以查看数据结构的详细信息。",
    "Once you have selected your data-type, the variable will then show the entries in the structure simply by clicking the small {}&nbsp;next to its name. This will expand the structures contents, and&nbsp;you can also change some of the values for the variables shown by simply double clicking {}&nbsp;on the value and giving it a new one.":"一旦您选择了数据类型，变量就会显示结构中的条目，只需单击其名称旁边的小{}即可。这将展开结构内容，您还可以更改所显示变量的某些值，只需在值上双击{}并赋予新值即可。",
    "The Profiler":"探查器",
    "The whole idea of the Debugger is to permit you to \"watch\" every detail of your game. This is done using \"watch windows\" which, by default, are opened in the {}Output window{} docked at the bottom of the IDE. You can click on each of the different tabs to see the watches that they contain, some of which can be made to update in real time (when real time debugging {}&nbsp;is enabled from the Debugger toolbar) while others&nbsp;will require the debugger to have paused the game.":"调试器的整个想法是允许您\"观看\"游戏的每一个细节。这是使用\"监视窗口\"完成的，默认情况下，该窗口在停靠在 IDE 底部的{}输出窗口{}中打开。您可以单击每个不同的选项卡来查看它们包含的手表，其中一些可以被设置为实时更新(当从调试器工具栏启用实时调试{}时)，而另一些则需要调试器暂停游戏。",
    "The whole idea of the Debugger is to permit you to \"watch\" every detail of your game. This is done using \"watch windows\" which, by default, are opened in&nbsp;{}The Output Window{}&nbsp;docked at the bottom of the IDE. You can click on each of the different tabs to see the watches that they contain, some of which can be made to update in real time (when real time debugging {}&nbsp;is enabled from the Debugger toolbar) while others&nbsp;will require the debugger to have paused the game.":"整个监视器的理念是允许您\"监视\"游戏的每个细节。这是通过\"监视窗口\"来完成的，默认情况下，监视窗口在IDE底部的{}输出窗口{}中打开。您可以单击每个不同的选项卡以查看它们包含的监视，其中的一些可以进行真实的时间更新(当从调试器工具栏启用真实的时间调试{}时)，而另一些将要求调试器暂停游戏。",
    "This window is where you can see the current system {}profile {}for the game being tested and it\u0027s where you can check everything in your game from whole events to individual function calls to see how they are performing and spot any trouble areas or bottlenecks. For further information on profiling see the following page:&nbsp;":"在这个窗口中，您可以看到正在测试的游戏的当前系统{}分析{}，您可以在其中检查游戏中的所有内容，从整个事件到单个函数调用，以查看它们的执行情况，并发现任何故障区域或瓶颈。有关评测的详细信息，请参阅下一页：",
    "Watches":"监视器",
    "When you are watching {}variables{} in any of the windows, it can be one of multiple {}data-types{}. However, due to the way that {}GameMaker{} stores certain things, the Debugger does not always know exactly what the variable holds. This is because the internal ID values for data structures or instances are {}integers {}and so the Debugger doesn\u0027t always know if the integer value being stored in a variable is for a data structure or an instance or is simply an integer value. For that reason, you can right click {}&nbsp;on any variable value and get a pop-up window that lists the available data-types that this variable could be:":"当您在任何窗口中查看{}变量{}时，它可以是多种{}数据类型{}中的一种。然而，由于{}GameMaker{}存储某些内容的方式，调试器并不总是确切地知道变量保存的内容。这是因为数据结构或实例的内部ID值是{}整数{}，因此调试器并不总是知道存储在变量中的整数值是用于数据结构还是实例，还是仅仅是一个整数值。因此，您可以在任何变量值上单击鼠标右键{} ，并获得一个弹出窗口，其中列出此变量可能是的可用数据类型：",
    "When you\u0027re watching {}variables{} in any of the windows, they can be one of multiple {}data types{}. For a couple&nbsp;of them&nbsp;{}GameMaker{}&nbsp;is able to provide more information about the variable\u0027s contents (its members or entries): instances, structs, arrays and&nbsp;{}data structures{}.&nbsp;In this case the debugger shows a&nbsp;small {}&nbsp;icon next to the variable name. Clicking it will expand the structure\u0027s contents, and&nbsp;you can also change some of the values for the variables shown by simply double clicking {}&nbsp;on the value and giving it a new one.":"当您在任何窗口中查看 {} 变量 {} 时，它们可以是多种 {} 数据类型 {} 中的一种。对于其中的几种，{}GameMaker{} 能够提供有关变量内容的更多信息 (其成员或条目)：实例，结构，数组和 {} 数据结构 {}。在这种情况下，调试器会在变量名旁边显示一个小的 {} 图标。单击它将展开结构的内容，你也可以通过简单的双击 {} 并给它一个新的值来改变显示的变量的一些值。",
    "{}All Instances{}{}All Instances{}":"{}所有实例{}{}所有实例{}",
    "{}As the name implies, this window will show all {}instance {}variables, {}local {}variables for the instance event, {}built in {}variables, and {}structs{}&nbsp;associated with the instance currently being stepped through in the Source window (if an instance is being referenced using the keyword \"other\" or the {}with {}statement, then this window will show that instances properties instead).&nbsp;If you right click {}&nbsp;on a value you can set its {}type{}, delete it, or clear all watches from the window.":"{}顾名思义，此窗口将显示所有{}实例{}变量、实例事件的{}局部{}变量、{}内置的{}变量以及与当前在源窗口中单步执行的实例相关联的{}结构{}(如果使用关键字 \"other\" 或 {}with{} 语句引用实例，则此窗口将显示该实例的属性)。如果您在某个值上单击鼠标右键{}，则可以设置其{}类型{}、将其删除或清除窗口中的所有监视。",
    "{}As the name implies, this window will show all {}instance {}variables, {}local {}variables for the instance event, {}built-in {}variables, and {}structs{}&nbsp;associated with the instance currently being stepped through in the Source window (if an instance is being referenced using the keyword \"other\" or the {}with {}statement, then this window will show that instance\u0027s properties instead).&nbsp;If you right click {}&nbsp;on a value you can add the variable to the {}Watch{} window using&nbsp;{}Add Watch{}.":"{}顾名思义，此窗口将显示所有{}实例{}变量、实例事件的{}局部{}变量、{}内置{}变量以及与\"源\"窗口中当前正在单步执行的实例关联的{}结构{}(如果使用关键字 \"other\" 或 {}with{} 语句引用实例，如果你右键单击{}一个值，你可以使用\"{}添加监视{}\"将该变量添加到\"{12}监视{13}\"窗口中。",
    "{}Buffer{}{}Buffer{}":"{}缓冲区{}{}缓冲区{}",
    "{}Globals{}{}Globals{}":"{}全局变量{}{}全局变量{}",
    "{}If you right click {}&nbsp;on the data window or click the {}Data Display{} button, you can select how the data is displayed, setting the {}alignment {}and {}type{}, and you can also set how the data is laid out from the {}Column Select{} box. There is a drop-down window here where you can select from a default list of layouts.":"{}右键单击{1}数据窗口上的 或单击&nbsp; {}数据显示 {} 按钮，可以选择数据的显示方式，设置 {} 对齐方式 {} 和 {} 类型 {}，还可以从 {} 列选择 {} 框中设置数据的布局方式。此处有一个下拉窗口，您可以从默认布局列表中进行选择。",
    "{}Instance{}{}Instance{}":"{}实例变量{}{}实例变量{}",
    "{}Locals{}{}Locals{}":"{}局部变量{}{}局部变量{}",
    "{}NOTE{}: you cannot re-assign arrays or data structures in this way, but you can change some of their contents (you cannot change the \"key\" values in maps, nor the priority value for priority queues).":"{}注意{}：您不能以这种方式重新分配数组或数据结构，但您可以更改它们的某些内容(您不能更改映射中的\"key\"值，也不能更改优先级队列的优先级值)。",
    "{}Note that the debugger must be {}paused {}before these will update.":"{}请注意，调试器必须在{}暂停{}之后才会更新。",
    "{}Profile{}{}Profile{}":"{}分析{}{}分析{}",
    "{}Render States{}{}Render States{}":"{}渲染状态{}{}渲染状态{}",
    "{}Selected Instance{}{}Selected Instance{}":"{}选定实例{}{}选定实例{}",
    "{}Should you need to see all instances that are currently in the room, you can select this window and they will be listed. You can also see the state of any {}built in{} variables, {}instance{} variables or {}structs {}that they have, and you can right click {}&nbsp;on a value to add it to the {}Watch{} window using {}Add Watch{}.":"{}如果您需要查看当前在房间中的所有实例，您可以选择此窗口，它们将被列出。您还可以查看它们拥有的任何{}内置{}变量、{}实例{}变量或{}结构{}的状态，并且您可以右键单击{}某个值以使用\"{}添加监视{}\"将其添加到\"{}监视{}\"窗口。",
    "{}Should you need to see all instances that are currently in the room, you can select this window and they will be listed. You can also see the state of any {}built in{} variables, {}instance{} variables or {}structs {}that they have, and you can right click {}&nbsp;on a value to set its {}type{}.":"{}如果您需要查看房间中当前的所有实例，您可以选择此窗口，它们将被列出。您还可以查看它们所拥有的任何{}内置变量{}、{}实例{}变量或{}结构{}的状态，您可以在值上单击鼠标右键{}以设置其{}类型{}。",
    "{}Strings and arrays do not permit this option, and it is worth noting that even if a data structure is stored in an instance variable, its ID number is global, so if you have four instances and each one creates a ds_list (for example), each list will have an ID from 0 to 3, and they won\u0027t all be 0.":"{}字符串和数组不允许此选项，值得注意的是，即使数据结构存储在实例变量中，其 ID 号也是全局的，所以如果您有四个实例，每个实例都创建一个 ds_list(例如)，每个列表将有一个从 0 到 3 的 ID，它们不会都是 0。",
    "{}Surfaces / Textures{}{}Surfaces / Textures{}":"{}表面/纹理{}{}表面/纹理{}",
    "{}The {}Globals {}window will show a list of all the currently declared {}global {}variables and their values.":"{}{} 全局 {} 窗口将显示当前声明的所有 {} 全局 {} 变量及其值的列表。",
    "{}The {}Globals {}window will show a list of all the currently declared {}global {}variables and their values. If you right click {}&nbsp;on a value you can set its {}type&nbsp;{}to see details of data structures.":"{}{}全局变量{}窗口将显示当前声明的所有{}全局变量{}及其值的列表。如果您在某个值上单击鼠标右键{}，则可以设置其{}类型{}以查看数据结构的详细信息。",
    "{}The {}Locals {}window shows the current step properties, which includes the name of the current event (or script) being run, the offset in the {}Virtual Machine (VM){} code for the current script (the acronym \"PC\" is for \"program counter\"), the \"self\" instance running the code block, and the \"other\" instance in the event. This last part is only ever valid when the event is a {}collision {}event or there is a \"{}with{}\" used in the code. If the instance is in collision, \"other\" will show the other instance (and its variables) in the collision, but if it is a {}with{} then the \"Self\" instance becomes that which is running the code, while \"Other\" is then the instance that actually contains the {}with{}. At all other times, \"other\" will simply show the same data as \"Self\".":"{}{} 局部变量 {} 窗口显示当前步骤的属性，包括正在运行的当前事件 (或脚本) 的名称、当前脚本的 {} 虚拟机 (VM){} 代码中的偏移量 (首字母缩写 \"PC\" 代表 \" 程序计数器 \")、运行代码块的 \"self\" 实例以及事件中的 \" 其他 \" 实例。仅当事件为 {} 冲突 {} 事件或代码中使用了 \"{}with{}\" 时，最后这部分才有效。如果实例处于冲突中，\"other\" 将显示冲突中的另一个实例 (及其变量)，但如果它是带有 {} 的 {}，则 \"self\" 实例将成为运行代码的实例，而 \"other\" 则是实际包含带有 {} 的 {} 的实例。在所有其他时间，\"other\" 将简单地显示与 \" 自我 \" 相同的数据。",
    "{}This watch enables you to see exactly what is being drawn to any {}surfaces {}you have in your game (including the application surface) as well as see the {}texture page{}{}s{} that are in memory. You can select from textures or surfaces from the menu at the bottom of the watch, and then mouse over the texture or surface ID to have it displayed in a pop-up window:":"{}这个视图可以让你准确地看到游戏中的任何{}表面{}(包括应用程序表面)上绘制了什么，以及内存中的{}纹理页面{}{}{}。您可以从手表底部的菜单中选择纹理或表面 ，然后将鼠标悬停在纹理或表面 ID上以将其显示在弹出窗口中：",
    "{}This watch shows you all the information available for the state of the current frame being {}rendered{}, like the draw alpha or fill colour. This cannot be updated in real time so you will need to pause the game to update and get the frame details.":"{}这个视图显示了当前帧状态的所有可用信息，如绘制Alpha或填充颜色。这不能实时更新，因此您需要暂停游戏以更新并获取帧详细信息。",
    "{}This window is for when you select an instance from your game. This is done by simply pausing the game and then clicking on any visible instance within the game window. The instance found beneath the mouse cursor will then have its information displayed in the Selected Instance window, where you can see it\u0027s built in variables, instance variables, and structs the same as for the Instances window.":"{}此窗口是在您从游戏中选择实例时使用的。这只需暂停游戏，然后点击游戏窗口中的任何可见实例即可。然后，在鼠标光标下方找到的实例将在所选实例窗口中显示其信息，在该窗口中可以看到它与实例窗口一样内置在变量、实例变量和结构中。",
    "{}This window is for when you select an instance from your game. This is done by simply pausing the game and then clicking on any visible instance within the game window. The instance found under the mouse cursor will then have its information displayed in the Selected Instance window, where you can see it\u0027s built-in variables, instance variables, and structs the same as for the Instances window.":"{}此窗口用于您从游戏中选择实例时。这只需暂停游戏，然后单击游戏窗口中的任何可见实例即可完成。鼠标光标下找到的实例将在选定实例窗口中显示其信息，在此窗口中您可以看到其内置变量，实例变量和结构体，与在Windows窗口中相同。",
    "{}This window is for you to add a specific variable that you want to keep track of. This can be a {}global {}or {}instance {}scope variable, a {}built in{} variable or even an {}array {}or {}data structure{}. If the instance code being stepped through has the watched variable it will be shown here, meaning you can easily keep track of a value without having to search for it in the {}Locals {}or {}Globals {}windows. If you right click {}&nbsp;on a value you can set its {}type{}, delete it, or clear all watches from the window.":"{}此窗口用于添加要跟踪的特定变量。这可以是一个{}全局{}或{}实例{}作用域变量、一个{}内置的{}变量，甚至是一个{}数组{}或{}数据结构{}。如果单步执行的实例代码具有受监视的变量，则它将在此处显示，这意味着您可以轻松跟踪某个值，而不必在{}局部变量{}或{}全局变量{}窗口中进行搜索。如果您在某个值上单击鼠标右键{} ，则可以设置其{}类型{}、删除该值或从窗口中清除所有监视。",
    "{}This window is for you to add a specific variable that you want to keep track of. This can be a {}global {}or {}instance {}scope variable, a {}built-in{} variable or even an {}array {}or {}data structure{}. If the instance code being stepped through has the watched variable it will be shown here, meaning you can easily keep track of a value without having to search for it in the {}Locals {}or {}Globals {}windows. If you right click {}&nbsp;on a value you can {}Delete Watch{}&nbsp;or&nbsp;{}Clear All{}.":"{} 此窗口用于添加要跟踪的特定变量。这可以是 {} 全局 {} 或 {} 实例 {} 作用域变量、{} 内置 {} 变量，甚至是 {} 数组 {} 或 {} 数据结构 {}。如果正在单步执行的实例代码具有监视变量，则会在此处显示，这意味着你可以轻松地跟踪一个值，而不必在 {} 局部 {} 变量或 {} 全局 {} 变量窗口中搜索它。如果你右键单击 {} 一个值，你可以 {} 删除监视 {} 或 {} 全部清除 {}。",
    "{}Watches{}":"{}监视器{}",
    "{}Watches{}{}Watches{}":"{}监视器{}{}监视器{}",
    "{}{}NOTE{}{}&nbsp;The \"Self\" and \"Other\" instances can be expanded by clicking on&nbsp;{}&nbsp;to see&nbsp;a list of all local and instance variables that are currently declared for the code block being stepped through.":"{}{} 注意{}{} 单击 {} 可以展开 \"Self\" 和 \"Other\" 实例，以查看当前为单步执行的代码块声明的所有局部变量和实例变量的列表。",
    "{}{}NOTE{}{}&nbsp;The debugger must be {}paused {}before these will update.":"{}{} 注意{}{} 在这些更新之前，必须 {} 暂停 {} 调试器。",
    "{}{}{}NOTE{}{}&nbsp;{}You cannot re-assign arrays or data structures in this way, but you can change some of their contents (you cannot change the \"key\" values in maps, nor the priority value for priority queues).":"{}{}{}注意{}{}{} 您不能以这种方式重新分配数组或数据结构，但您可以更改它们的某些内容(您不能更改映射中的\"键\"值，也不能更改优先级队列的优先级值)。"
}