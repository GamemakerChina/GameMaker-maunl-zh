{
    "Cloning A Repository":"克隆一个仓库",
    "Go to {}Source Control{} &gt; {}Clone Repository{}.":"转到{}源代码管理{}>{}克隆存储库{}。",
    "In the URL field, type the path to the project that we setup in the Reverting Files guide above (by default this will be {}&lt;DRIVE&gt;:\\Users\\&lt;Username&gt;\\Documents\\GameMaker\\&lt;ProjectName&gt;){}.{}":"在URL字段中，键入我们在上面的回滚文件指南中设置的项目的路径 (默认情况下，这将是 {}&lt;DRIVE&gt;:\\Users\\&lt;Username&gt;\\Documents\\GameMaker\\&lt;ProjectName&gt;){}.{}",
    "Once we\u0027ve done that, {}GameMaker{} will push the original project to the proxy, and pull a new one to the path we\u0027ve&nbsp;set in the {}Clone Repository{} window and then automatically open a file browser so we can open the stored project. If we now go to {}Source Control{} &gt; {}View History{} we\u0027ll see our original commits plus a new \"Push For Clone\" commit.":"完成此操作后，{}GameMaker{} 将把原始项目推送到代理，并将新项目拉到我们在{}克隆存储库{}窗口中设置的路径，然后自动打开文件浏览器，以便我们可以打开存储的项目。如果我们现在转到{}源代码管理{}>{}查看历史记录{}，我们将看到我们的原始提交加上一个新的\"推送克隆\"提交。",
    "To generate our conflict we first need to have two local repositories, one for the Master repository and one for our copy. To create this we need to Clone the repository, which is done with the following steps:":"要产生冲突，我们首先需要有两个本地存储库，一个用于主存储库，另一个用于我们的副本。要创建它，我们需要克隆存储库，这是通过以下步骤完成的：",
    "We then need to set a path to clone to: {} {}When we click the \"Ok\" button we\u0027ll get the following warning about trying to clone a \"non-bare\" repository: {} {}We can click \"Ok\" here again. ":"然后，我们需要设置要克隆到的路径： {} {}当我们单击\"OK\"按钮时，我们将收到以下有关尝试克隆\"非裸\"存储库的警告： {} {}我们可以在这里再次点击\"确定\"。",
    "We\u0027ll now be presented with a directory explorer to create a \"bare\" proxy repository (this is a repository which you can safely store on Dropbox, for example). Browse to where we want to create this proxy repository and select (or create) the folder to use.":"现在我们将看到一个目录资源管理器，用于创建一个\"空的\"代理存储库(例如，这是一个您可以安全地存储在 Dropbox 上的存储库)。浏览到我们要创建此代理存储库的位置，然后选择(或创建)要使用的文件夹。",
    "When your project is stored in an external repository, you need to remember to both push your changes and pull any new ones. The reason for this is that when you commit, you store your changes locally, which allows you to work away from an internet connection and sync up when you\u0027re ready, and to sync up you push your changes to the remote repository. Pulling changes means that you want to pull any changes that others have made from the remote repository into your local repository. However, this means that there may be times when people can be editing the same files, which in turn creates a {}merge conflict{}. You need to know how to handle these conflicts so we\u0027re going to deliberately create one now and then show you how to deal with it.":"当您的项目存储在外部存储库中时，您需要记住同时推送您的更改和提取任何新的更改。这样做的原因是，当您提交时，您将在本地存储您的更改，这允许您脱离互联网连接工作并在准备好时同步，而要同步，您可以将您的更改推送到远程存储库。提取更改意味着您希望将其他人所做的任何更改从远程存储库中提取到您的本地存储库中。然而，这意味着有时人们可能会编辑相同的文件，这反过来又会产生{}合并冲突{}。你需要知道如何处理这些冲突，所以我们现在就故意创建一个，然后向你展示如何处理它。",
    "{}NOTE{}: Sharing a local project repository (even through a file synchronization service like Dropbox) isn\u0027t recommended, as commits are generally written directly to it, and thus you have very little conflict protection.":"{}注意{}：不建议共享本地项目存储库(即使通过 Dropbox 这样的文件同步服务)，因为提交通常是直接写入它的，因此您几乎没有冲突保护。",
    "{}You have now cloned your repository and can continue working on the local version of the project.":"{}您现在已经克隆了存储库，可以继续处理项目的本地版本。"
}