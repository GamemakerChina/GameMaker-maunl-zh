{
    "Conflicts":"冲突",
    "In this section we are going to look at resolving conflicts between a {}cloned local repository{} and a master repository.&nbsp;Assuming you are now using a local repository we\u0027ll need to edit a file and then cause some kind of conflict, so open the test script we\u0027ve been using and change the \"Hello World\" message to something like this:":"在本节中，我们将研究如何解决{}克隆本地资料库{}与主资料库之间的冲突。假设您现在使用的是本地资料库，我们将需要编辑一个文件，然后导致某种冲突，因此打开我们一直使用的测试脚本，并将\"Hello World\"消息更改为如下所示：",
    "Note that we could actually fix this in the {}GameMaker{} IDE. If we remove lines 1, 2, 3 and 5 so we are left with just {}show_debug_message(\"Hello World, How Are You?\"){} and save it, it\u0027ll clear the conflict, as Git will assume that you know what you are doing with your own file. However, this is error prone, so it is recommended to install a merge tool, then configure and use that instead of manually trying to merge.":"请注意，我们实际上可以在 {}GameMaker{} IDE 中修复此问题。如果我们删除第1、2、3和5行，这样我们只剩下 {}show_debug_message(\"Hello World, How Are You?\"){} 并保存它，它将清除冲突，因为 Git 将假设您知道您正在对自己的文件做什么。但是，这很容易出错，因此建议安装合并工具，然后配置并使用该工具，而不是手动尝试合并。",
    "Now, you can use the buttons to sort out the conflict, but before you do, let\u0027s just open the conflicted file to see exactly what the issue is. If you open the script that is conflicted it will now look like this:":"现在，您可以使用按钮来解决冲突，但在此之前，让我们先打开冲突的文件，看看问题到底是什么。如果打开冲突的脚本，它现在将如下所示：",
    "This can be saved to disk, and the changes committed, but if you try to push these changes you\u0027ll get the following message:":"可以将其保存到磁盘，并提交更改，但如果您尝试推送这些更改，您将收到以下消息：",
    "You now need to edit the script again, so make it read something like this:":"现在您需要再次编辑该脚本，因此使其读起来如下所示：",
    "You should now save the project and commit it to the local repository. Now, since we are linked to a remote master repository (even if it\u0027s one we\u0027ve cloned to the same disk) we need to do a Push to get the changes on to master. For that, go to {}Source Control{} &gt; {}Push Changes{}, which will give us a status update in the Source Control {}Output Tab{}:":"现在，您应该保存项目并将其提交到本地存储库。现在，由于我们链接到远程主资料库(即使它是我们克隆到同一磁盘的主资料库)，我们需要执行推送操作才能将更改发送到主资料库。为此，请转到{}源代码管理{}>{}推送更改{}，这将在源代码管理{}输出选项卡中为我们提供状态更新{}：",
    "{}Choose Merge Tool{} - This will let you configure the Merge Tool (see the section on {}External Merge/Diff Tools{} for more details).":"{}选择合并工具{} - 这将允许您配置合并工具(有关更多详细信息，请参阅有关{}外部合并/比较工具的章节{})。",
    "{}Merge {}- This will attempt to open an External Merge Tool to handle the conflict.":"{}合并{} - 这将尝试打开外部合并工具来处理冲突。",
    "{}This shows that \"This Will Cause A Conflict\" is on the HEAD (this is what we have pushed to the local repository) and that \"Hello World, How Are You?\" is being pulled from master, the remote repository. You can go back to the Conflicts window now and click on {}Use Theirs{} to pull the changed file and overwrite the current HEAD file. The script will now be flagged as changed and you should do a new commit and push before continuing.":"{}这表明\"This Will Cause A Conflict\"是正确的(这是我们推送到本地存储库的内容)和\"Hello World，How Are You？\"是从远程存储库 master 中提取的。您现在可以返回到冲突窗口，然后单击{}使用他们的文件{}来拉出更改的文件并覆盖当前的头文件。脚本现在将被标记为已更改，您应该在继续之前执行新的提交和推送。",
    "{}This window will show the conflicted files in a list to the left, and you can select the files from that list using the left mouse button {}&nbsp;(or select multiple files using {}&nbsp;/&nbsp;{}&nbsp;or&nbsp;{} along with {}). You have four options for dealing with the conflicted files, available from the buttons on the right:":"{}此窗口将在左侧列表中显示冲突的文件，您可以使用鼠标左键{} 从该列表中选择文件(或使用{} / {} 或 {}和{}选择多个文件)。您有四个处理冲突文件的选项，可从右侧的按钮访问：",
    "{}Use Mine{} - This will overrule the changes from the remote repository with the ones you\u0027ve just made.":"{}使用自己的{} - 这将使用您刚才所做的更改否决来自远程存储库的更改。",
    "{}Use Theirs{} - This will overwrite the changes you have made with the one from the remote repository.":"{}使用他人的{} - 这将覆盖您使用远程存储库中的更改所做的更改。",
    "{}We now need to open up our original project (not the cloned one), so browse to where you saved it on disk - or simply check the {}Recent Projects{} in the {}File menu{}, as it should be directly under the current one - and load it into {}GameMaker{}. An easy way to check you have the right project is to simply check the script you have and if the message is \"Hello World\" then you have the right one, or you can open up the {}View History{} window and check that way.":"{}我们现在需要打开原始项目(而不是克隆的项目)，因此浏览到磁盘上保存它的位置-或者只需选中{}文件菜单{}中的{}最近的项目{}，因为它应该直接位于当前项目下-并将其加载到 {}GameMaker{} 中。检查您是否拥有正确项目的一种简单方法是，只需检查您拥有的脚本，如果消息是\"Hello World\"，则您拥有正确的脚本，或者您可以打开{}查看历史记录{}窗口并以此方式进行检查。",
    "{}{}{}Someone has already pushed changes which you don\u0027t have yet! This means that you need to do a pull on the repository and see what exactly the issue is, so go to {}Source Control{} &gt; {}Pull Changes{}. This will show two windows, the first is a warning about changed files (as with previous actions, you want to choose {}Reload {}here and {}not {}{}Save{}), and the other is the {}Conflicts {}window:":"{}{}{}有人已经推送了您尚未推送的更改！这意味着您需要拉入存储库并查看问题的确切原因，因此请转到{}源代码控制{}>{}拉出更改{}。这将显示两个窗口，第一个是有关更改的文件的警告(与前面的操作一样，您希望在此处选择{}重新加载{}，而{}不是{}{}保存{})，另一个是{}冲突{}窗口："
}