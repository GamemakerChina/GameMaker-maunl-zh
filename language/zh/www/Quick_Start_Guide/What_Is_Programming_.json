{
    "A large part of programming is made up of asking questions. These questions are generally simple ones that can evaluate to either true or false, and are called {}conditionals {}(and the values of {}true {}and {}false {}are called {}boolean {}values). The most common and widely used conditional is the question \"{}if{}\", which is used to check if something is {}true {}or {}false {}and then act accordingly. A simple example would be removing a character from the game if their health goes below zero, which in plain language would be expressed as:":"编程的很大一部分是由提问组成的。这些问题通常都很简单，可以计算为 true 或 false，它们被称为 {} 条件 {}( 而 {}true{} 和 {}false{} 的值被称为 {} 布尔 {} 值)。最常见和使用最广泛的条件是问题“{}if{}”，它用于检查某事是 {}true{} 还是 {}false{}，然后采取相应的行动。一个简单的例子是，如果一个角色的健康低于零，就将其从游戏中移除，这在通俗的语言中表达为：",
    "And using&nbsp;{}GML Code{}, it would look like this:":"使用 {}GML 代码{}，它将如下所示：",
    "Don\u0027t worry too much about the actual instance creation part of the above code, as we\u0027ll cover that in more detail in the following sections. The important thing to understand here is that you can create conditional expressions that check if something is {}true {}or {}false {}and have your program respond in different ways. This may seem a very simple thing, but it\u0027s actually incredibly powerful and will form the basis for almost everything you do when programming in {}GameMaker{}.":"不要太担心上面代码的实际实例创建部分，因为我们将在下面的小节中更详细地讨论这一点。这里需要理解的重要一点是，您可以创建条件表达式来检查某件事是 {}true{} 还是 {}false{}，并让程序以不同的方式响应。这似乎是一件非常简单的事情，但它实际上是令人难以置信的强大，并将构成您在 {}GameMaker{} 编程时所做的几乎所有事情的基础。",
    "Hopefully you\u0027ll now have a bit more of an idea of what programming is all about, so let\u0027s move on to explore the {}GameMaker{} {}IDE{} and see how to add assets like {}sprites {}and {}objects {}and other important resources that your game will need.":"希望您现在对编程有了更多的了解，所以让我们继续探索 {}GameMaker{} {}IDE{}，看看如何添加像{}精灵{}和{}对象{}这样的资源，以及您的游戏将需要的其他重要资源。",
    "However, variables are only the first part of the story. The next part is the use of Functions...":"然而，变量只是故事的第一部分。下一部分是函数的使用。",
    "In both of the above examples, the function takes an object ID as its input value (the {} {}argument{}{}&nbsp;or {}parameter{}) and will give an output value (the {}return {}value), which is the number of instances of the given object present in the room when the function/action was called. Note that we use a variable to store the returned value, the variable \"{}number{}\". This variable can be declared before this code is run, or it will be considered as being declared when the code is run and the return value from the function/action assigned to it.":"在上述两个示例中，该函数将对象 ID 作为其输入值({}{}参数{}{}或{}范围{})，并将提供输出值({}返回{}值)，这是调用函数/操作时给定对象在房间中存在的实例数。请注意，我们使用一个变量来存储返回值，即变量 \"{}number{}\"。可以在运行此代码之前声明此变量，也可以将其视为在代码运行时声明的变量，并将函数/操作的返回值分配给它。",
    "In the general sense, a program is simply a set of instructions (or {} {}statement{}{}{}s{}) that you give to the computer to tell it to perform certain tasks. These tasks can vary greatly from simply telling the computer to draw something to the screen, to calculating a value based on some user input and then reacting to it, but in all cases it\u0027s a logical structure that will give some result. In the previous page we talked about moving an instance of an object to the right by 2 pixels, so let\u0027s have a look at the actual program that would do that:":"在一般意义上，程序只是一组指令(或{}{}语句{}{}{}{})，您向计算机发出指令，告诉它执行某些任务。这些任务可能有很大的不同，从简单地告诉计算机在屏幕上画一些东西，到根据一些用户输入计算一个值，然后对它做出反应，但在所有情况下，它都是一个逻辑结构，会给出一些结果。在上一页中，我们讨论了将对象的实例向右移动2个像素，因此让我们来看看实现这一点的实际程序：",
    "In the {}previous section{}, we outlined how {}GameMaker{} works to create your game, but regardless of the sprites, objects or rooms that you have added, nothing will happen unless you have {}programmed {}it to happen. But, what is a program?":"在{}前一节{}中，我们概述了如何使用 {}GameMaker{} 来创建您的游戏，但无论您添加了什么精灵、物体或房间，除非您已将其设置为{}程序{}，否则什么都不会发生。但是，什么是程序呢？",
    "In {}GML Visual{} it would look like this:":"在 {}GML 可视化{}中，它将如下所示：",
    "It is worth noting that there are many different types of variables, and each one has slightly different ways it can be used. We won\u0027t be covering this here, but you can find out more information from the {}GameMaker Language Overview{} section of the manual.":"值得注意的是，有许多不同类型的变量，每一种变量的使用方法都略有不同。我们不会在这里讨论这一点，但你可以在手册的 {}GameMaker 语言概述 {} 部分找到更多信息。",
    "It is worth noting that you are not just limited to using the built in GameMaker Language or GML Visual actions and you can actually construct your own functions to use to extend what is possible when programming (you can find out more about this {}here{} for GML and {}here{} for GML Visual).":"值得注意的是，您不仅可以使用内置的 GameMaker 语言或 GML 可视化操作，您还可以构造自己的函数来扩展编程时可能的功能 (您可以在{}这里{}可以找到更多关于 GML 的信息，{}这里{}可以找到 GML 可视化的更多信息)。",
    "Once a variable has been declared, then it can be used in further programed code or actions. The great thing about variables is that it permits you to \"re-use\" a value in multiple places, without actually having to worry about what the value is. For example, say you have a \"{}damage{}\" variable and you use it in various places to tell {}GameMaker{} to deal a certain amount of damage to other objects in the game. We may declare \"{}damage{}\" as 20, but later on decide that this is too great a value and want to change it to 10. If we\u0027d used the value 20 instead of a variable, we\u0027d need to go through all our code or actions and change 20 to 10, which is time consuming and error prone. However, using a variable means we only have to change it {}once {}to 10 when we declare it and the rest of the code or actions will use this new value.":"一旦声明了变量，就可以在进一步的编程代码或操作中使用它。变量的伟大之处在于，它允许您在多个位置 \" 重用 \" 一个值，而不必真正担心值是什么。例如，假设你有一个 \"{}damage{}\" 变量，你在不同的地方使用它来告诉 {}GameMaker{} 对游戏中的其他物体造成一定数量的伤害。我们可能会将 \"{}damage{}\" 声明为 20，但稍后会认为这个值太大，并希望将其更改为 10。如果我们使用值 20 而不是变量，则需要遍历所有代码或操作并将 20 更改为 10，这既耗时又容易出错。然而，使用变量意味着我们只需在声明它时将{}其{}更改为 10，并且其余的代码或操作将使用这个新值。",
    "One more thing to note when using the \"{}if{}\" conditional is that we can add an \"{}else{}\" statement to it too, so the conditional would then become \"if something evaluates to {}true {}then do something, {}else {}do something different\". In this way way can deal with a conditional expression returning {}true {} {}or {} {}false{}. Let\u0027s give an example of that too:":"在使用 \"{}if{}\" 条件时需要注意的另一件事是，我们还可以向它添加 \"{}else{}\" 语句，这样条件就会变成 \" 如果某件事的计算结果为 {}true{} 则做一些事情，{}else{} 做一些不同的事情\"。通过这种方式可以处理返回 {}true{}{} 或 {}{}false{} 的条件表达式。让我们也举一个例子：",
    "So, above we ask the question \"if the hp variable is less than or equal to 0\" and then if that evaluates to true we call the function {}{}instance_destroy(){}{}&nbsp;or the action {}Destroy Object Instance{}. Note that the \"{}then{}\" (if something... then something...) is {}implicit {}and you don\u0027t need to add it, and also note that in the GML code we use braces {}{} {}to \"block off\" the code we want to be executed when the \" {}if{}\" evaluates to {}true {}(in GML Visual this is symbolised by dropping the actions to the {}right {}of the \"{}If{}\" action). Anything added between the braces will only run if the \" {}if{}\" evaluates to {}true{}, so you can have more than one statement run in a single \"block\".":"因此，上面我们问了 \" 如果 hp 变量小于或等于 0\" 的问题，然后如果计算结果为真，我们调用函数 {0}{1}instance_destroy(){2}{3} 或操作 {4} 销毁对象实例 {5}。注意，\"{6} 然后 {7}\"( 如果有什么.。然后发生了一些事情 ...)。是 {8} 隐式的 {9}，您不需要添加它，还要注意，在 GML 代码中，当 \"{13}if{14}\" 的计算结果为 {15}true{16} 时，我们使用大括号 { } 来 \" 阻止 \" 我们想要执行的代码 (在 GML 可视化中，这是通过将操作放到 \"{19}if{20}\" 操作的 {17} 右侧 {18} 来表示的)。只有当 \"{21}if{22}\" 的计算结果为 {23}true{} 时，大括号之间添加的任何内容才会运行，因此您可以在一个 \" 块 \" 中运行多条语句。{10}{11}",
    "So, to answer our question of \"What is programming?\", we can say that {}programming {}is using a combination of {}statements&nbsp; {}- which can use {} {}variable{}{} {}s{}{}&nbsp;{}to form {} {}expression{}{}{}s{},&nbsp;{}functions {}to perform tasks, and {}{}conditional{}{} {}s{}&nbsp;to ask questions - and then run these statements concurrently to achieve an objective. Below you can see a slightly more complex program in GML Visual and GML. Can you guess what it does?":"因此，为了回答\"什么是编程？\"的问题，我们可以说，{}编程{}是使用{}语句{}的组合 - 可以使用{}{}变量{}{}{}{}{} {}来形成{}{}表达式{}{}{}{}，使用{}函数{}来执行任务，使用{}{}条件{}{}{}{}来提出问题-然后同时运行这些语句来实现一个目标。下面您可以看到一个用 GML 可视化和 GML 编写的稍微复杂一点的程序。你能猜到它是做什么的吗？",
    "The above code first checks for a mouse button being pressed (the {}left {}mouse button, which is defined using the constant \" {}mb_left{}\"), and if it has been pressed, then it moves the instance running the code to the current mouse position (defined using the built-in variables \" {}mouse_x{}\" and \" {}mouse_y{}\") and also sets the instance blend colour to {}red{}. If the mouse button has not been pressed, then it checks to see if the mouse button has been {}released{}, and if it has it resets the instance blend colour to white (note that again, we use some built-in {}constants {}- \" {}c_red{}\" and \" {}c_white{}\" - to define the colours easily).":"上述代码首先检查鼠标按键是否被按下(鼠标{}左键{}是使用常量\"{}mb_left{}\"定义的)，如果按下了鼠标按键，则将运行代码的实例移动到当前鼠标位置(使用内置变量\"{}mouse_x{}\"和\"{}mouse_y{}\"定义)，并将实例混合颜色设置为{}red{}。如果没有按下鼠标按键，则它会检查鼠标按键是否已被{}释放{}，如果松开了，它会将实例混合颜色重置为白色(请再次注意，我们使用一些内置的{}常量{}-\"{}c_red{}\"和\"{}c_white{}\"-来轻松定义颜色)。",
    "The above code translates into plain language as:":"上述代码转换为纯语言，如下所示：",
    "The function we\u0027ll look at is {}{}instance_number(){}{}, which in GML Visual is the {}Get Instance Count{}&nbsp;action. This function/action will retrieve the number of instances of a given object in the game room, and you would use it like this:":"我们将看到的函数是 {}{}instance_number(){}{}，它在 GML 可视化中是{}获取实例计数{} 操作。此函数/操作将检索游戏室中给定对象的实例数，您可以这样使用它：",
    "The next main important part of programing is the use of {}functions {}along with variables. A function is simply an instruction to the computer to do something, and it can have input values as well as output values (ie: you can give a value to it, and it will do some operation and then return a different value), although not all functions require input, nor do they have an output. To better understand this, let\u0027s look at a built-in function in {}GameMaker{}.":"编程的下一个主要重要部分是使用{}函数{}和变量。函数只是一条指令，让计算机做一些事情，它既可以有输入值，也可以有输出值(即：你可以给它一个值，它会进行一些操作，然后返回一个不同的值)，尽管并不是所有的函数都需要输入，也不是所有的函数都有输出。为了更好地理解这一点，让我们来看看 {}GameMaker{} 中的一个内置函数。",
    "To create a variable, it must be {}declared {}before it can be used. Declaring a variable is telling {}GameMaker{} that this new variable exists and it has an initial value. To decalre a variable you would simply do something like this:":"要创建变量，必须先将其{}声明{}，然后才能使用。声明一个变量就是告诉 {}GameMaker{} 这个新变量存在，并且它有一个初始值。要取消变量的取值，只需执行如下操作：",
    "To make the above into code we\u0027d have this:":"要将上述代码转换为代码，我们需要以下代码：",
    "To understand what\u0027s going on above, we must first talk about {}Variables{}, and then we\u0027ll go on to discuss {}Functions {}and finally {}Conditionals {}as these three things are generally what makes up the bulk of any program.":"为了理解上面所发生的事情，我们必须首先讨论{}变量{}，然后我们将继续讨论{}函数{}，最后是{}条件{}，因为这三件事通常构成任何程序的主体。",
    "Variables are the cornerstone of programing, along with {}functions {}(which we\u0027ll cover briefly in a moment). A variable is simply a {}named value{}, and in the case above the variable is called \"{}x{}\". Now, \"{}x{}\" can be any value, like -126, or 583, or even 1.56378, but the actual value of \"{}x{}\" is irrelevant as it can vary (hence the name \"variable\"). What is important is that we take \"{}x{}\" and add 2 to it. It\u0027s worth noting that in this case \"{}x{}\" is a {}built-in variable{}, which means that it\u0027s a variable that is create by {}GameMaker{} for all objects, but you can create your own variables too.":"变量是编程的基石，还有{}函数{}(我们稍后将简要介绍)。变量只是一个名为 {} Value {}的值，在上面的例子中，变量称为 \"{}x{}\"。现在，\"{}x{}\" 可以是任何值，如 -126、583、甚至 1.56378，但 \"{}x{}\" 的实际值是不相关的，因为它可以变化 (因此称为 \" 变量 \")。重要的是，我们取 \"{}x{}\" 并将其加 2。值得注意的是，在本例中 \"{}x{}\" 是一个 {} 内置变量 {}，这意味着它是由 {}GameMaker{} 为所有对象创建的变量，但您也可以创建自己的变量。",
    "What Is Programming?":"什么是编程",
    "You can do a lot with functions and variables, however they would be pretty much useless without the final important piece of the programming story, {}conditionals{}...":"您可以使用函数和变量做很多事情，但是，如果没有编程故事的最后一个重要部分，{}条件{}，它们将几乎毫无用处。",
    "or:":"或:",
    "{}Conditionals{}{}Conditionals{}":"{}条件{}{}条件{}",
    "{}Functions{}{}Functions{}":"{}函数{}{}函数{}",
    "{}Spoiler{}{}Spoiler{}":"{}剧透{}{}剧透{}",
    "{}Variables{}{}Variables{}":"{}变量{}{}变量{}"
}