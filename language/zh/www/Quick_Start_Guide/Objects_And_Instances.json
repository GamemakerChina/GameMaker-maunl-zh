{
    " {}-->{}For information on all other types of&nbsp;events{}, please see {}here{}. ":"{}--&gt;{} 有关所有其他类型事件的信息 {}，请参阅 {} 此处 {}。",
    "Above you can see all the different {}Event Categories{}, some of which contain other sub-categories. We won\u0027t go through all the events here, but we will cover a few important ones briefly:":"在上方您可以看到所有不同的 {} 事件类别 {}，其中一些还包含其他子类别。我们不会在这里详细介绍所有事件，但我们将简要介绍一些重要的事件：",
    "Above you can see all the different {}Event Categories{}, some of which contain other sub-categories. We won\u0027t go through all the events here, but we will cover the five most important ones briefly:":"您可以在上面看到所有不同的{}事件类别{}，其中一些包含其他子类别。我们不会在这里介绍所有的事件，但我们将简要介绍五个最重要的事件：",
    "Adding an event will open either the&nbsp;{}GML Code{}&nbsp;or&nbsp;{}GML Visual{} editor, depending what type of event you are creating. In this window you can now add the code or actions that you wish to be performed each time that event is triggered within the game loop.":"添加事件将打开 {}GML 代码 {} 或 {}GML 可视化 {} 编辑器，具体取决于您要创建的事件类型。在此窗口中，您现在可以添加每次在游戏循环中触发该事件时希望执行的代码或操作。",
    "An alarm event can be set using the&nbsp;{}alarm{}&nbsp;variable or the&nbsp;{}Set Alarm Countdown{}&nbsp;action. You can \"set\" an alarm to a number of frames (i.e. steps) and that alarm event will be executed after that many steps, from the time it is set. For example, in the Create event, you can set Alarm 0 to 100, and the Alarm 0 event will execute 100 frames after the Create event.":"可以使用 {}alarm{} 变量或 {} 设置闹钟倒计时 {} 操作设置闹钟事件。您可以将警报 \" 设置 \" 为多个帧 (即步骤)，并且从设置时间起，该警报事件将在这么多步骤之后执行。例如，在 Create 事件中，可以将 Alarm 0 设置为 100，Alarm 0 事件将在 Create 事件后 100 帧执行。",
    "And you can find a full explanation of all the different parts of the Object Editor here:":"您可以在此处找到对象编辑器所有不同部分的完整说明：",
    "At this point, you may be asked to choose between&nbsp;{}GML Visual{}&nbsp;and&nbsp;{}GML Code{}. See&nbsp;{}GameMaker Language{} for more information.":"此时，可能会要求您在 {}GML 可视化 {} 和 {}GML 代码 {} 之间进行选择。有关详细信息，请参阅 {}GameMaker 语言 {}。",
    "Editors: The Object Editor":"编辑器：对象编辑器",
    "Events":"事件",
    "Events are discreet moments in the game loop where things are made to happen based on what you have programmed for them. {}GameMaker{} works with cycles of these events - from the moment a room is started to the moment it is finished there is a game loop running where every step a series of events are run, and you can choose to place GML code or GML Visual actions in your instances that respond to these events (a {}step {}is a moment in game time, governed by the game speed setting - also called a \"frame\").":"事件是游戏循环中谨慎的时刻，事情是根据你为它们编写的程序来实现的。{}GameMaker{} 处理这些事件的循环 -- 从房间开始到结束的那一刻，有一个运行游戏循环，其中每一步都会运行一系列事件，您可以选择在响应这些事件的实例中放置 GML 代码或 GML 可视化动作 ({} 步骤 {} 是游戏时间中的一个时刻，由游戏速度设置决定-也称为 \"帧\")。",
    "Events are moments in the game where things happen - and you decide what happens at each moment, using events. This is how you program your game!":"事件是游戏中发生事情的时刻 - 您可以使用事件来决定每个时刻会发生什么。这就是您编写游戏的方式！",
    "For further information on all the different events, please see {}here{}.":"有关所有不同活动的详细信息，请参阅{}此处{}。",
    "GML Code":"GML 代码",
    "GML Visual":"GML 可视化",
    "If you do not have an appropriate sprite yet, you can click {} on the {}New Sprite{} button {} to create a new sprite asset and edit it as you wish, just as if you had created the asset through the standard sprite create options, only now it will automatically be assigned to the object that you had open when you started to create it.":"如果您还没有合适的 Sprite，您可以点击 {}New Sprite{} 按钮 {} 来创建新的 Sprite 资源并根据需要对其进行编辑，就像您通过标准创建资源一样精灵创建选项，只有现在它才会自动分配给您在开始创建它时打开的对象。",
    "If you do not have an appropriate sprite yet, you can click {} on the {}New Sprite{} button {} to create a new sprite asset and edit it as you wish, just as if you had created the asset through the standard sprite create options, only now it will automatically be assigned to the object that you had open when you started to create it. Once you select a sprite you can also click {} on the {}Edit Sprite{} {} or {}Edit Image{} {} buttons to edit either the images of the sprite itself or the sprite asset. This can be faster than first finding the sprite in the Asset Browser and then indicating you want to edit it.":"如果您还没有合适的精灵，可以单击{}{}新建精灵{}按钮{}以创建新的精灵资源并根据需要对其进行编辑，就像您通过标准的精灵创建选项创建了资源一样，只是现在它将自动指定给您开始创建它时已打开的对象。选择精灵后，还可以单击{}编辑精灵{}{}或{}编辑图像{}{}按钮{}来编辑精灵本身的图像或精灵资源。这比先在资源浏览器中找到精灵，然后指示您要编辑它要快得多。",
    "In a game made with {}GameMaker{}, the characters, monsters, balls, walls, etc... that you see in the game are actually all considered as being {}instances{}. An instance is essentially a \"copy\" of an object that is found in the Asset Browser and then placed in a room (think of objects as {}templates {}for instances).":"在使用 {}GameMaker{} 制作的游戏中，您在游戏中看到的角色、怪物、球、墙等实际上都被视为 {} 实例 {}。实例本质上是在资源浏览器中找到并放置在房间中的对象的 \" 副本 \"( 将对象视为实例的 {} 模板 {})。",
    "Instances":"实例",
    "Now, we can\u0027t talk about Objects without talking about {}Instances{}.":"现在，我们不能在不讨论 {} 实例 {} 的情况下讨论对象。",
    "Now, we can\u0027t talk about Objects without talking about {}Instances{}. In a game made with {}GameMaker{}, the characters, monsters, balls, walls, etc... that you see in the game are actually all considered as being {}instances{}. An instance is essentially a \"copy\" of an object that is found in the Asset Browser and then placed in a room (think of objects as {}templates {}for instances). So when we talk about something affecting or changing an instance, we mean that one particular copy of an object in a room is being affected while all the rest are not, but when we talk about affecting or changing an object we mean that anything we do to it will be reflected in all the instances created from that point on too. So, {}the object is the template for the instance, and the instance is what we place in a room to make our game{}.":"现在，我们不能不讨论对象而不讨论 {} 实例 {}。在一款由 {}GameMaker{} 制作的游戏中，角色、怪物、球、墙等。你在游戏中看到的其实都是 {} 实例 {}。实例本质上是在资源浏览器中找到并放置在房间中的对象的“副本”(将对象视为实例的 {} 模板 {})。因此，当我们谈论影响或改变实例的东西时，我们的意思是房间中某个对象的一个特定副本受到影响，而其他所有副本都不受影响；但当我们谈论影响或改变对象时，我们对它所做的任何事情也将反映在从该点开始创建的所有实例中。因此，{} 对象是实例的模板，实例是我们放置在房间中以制作游戏的东西 {}。",
    "Object Editor":"对象编辑器",
    "Objects And Instances":"对象和实例",
    "Objects are a special asset that we use to control aspects of a game and to do specific things. Most of the time they have a sprite associated with them so that you can see them in the game rooms, but sometimes they are used as a \"behind the scenes\" {}controller {}objects to do things like track stats, or set timings for cut-scenes, etc...":"对象是一种特殊的资产，我们用它来控制游戏的各个方面并执行特定的操作。大多数时候，它们都有一个与之关联的精灵，以便您可以在游戏室中看到它们，但有时它们被用作 \" 幕后 \"{} 控制器 {} 对象来执行跟踪统计数据或设置计时等操作用于过场动画等 ...",
    "Objects can be given behaviours and they can react to certain events as well as to each other, and most of the things you see in a game are based on objects and their interactions with the user and each other.":"对象可以被赋予行为，它们可以对某些事件以及彼此做出反应，并且您在游戏中看到的大多数事物都是基于对象及其与用户和彼此之间的交互。",
    "Obviously when making a game, it is very important that you know when two (or more) instances of an object have collided, and for that we have the collision event. This is an event that you place in an object and then specify against which other object you should be checking for collisions, for example, the player colliding with a coin to collect it, or with an enemy to be hurt. Once you have added the event and chosen the object to check for, you can add GML code or GML Visual actions to program what happens on collision.":"显然，在制作游戏时，了解一个对象的两个 (或多个) 实例何时发生碰撞非常重要，为此我们有碰撞事件。这是一个您放置在对象中的事件，然后指定您应该检查哪个其他对象的碰撞，例如，玩家与硬币碰撞以收集它，或者与敌人碰撞而受到伤害。添加事件并选择要检查的对象后，您可以添加 GML 代码或 GML 视觉操作来对碰撞时发生的情况进行编程。",
    "Obviously when making a game, it is very important that you know when two (or more) instances of an object have collided, and for that we have the collision event. This is an event that you place in an object and then specify against which other object you should be checking for collisions. Once you have added the event and chosen the object to check for you can add GML code or GML Visual to resolve the collision.":"显然，在制作游戏时，知道对象的两个 (或更多) 实例发生碰撞是非常重要的，为此我们有碰撞事件。这是一个事件，您可以将其放置在对象中，然后指定应针对哪个其他对象检查碰撞。添加事件并选择要检查的对象后，可以添加 GML 代码或 GML 可视化来解决冲突。",
    "Once you have added or created the sprite, you can change a few other object properties like whether it should be {}visible {}or not - for example - or what kind of {}collision mask{} it should have. For simple games you probably don\u0027t need to change anything here and can now go on to add {}Events {}to the object.":"添加或创建精灵后，您可以更改其他几个对象属性，例如它是否应该{}可见{}，或者它应该具有哪种{}碰撞遮罩{}。对于简单的游戏，您可能不需要在此处更改任何内容，现在可以继续向对象添加{}事件{}。",
    "Once you select a sprite you can also click {} on the {}Edit Sprite{} {} or {}Edit Image{} {} buttons to edit either the images of the sprite itself or the sprite asset. This can be faster than first finding the sprite in the Asset Browser and then indicating you want to edit it.":"选择 Sprite 后，您还可以点击{}Edit Sprite{} 或 {}Edit Image{} 按钮上的 {3} 来编辑 Sprite 本身的图像或 Sprite 资源的图像。这比首先在资源浏览器中找到精灵然后指示您要编辑它要快。",
    "So when we talk about something affecting or changing an instance, we mean that one particular copy of an object in a room is being affected while all the rest are not, but when we talk about affecting or changing an object we mean that anything we do to it will be reflected in all the instances created from that point on too. So, {}the object is the template for the instance, and the instance is what we place in a room to make our game{}.":"因此，当我们谈论影响或更改实例的事物时，我们的意思是房间中对象的一个\u200B\u200B特定副本受到影响，而其他所有对象则不受影响，但是当我们谈论影响或更改对象时，我们的意思是我们所做的任何事情它也将反映在从那时起创建的所有实例中。因此，{} 该对象是实例的模板，而实例是我们放置在房间中以制作游戏的东西 {}。",
    "The next part of this guide will look at one more resource type, {}Sequences{}...":"本指南的下一部分将介绍另一种资源类型，即{}序列{}...",
    "There are multiple different Draw Events within the draw event category, but the one you use most is the one at the top simply called \"Draw\". This general draw event will be called, like the step event, every game frame, but it works in two different ways. The first is when you don\u0027t add this event to the object... When there is no {}specified {}Draw Event, then {}GameMaker{} will default to drawing the sprite assigned to the object, using any transforms that have been applied elsewhere in the object (like to change its size or alpha blending), so even when no Draw Event is listed in the Events list, it is still being run and will still draw to the screen when an instance is placed in a room. The second way it works is when you add the event itself and include any GML or GML Visual in it. Adding something to the event tells {}GameMaker{} \" {}I want to control what you draw for instances of this object{}\" and it completely over-rides the default draw. This means that you can have an object with a sprite assigned, then set the draw event to draw text and the sprite will not be drawn as you have not told {}GameMaker{} to draw it, although the text will be.":"在绘制事件类别中有多个不同的绘制事件，但您使用最多的是位于顶部的事件，简称为\"绘制\"。与步事件一样，这个常规的抽签事件将被称为每个游戏帧，但它有两种不同的工作方式。第一种情况是当您没有将此事件添加到对象时...。如果没有{}指定{}绘制事件，则 {}GameMaker{} 将默认使用对象中其他位置应用的任何变换(如更改其大小或Alpha混合)绘制指定给对象的精灵，因此即使在事件列表中没有列出绘制事件，它仍在运行，并且当实例放置在房间中时仍将绘制到屏幕上。第二种工作方式是当您添加事件本身并在其中包含任何GML或GML可视内容时。在事件中添加一些内容会告诉 {}GameMaker{} \"{}我想控制您为该对象的实例绘制的内容{}\"，它会完全覆盖默认绘制。这意味着您可以指定一个指定了精灵的对象，然后将绘制事件设置为绘制文本，并且不会绘制精灵，因为您没有告诉 {}GameMaker{} 绘制它，尽管文本将会绘制。",
    "There are multiple different Draw Events within the draw event category, but the one you use most is the one at the top simply called \"Draw\". This general draw event will be called, like the step event, every game frame, but it works in two different ways. The first is when you don\u0027t add this event to the object: When there is no specified Draw Event, then {}GameMaker{} will draw the sprite assigned to the object, using any transforms that have been applied elsewhere in the object (like to change its {}size{} or {}alpha blending{}), so even when no Draw Event is listed in the Events list, it is still being run and will still draw to the screen when an instance is placed in a room. The second way it works is when you add the event itself and include any GML code or GML Visual in it. Adding something to the event tells {}GameMaker{} \"{}I want to control what you draw for instances of this object{}\" and it completely overrides the default draw. This means that you can have an object with a sprite assigned, then set the draw event to draw text and the sprite will not be drawn as you have not told {}GameMaker{} to draw it (unless you do {}draw it{}), although the text will be.":"绘制事件类别中有多种不同的绘制事件，但您最常用的一个是位于顶部的简单称为 \" 绘制 \" 的事件。与步骤事件一样，每个游戏帧都会调用此一般绘制事件，但它以两种不同的方式工作。第一种情况是当您不将此事件添加到对象时：当没有指定的绘制事件时，{}GameMaker{} 将使用已在对象中其他位置应用的任何变换来绘制分配给该对象的精灵 (例如更改其 {} 大小 {} 或 {}Alpha 混合 {})，因此即使事件列表中未列出任何绘制事件，它仍在运行，并且当将实例放置在房间。第二种工作方式是添加事件本身并在其中包含任何 GML 代码或 GML Visual。向事件添加一些内容会告诉 {}GameMaker{}\"{} 我想控制您为此对象的实例绘制的内容 {}\"，并且它会完全覆盖默认绘制。这意味着您可以为一个分配了精灵的对象，然后设置绘制事件来绘制文本，并且精灵不会被绘制，因为您没有告诉 {}GameMaker{} 绘制它 (除非您 {} 绘制它 {})，尽管文本也是。",
    "These events run when input is found on the selected key. For example, let\u0027s take the \"Space\" event, which runs for the Spacebar. A \"{}Key Down{}\" event would execute every step that the Spacebar is held down. A \"{}Key Pressed{}\" event would only run that one step where the key was found to be hit, and will not run again until it is released and hit again. A \"{}Key Up{}\" event will run on the step where the key is released.":"当在选定的键上找到输入时，这些事件就会运行。例如，我们以 \"Space\" 事件为例，该事件针对空格键运行。 \"{}Key Down{}\" 事件将执行按住空格键的每一步。 \"{}Key Pressed{}\" 事件只会运行发现按键被击中的那一步，并且不会再次运行，直到释放并再次击中按键为止。 \"{}Key Up{}\" 事件将在释放按键的步骤上运行。",
    "This event happens when an instance of the object is first created, and is the very first thing that happens within an instance that has been placed in the room through the room editor when a room is entered. This means that this event is the ideal place to initialise variables, set paths etc... and do anything else that generally only needs to be done once or only when an instance first appears in the room.":"该事件在首次创建对象的实例时发生，并且是进入房间时通过房间编辑器放置在房间中的实例内发生的第一件事。这意味着该事件是初始化变量、设置路径等的理想场所 ... 以及执行通常只需要执行一次或仅在实例首次出现在房间中时执行的任何其他操作。",
    "This event happens when an instance of the object is first created, and is the very first thing that happens within an instance that has been placed in the room through the room editor when a room is entered. This means that this event is the ideal place to initialize variables, start Timelines, set paths etc... and do anything else that generally only needs to be done once or only when an instance first appears in the room.":"此事件在首次创建对象的实例时发生，并且是进入房间时在已通过房间编辑器放置到房间中的实例中发生的第一件事。这意味着该事件是初始化变量、开始时间线、设置路径等的理想场所。并执行通常只需执行一次或仅当实例首次出现在房间中时才执行的任何其他操作。",
    "This event is the very last event to be executed when an instance is destroyed. It is often overlooked when adding behaviours to objects, but it can be very useful - for example, for creating explosion or particle effects when an enemy is killed, or for re-spawning a new instance of the object in another part of the room, or even for adding points onto a score.":"此事件是销毁实例时要执行的最后一个事件。在将行为添加到对象时，它经常被忽略，但它可以非常有用-例如，在敌人被击毙时创建爆炸或粒子效果，或在房间的另一部分重新生成对象的新实例，甚至用于为分数增加分数。",
    "This is the {}Object Editor{} window and shows the current object properties, and the first thing you should do is name the object, again using a prefix like \" {}obj_{}\" or some other identifier. In general, for an object to draw anything and register collisions with instances of other objects it needs to have a sprite assigned to it, which is added using the {}&nbsp;button. This will open the {}Asset Explorer{} where you can select the sprite to use (you can also drag sprites from the Asset Browser and drop them onto the Object Editor to assign them):":"这是 {} 对象编辑器 {} 窗口，其中显示了当前的对象属性，您应该做的第一件事是命名对象，再次使用类似 \"{}obj_{}\" 的前缀或其他一些标识符。通常，一个对象要绘制任何内容并注册与其他对象实例的碰撞，需要为其指定一个精灵，该精灵是使用 {} 按钮添加的。这将打开 {} 资源管理器 {}，您可以在其中选择要使用的精灵 (也可以将精灵从资源浏览器拖放到对象编辑器上以进行指定)：",
    "This is the {}Object Editor{} window and shows the current object properties, and the first thing you should do is name the object, again using a prefix like \"{}obj_{}\" or some other identifier. In general, for an object to draw anything and register collisions with instances of other objects it needs to have a sprite assigned to it, which is added using the {}&nbsp;button.":"这是 {} 对象编辑器 {} 窗口，显示当前对象属性，您应该做的第一件事是命名对象，同样使用 \"{}obj_{}\" 等前缀或其他标识符。一般来说，要让对象绘制任何内容并注册与其他对象实例的碰撞，需要为其分配一个精灵，该精灵是使用 {} 按钮添加的。",
    "This will open the {}Asset Explorer{} where you can select the sprite to use (you can also drag sprites from the Asset Browser and drop them onto the Object Editor to assign them):":"这将打开 {}Asset Explorer{}，您可以在其中选择要使用的精灵 (您也可以将精灵从资源浏览器中拖放到对象编辑器上以进行分配)：",
    "To add an event you click {} on the Add Event button:":"要添加事件，请单击添加事件按钮上的{}：",
    "To create a new object asset, it\u0027s the same as for every other asset and you simply right click {} on the Objects asset folder and select {}Create{} (or right click anywhere in the {}Asset Browser{} and select {}Create Object{}).":"要创建新的对象资源，与其他所有资源相同，只需在对象资源文件夹上单击鼠标右键{}并选择{}创建{}(或在{}资源浏览器{}中的任意位置单击鼠标右键并选择{}创建对象{})。",
    "With the assets you have seen so far you can add some nice images and sounds to the game asset browser, but they don\u0027t do anything in the game itself yet! For that we need the most important assets of all in {}GameMaker{}, the {}Object {}asset.":"通过到目前为止您所看到的资产，您可以向游戏资产浏览器添加一些漂亮的图像和声音，但它们在游戏本身中还没有执行任何操作！为此，我们需要 {}GameMaker{} 中最重要的资产，即 {} 对象 {} 资产。",
    "With the assets you have seen so far you can add some nice images and sounds to the game asset browser, but they don\u0027t do anything in the game itself yet! For that we need the most important assets of all in {}GameMaker{}, the {}Object {}asset. Objects are a special asset that we use to control aspects of a game and to do specific things. Most of the time they have a sprite associated with them so that you can see them in the game rooms, but sometimes they are used as a \"behind the scenes\" {}controller {}objects to do things like track stats, or set timings for cut-scenes, etc... Objects can be given behaviours and they can react to certain events as well as to each other, and most of the things you see in a game are based on objects and their interactions with the user and each other.":"有了你到目前为止看到的资源，你可以在游戏资源浏览器中添加一些漂亮的图像和声音，但它们还不能在游戏本身做任何事情！为此，我们需要 {}GameMaker{} 中最重要的资源，{}对象{}资源。物体是一种特殊的资源，我们用它来控制游戏的各个方面，并做一些特定的事情。大多数时候，它们都有一个与之相关的精灵，这样你就可以在游戏室里看到它们了，但有时它们也会被用作\"幕后\"的{}控制器{}对象，来做一些事情，比如跟踪统计数据，或者设置剪辑场景的时间等等。对象可以被赋予行为，它们可以对某些事件以及彼此做出反应，你在游戏中看到的大多数东西都是基于对象及其与用户和彼此的交互。",
    "You can find more information about using GML in your object events from the two pages given below:":"您可以从下面给出的两个页面中找到有关在对象事件中使用 GML 的详细信息：",
    "You can then click on an event in the list to add it to the object.":"然后，您可以单击列表中的事件将其添加到对象中。",
    "{}Alarm events{}":"{} 警报事件 {}",
    "{}Collision Event{}":"{}碰撞事件{}",
    "{}Create Event{}":"{}创建事件{}",
    "{}Destroy Event{}":"{}销毁事件{}",
    "{}Draw Event{}":"{}绘制事件{}",
    "{}GameMaker{} splits game time into steps with the game speed defining how many of these steps there are supposed to be per second - by default, there are 60 steps a second. The Step Event is executed every single step of the game while the instance exists, and can be used for continuous behaviour like moving, collision checking, etc. Note that the Step Event category has three sub-categories to \"fine tune\" timing within the instance, but in general you will use the main Step Event most.":"{}GameMaker{} 将游戏时间分成多个步骤，游戏速度定义每秒应有多少个步骤 - 默认情况下，每秒有 60 个步骤。当实例存在时，步骤事件会在游戏的每一步中执行，并且可用于连续行为，如移动、碰撞检查等。请注意，步骤事件类别具有三个子类别，用于在实例中 \" 微调 \" 计时。例如，但一般来说，您最常使用主步骤事件。",
    "{}GameMaker{} splits game time into steps with the game speed defining how many of these steps there are supposed to be per second. A step, is basically the loop that runs constantly with all the events being checked and triggered as necessary while the game runs, so as you can imagine, the Step Event is an event that is checked every single step of the game while the instance exists. Note that the Step Event category has three sub-categories to \"fine tune\" timing within the instance, but in general you will use the main Step Event most.":"{}GameMaker{} 根据游戏速度将游戏时间分成几个步骤，以定义每秒应该有多少个这样的步骤。步骤，基本上是一个循环，在游戏运行时，所有事件都会被检查并根据需要触发，所以可以想象，步骤事件是在实例存在的情况下，游戏的每个步骤都被检查的事件。请注意，步骤事件类别有三个子类别，可在实例中“微调”计时，但通常您将使用最多的主步骤事件。",
    "{}GameMaker{} works with cycles of these events - from the moment a room is started to the moment it is finished, there is a game loop running where every frame a series of events are run, and you can choose to place GML code or GML Visual actions in your instances that respond to these events.":"{}GameMaker{} 处理这些事件的循环 - 从房间启动到结束，有一个游戏循环在运行，其中每一帧都会运行一系列事件，您可以选择放置 GML 代码或实例中响应这些事件的 GML 视觉操作。",
    "{}Key Down{} Key Pressed{} Key Up{}":"{} 按下键 {} 按下键 {} 弹起键 {}",
    "{}Step Event{}":"{}步事件{}"
}